
led_counter.elf:     file format elf32-littlenios2
led_counter.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000244

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00010028 memsz 0x00010028 flags r-x
    LOAD off    0x00011048 vaddr 0x01010048 paddr 0x01011b34 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013620 vaddr 0x01013620 paddr 0x01013620 align 2**12
         filesz 0x00000000 memsz 0x00070964 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fac4  01000244  01000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000340  0100fd08  0100fd08  00010d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  01010048  01011b34  00011048  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00070a0e  01013620  01013620  00013620  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_controller 00000000  01083f84  01083f84  00012b34  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012b34  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000eb8  00000000  00000000  00012b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000237c0  00000000  00000000  00013a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000090e7  00000000  00000000  000371d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b64b  00000000  00000000  000402b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000219c  00000000  00000000  0004b904  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003815  00000000  00000000  0004daa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  000512b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00068b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  00068b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d62e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006d631  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d634  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d635  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006d636  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006d63a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006d63e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006d642  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006d64b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006d654  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0006d65d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000026  00000000  00000000  0006d66a  2**0
                  CONTENTS, READONLY
 29 .jdi          000065b9  00000000  00000000  0006d690  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000597a6  00000000  00000000  00073c49  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
01000244 l    d  .text	00000000 .text
0100fd08 l    d  .rodata	00000000 .rodata
01010048 l    d  .rwdata	00000000 .rwdata
01013620 l    d  .bss	00000000 .bss
01083f84 l    d  .SDRAM_controller	00000000 .SDRAM_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../led_controller_bsp//obj/HAL/src/crt0.o
0100028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 counter.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100fd96 l     O .rodata	00000010 zeroes.4404
01002fb0 l     F .text	000000bc __sbprintf
0100fda6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
010031c0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01004cf0 l     F .text	00000008 __fp_unlock
01004d04 l     F .text	0000019c __sinit.part.1
01004ea0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01010048 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0101048c l     O .rwdata	00000020 lc_ctype_charset
0101046c l     O .rwdata	00000020 lc_message_charset
010104ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0100fdd8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100829c l     F .text	000000fc __sprint_r.part.0
0100ff0c l     O .rodata	00000010 blanks.4348
0100fefc l     O .rodata	00000010 zeroes.4349
01009828 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0100d4e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100d5f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100d61c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0100d888 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100d968 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100da54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100dc28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01011b28 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100de74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100dfa8 l     F .text	00000034 alt_dev_reg
01010a94 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100e284 l     F .text	0000020c altera_avalon_jtag_uart_irq
0100e490 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100ec3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100f0b0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0100f1f0 l     F .text	0000003c alt_get_errno
0100f22c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01013658 g     O .bss	00000004 alt_instruction_exception_handler
01013684 g     O .bss	00025800 redPicture
010078e0 g     F .text	00000074 _mprec_log10
010079cc g     F .text	0000008c __any_on
01009dc4 g     F .text	00000054 _isatty_r
0100fde4 g     O .rodata	00000028 __mprec_tinytens
0100db64 g     F .text	0000007c alt_main
01000c30 g     F .text	000000c0 _puts_r
01083e84 g     O .bss	00000100 alt_irq
01009e18 g     F .text	00000060 _lseek_r
01011b34 g       *ABS*	00000000 __flash_rwdata_start
0100c010 g     F .text	00000088 .hidden __eqdf2
01083f84 g       *ABS*	00000000 __alt_heap_start
01000bf4 g     F .text	0000003c printf
0100a030 g     F .text	0000009c _wcrtomb_r
0100815c g     F .text	0000005c __sseek
01005040 g     F .text	00000010 __sinit
01009ed8 g     F .text	00000140 __swbuf_r
01005b08 g     F .text	0000007c _setlocale_r
01004ea8 g     F .text	00000068 __sfmoreglue
0100dc04 g     F .text	00000024 __malloc_unlock
01000290 g     F .text	00000034 LCD_Write_Command
010067d8 g     F .text	0000015c memmove
010002c4 g     F .text	00000034 LCD_Write_Data
01005028 g     F .text	00000018 _cleanup
01006a5c g     F .text	000000a8 _Balloc
0100c098 g     F .text	000000dc .hidden __gtdf2
0100f5e8 g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01009d68 g     F .text	0000005c _fstat_r
0101363c g     O .bss	00000004 errno
010080d8 g     F .text	00000008 __seofread
01013648 g     O .bss	00000004 alt_argv
01019af4 g       *ABS*	00000000 _gp
01010914 g     O .rwdata	00000180 alt_fd_list
0100f60c g     F .text	00000090 alt_find_dev
01006690 g     F .text	00000148 memcpy
01004cf8 g     F .text	0000000c _cleanup_r
0100d2fc g     F .text	000000dc .hidden __floatsidf
0100f174 g     F .text	0000007c alt_io_redirect
0100c174 g     F .text	000000f4 .hidden __ltdf2
0100fd08 g       *ABS*	00000000 __DTOR_END__
01000cf0 g     F .text	00000014 puts
0100f8d8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01007fbc g     F .text	00000074 __fpclassifyd
0100783c g     F .text	000000a4 __ratio
0100980c g     F .text	0000001c __vfiprintf_internal
0100e688 g     F .text	0000021c altera_avalon_jtag_uart_read
01000bc4 g     F .text	00000030 _printf_r
0100adc0 g     F .text	00000064 .hidden __udivsi3
0100d8c4 g     F .text	000000a4 isatty
0100fe34 g     O .rodata	000000c8 __mprec_tens
01005b84 g     F .text	0000000c __locale_charset
0100f848 g     F .text	00000090 alt_icache_flush
01013638 g     O .bss	00000004 __malloc_top_pad
01011afc g     O .rwdata	00000004 __mb_cur_max
01005bb4 g     F .text	0000000c _localeconv_r
01006e68 g     F .text	0000003c __i2b
010054c4 g     F .text	000004bc __sfvwrite_r
010002f8 g     F .text	00000258 init_LCD
01008030 g     F .text	00000054 _sbrk_r
01009e78 g     F .text	00000060 _read_r
01011b1c g     O .rwdata	00000004 alt_max_fd
01009a5c g     F .text	000000f0 _fclose_r
01004cc0 g     F .text	00000030 fflush
01013634 g     O .bss	00000004 __malloc_max_sbrked_mem
0100d708 g     F .text	00000180 alt_irq_register
0100ae7c g     F .text	000008ac .hidden __adddf3
010075e4 g     F .text	0000010c __b2d
0100a790 g     F .text	00000538 .hidden __umoddi3
0100da90 g     F .text	000000d4 lseek
01011af4 g     O .rwdata	00000004 _global_impure_ptr
01007a58 g     F .text	00000564 _realloc_r
01083f84 g       *ABS*	00000000 __bss_end
0100efc0 g     F .text	000000f0 alt_iic_isr_register
0100f4e0 g     F .text	00000108 alt_tick
0100a218 g     F .text	00000578 .hidden __udivdi3
01009cc4 g     F .text	00000024 _fputwc_r
0100fe0c g     O .rodata	00000028 __mprec_bigtens
01006c4c g     F .text	00000104 __s2b
0100d3d8 g     F .text	000000a8 .hidden __floatunsidf
01007324 g     F .text	00000060 __mcmp
01038e84 g     O .bss	00025800 bluePicture
01005060 g     F .text	00000018 __fp_lock_all
0100ef74 g     F .text	0000004c alt_ic_irq_enabled
0100f444 g     F .text	0000009c alt_alarm_stop
01013640 g     O .bss	00000004 alt_irq_active
01000708 g     F .text	00000340 initPictures
010000fc g     F .exceptions	000000d4 alt_irq_handler
010108ec g     O .rwdata	00000028 alt_dev_null
0100ebf4 g     F .text	00000048 alt_dcache_flush_all
01006d50 g     F .text	00000068 __hi0bits
0100d27c g     F .text	00000080 .hidden __fixdfsi
01011b34 g       *ABS*	00000000 __ram_rwdata_end
01011b14 g     O .rwdata	00000008 alt_dev_list
0100deb0 g     F .text	000000f8 write
01010048 g       *ABS*	00000000 __ram_rodata_end
0100d658 g     F .text	000000b0 fstat
0100c174 g     F .text	000000f4 .hidden __ledf2
0100709c g     F .text	00000140 __pow5mult
010083b0 g     F .text	0000145c ___vfiprintf_internal_r
0101362c g     O .bss	00000004 __nlocale_changed
0100ae24 g     F .text	00000058 .hidden __umodsi3
01083f84 g       *ABS*	00000000 end
0100e1c4 g     F .text	000000c0 altera_avalon_jtag_uart_init
010001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0100fd08 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0100d480 g     F .text	00000064 .hidden __clzsi2
0100e8a4 g     F .text	00000224 altera_avalon_jtag_uart_write
01005050 g     F .text	00000004 __sfp_lock_acquire
010065ac g     F .text	000000e4 memchr
01000d9c g     F .text	000021f8 ___vfprintf_internal_r
010051b4 g     F .text	00000310 _free_r
01005b90 g     F .text	00000010 __locale_mb_cur_max
0100fb54 g     F .text	00000180 __call_exitprocs
01013628 g     O .bss	00000004 __mlocale_changed
01011b00 g     O .rwdata	00000004 __malloc_sbrk_base
01000244 g     F .text	0000004c _start
01013650 g     O .bss	00000004 _alt_tick_rate
010071dc g     F .text	00000148 __lshift
01013654 g     O .bss	00000004 _alt_nticks
0100dc64 g     F .text	000000fc read
0100e014 g     F .text	0000004c alt_sys_init
0100fa3c g     F .text	00000118 __register_exitproc
010005c8 g     F .text	00000098 sendPicture
01006ea4 g     F .text	000001f8 __multiply
0100e530 g     F .text	00000068 altera_avalon_jtag_uart_close
01010048 g       *ABS*	00000000 __ram_rwdata_start
0100fd08 g       *ABS*	00000000 __ram_rodata_start
0101365c g     O .bss	00000028 __malloc_current_mallinfo
010076f0 g     F .text	0000014c __d2b
0100e060 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0100f7a4 g     F .text	000000a4 alt_get_fd
01009944 g     F .text	00000054 _close_r
0100f9c0 g     F .text	0000007c memcmp
0100e120 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01083f84 g       *ABS*	00000000 __alt_stack_base
0100e170 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0100306c g     F .text	00000154 __swsetup_r
0100b728 g     F .text	000008e8 .hidden __divdf3
01004f10 g     F .text	00000118 __sfp
01007954 g     F .text	00000078 __copybits
010104e4 g     O .rwdata	00000408 __malloc_av_
0100505c g     F .text	00000004 __sinit_lock_release
0100c268 g     F .text	00000718 .hidden __muldf3
01008084 g     F .text	00000054 __sread
01013620 g     O .bss	00000004 counter
0100f69c g     F .text	00000108 alt_find_file
0100ec78 g     F .text	000000a4 alt_dev_llist_insert
0100dbe0 g     F .text	00000024 __malloc_lock
0100ddc4 g     F .text	000000b0 sbrk
01004c64 g     F .text	0000005c _fflush_r
01009998 g     F .text	000000c4 _calloc_r
01013620 g       *ABS*	00000000 __bss_start
01006934 g     F .text	00000128 memset
01000ad8 g     F .text	000000ec main
0101364c g     O .bss	00000004 alt_envp
01013630 g     O .bss	00000004 __malloc_max_total_mem
0100e0c0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0100a018 g     F .text	00000018 __swbuf
010081b8 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01009b4c g     F .text	00000014 fclose
010033c0 g     F .text	00001688 _dtoa_r
01005da0 g     F .text	0000080c _malloc_r
0100a18c g     F .text	00000030 __ascii_wctomb
01011b20 g     O .rwdata	00000004 alt_errno
01005980 g     F .text	000000c4 _fwalk
01000550 g     F .text	00000078 sendPixel
0100acc8 g     F .text	00000084 .hidden __divsi3
0105e684 g     O .bss	00025800 greenPicture
01005090 g     F .text	00000124 _malloc_trim_r
0100fd08 g       *ABS*	00000000 __CTOR_END__
01000a48 g     F .text	00000090 sendPictureTab
010081c0 g     F .text	000000dc strcmp
0100fd08 g       *ABS*	00000000 __flash_rodata_start
0100fd08 g       *ABS*	00000000 __DTOR_LIST__
010006a4 g     F .text	00000064 RGBtoBGR
0100c010 g     F .text	00000088 .hidden __nedf2
01000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
0100dfdc g     F .text	00000038 alt_irq_init
0100dd60 g     F .text	00000064 alt_release_fd
0100ff1c g     O .rodata	00000100 .hidden __clz_tab
01013624 g     O .bss	00000004 _PathLocale
0100f974 g     F .text	00000014 atexit
010098e4 g     F .text	00000060 _write_r
01005bc0 g     F .text	00000018 setlocale
01011af8 g     O .rwdata	00000004 _impure_ptr
01013644 g     O .bss	00000004 alt_argc
01000660 g     F .text	00000044 timer_interrupt
01004a48 g     F .text	0000021c __sflush_r
0100ed7c g     F .text	00000060 _do_dtors
01005bac g     F .text	00000008 __locale_cjk_lang
01000020 g       .exceptions	00000000 alt_irq_entry
01007580 g     F .text	00000064 __ulp
01005078 g     F .text	00000018 __fp_unlock_all
01011b0c g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01005bd8 g     F .text	0000000c localeconv
0100ee10 g     F .text	00000050 alt_ic_isr_register
01011b34 g       *ABS*	00000000 _edata
01083f84 g       *ABS*	00000000 _end
01009b60 g     F .text	00000164 __fputwc
01000244 g       *ABS*	00000000 __ram_exceptions_end
0100e598 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0100eee8 g     F .text	0000008c alt_ic_irq_disable
010080e0 g     F .text	0000007c __swrite
01011b04 g     O .rwdata	00000004 __malloc_trim_threshold
01005ba0 g     F .text	0000000c __locale_msgcharset
0100f988 g     F .text	00000038 exit
01005a44 g     F .text	000000c4 _fwalk_reent
01007384 g     F .text	000001fc __mdiff
0100ad4c g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01005054 g     F .text	00000004 __sfp_lock_release
0100fcd4 g     F .text	00000034 _exit
0100eac8 g     F .text	0000012c alt_alarm_start
01005be4 g     F .text	000001bc __smakebuf_r
01000d04 g     F .text	00000098 strlen
0100f2f0 g     F .text	00000154 open
0100c098 g     F .text	000000dc .hidden __gedf2
01011b08 g     O .rwdata	00000004 __wctomb
01008398 g     F .text	00000018 __sprint_r
0100eddc g     F .text	00000034 alt_icache_flush_all
01011b24 g     O .rwdata	00000004 alt_priority_mask
0100ee60 g     F .text	00000088 alt_ic_irq_enable
01002f94 g     F .text	0000001c __vfprintf_internal
0100a1bc g     F .text	0000005c _wctomb_r
0100c980 g     F .text	000008fc .hidden __subdf3
01006db8 g     F .text	000000b0 __lo0bits
01011b2c g     O .rwdata	00000008 alt_alarm_list
0100ed1c g     F .text	00000060 _do_ctors
0100a0cc g     F .text	000000c0 wcrtomb
0100d520 g     F .text	000000d0 close
0100d9d0 g     F .text	00000084 alt_load
01009ce8 g     F .text	00000080 fputwc
01005058 g     F .text	00000004 __sinit_lock_acquire
01006b2c g     F .text	00000120 __multadd
01006b04 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08409114 	ori	at,at,580
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x1000000>

Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000fc0 	call	10000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000706 	br	10000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1000098:	10001d00 	call	10001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100009c:	1000021e 	bne	r2,zero,10000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000f8:	ef80083a 	eret

010000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000fc:	defff904 	addi	sp,sp,-28
 1000100:	dfc00615 	stw	ra,24(sp)
 1000104:	df000515 	stw	fp,20(sp)
 1000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000110:	0005313a 	rdctl	r2,ipending
 1000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000124:	00800044 	movi	r2,1
 1000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100012c:	e0fffb17 	ldw	r3,-20(fp)
 1000130:	e0bffc17 	ldw	r2,-16(fp)
 1000134:	1884703a 	and	r2,r3,r2
 1000138:	10001426 	beq	r2,zero,100018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100013c:	00804234 	movhi	r2,264
 1000140:	108fa104 	addi	r2,r2,16004
 1000144:	e0fffd17 	ldw	r3,-12(fp)
 1000148:	180690fa 	slli	r3,r3,3
 100014c:	10c5883a 	add	r2,r2,r3
 1000150:	10c00017 	ldw	r3,0(r2)
 1000154:	00804234 	movhi	r2,264
 1000158:	108fa104 	addi	r2,r2,16004
 100015c:	e13ffd17 	ldw	r4,-12(fp)
 1000160:	200890fa 	slli	r4,r4,3
 1000164:	1105883a 	add	r2,r2,r4
 1000168:	10800104 	addi	r2,r2,4
 100016c:	10800017 	ldw	r2,0(r2)
 1000170:	1009883a 	mov	r4,r2
 1000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100017c:	0005313a 	rdctl	r2,ipending
 1000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000184:	e0bfff17 	ldw	r2,-4(fp)
 1000188:	00000706 	br	10001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100018c:	e0bffc17 	ldw	r2,-16(fp)
 1000190:	1085883a 	add	r2,r2,r2
 1000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1000198:	e0bffd17 	ldw	r2,-12(fp)
 100019c:	10800044 	addi	r2,r2,1
 10001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a4:	003fe106 	br	100012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 10001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10001ac:	e0bffb17 	ldw	r2,-20(fp)
 10001b0:	103fdb1e 	bne	r2,zero,1000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001b4:	0001883a 	nop
}
 10001b8:	0001883a 	nop
 10001bc:	e037883a 	mov	sp,fp
 10001c0:	dfc00117 	ldw	ra,4(sp)
 10001c4:	df000017 	ldw	fp,0(sp)
 10001c8:	dec00204 	addi	sp,sp,8
 10001cc:	f800283a 	ret

010001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10001d0:	defffb04 	addi	sp,sp,-20
 10001d4:	dfc00415 	stw	ra,16(sp)
 10001d8:	df000315 	stw	fp,12(sp)
 10001dc:	df000304 	addi	fp,sp,12
 10001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10001e4:	000531fa 	rdctl	r2,exception
 10001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10001ec:	e0bffd17 	ldw	r2,-12(fp)
 10001f0:	10801f0c 	andi	r2,r2,124
 10001f4:	1004d0ba 	srli	r2,r2,2
 10001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 10001fc:	0005333a 	rdctl	r2,badaddr
 1000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1000204:	d0a6d917 	ldw	r2,-25756(gp)
 1000208:	10000726 	beq	r2,zero,1000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 100020c:	d0a6d917 	ldw	r2,-25756(gp)
 1000210:	e0fffd17 	ldw	r3,-12(fp)
 1000214:	e1bffe17 	ldw	r6,-8(fp)
 1000218:	e17fff17 	ldw	r5,-4(fp)
 100021c:	1809883a 	mov	r4,r3
 1000220:	103ee83a 	callr	r2
 1000224:	00000206 	br	1000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 100022c:	0005883a 	mov	r2,zero
}
 1000230:	e037883a 	mov	sp,fp
 1000234:	dfc00117 	ldw	ra,4(sp)
 1000238:	df000017 	ldw	fp,0(sp)
 100023c:	dec00204 	addi	sp,sp,8
 1000240:	f800283a 	ret

Disassembly of section .text:

01000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 100024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1000250:	00bffd16 	blt	zero,r2,1000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000254:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 1000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 100025c:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 1000260:	d6a6bd14 	ori	gp,gp,39668
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000264:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 1000268:	108d8814 	ori	r2,r2,13856

    movhi r3, %hi(__bss_end)
 100026c:	00c04234 	movhi	r3,264
    ori r3, r3, %lo(__bss_end)
 1000270:	18cfe114 	ori	r3,r3,16260

    beq r2, r3, 1f
 1000274:	10c00326 	beq	r2,r3,1000284 <_start+0x40>

0:
    stw zero, (r2)
 1000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 100027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1000280:	10fffd36 	bltu	r2,r3,1000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000284:	100d9d00 	call	100d9d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000288:	100db640 	call	100db64 <alt_main>

0100028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 100028c:	003fff06 	br	100028c <alt_after_alt_main>

01000290 <LCD_Write_Command>:

uint16_t redPicture[240*320];
uint16_t greenPicture[240*320];
uint16_t bluePicture[240*320];

void LCD_Write_Command(int command) {
 1000290:	defffe04 	addi	sp,sp,-8
 1000294:	df000115 	stw	fp,4(sp)
 1000298:	df000104 	addi	fp,sp,4
 100029c:	e13fff15 	stw	r4,-4(fp)
    IOWR_16DIRECT(DMA_LCD_0_BASE,0b000*4,command); // Adapt this line
 10002a0:	00808034 	movhi	r2,512
 10002a4:	10840004 	addi	r2,r2,4096
 10002a8:	e0ffff0b 	ldhu	r3,-4(fp)
 10002ac:	10c0002d 	sthio	r3,0(r2)
}
 10002b0:	0001883a 	nop
 10002b4:	e037883a 	mov	sp,fp
 10002b8:	df000017 	ldw	fp,0(sp)
 10002bc:	dec00104 	addi	sp,sp,4
 10002c0:	f800283a 	ret

010002c4 <LCD_Write_Data>:

void LCD_Write_Data(int data) {
 10002c4:	defffe04 	addi	sp,sp,-8
 10002c8:	df000115 	stw	fp,4(sp)
 10002cc:	df000104 	addi	fp,sp,4
 10002d0:	e13fff15 	stw	r4,-4(fp)
    IOWR_16DIRECT(DMA_LCD_0_BASE,0b001*4,data); // Adapt this line
 10002d4:	00808034 	movhi	r2,512
 10002d8:	10840104 	addi	r2,r2,4100
 10002dc:	e0ffff0b 	ldhu	r3,-4(fp)
 10002e0:	10c0002d 	sthio	r3,0(r2)
}
 10002e4:	0001883a 	nop
 10002e8:	e037883a 	mov	sp,fp
 10002ec:	df000017 	ldw	fp,0(sp)
 10002f0:	dec00104 	addi	sp,sp,4
 10002f4:	f800283a 	ret

010002f8 <init_LCD>:

void init_LCD() {
 10002f8:	defffe04 	addi	sp,sp,-8
 10002fc:	dfc00115 	stw	ra,4(sp)
 1000300:	df000015 	stw	fp,0(sp)
 1000304:	d839883a 	mov	fp,sp

  IOWR_8DIRECT(DMA_LCD_0_BASE,0b111*4,0b000); // set reset on and 16 bits mode
 1000308:	0007883a 	mov	r3,zero
 100030c:	00808034 	movhi	r2,512
 1000310:	10840704 	addi	r2,r2,4124
 1000314:	10c00025 	stbio	r3,0(r2)
  while (counter<100){}   // include delay of at least 120 ms use your timer or a loop
 1000318:	0001883a 	nop
 100031c:	d0a6cb17 	ldw	r2,-25812(gp)
 1000320:	10801910 	cmplti	r2,r2,100
 1000324:	103ffd1e 	bne	r2,zero,100031c <init_LCD+0x24>
  IOWR_8DIRECT(DMA_LCD_0_BASE,0b111*4,0b100); // set reset off and 16 bits mode and enable LED_CS
 1000328:	00c00104 	movi	r3,4
 100032c:	00808034 	movhi	r2,512
 1000330:	10840704 	addi	r2,r2,4124
 1000334:	10c00025 	stbio	r3,0(r2)
  while (counter<200){}   // include delay of at least 120 ms use your timer or a loop
 1000338:	0001883a 	nop
 100033c:	d0a6cb17 	ldw	r2,-25812(gp)
 1000340:	10803210 	cmplti	r2,r2,200
 1000344:	103ffd1e 	bne	r2,zero,100033c <init_LCD+0x44>

  LCD_Write_Command(0x0028);     //display OFF
 1000348:	01000a04 	movi	r4,40
 100034c:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Command(0x0011);     //exit SLEEP mode
 1000350:	01000444 	movi	r4,17
 1000354:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0000);
 1000358:	0009883a 	mov	r4,zero
 100035c:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00CB);     //Power Control A
 1000360:	010032c4 	movi	r4,203
 1000364:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0039);     //always 0x39
 1000368:	01000e44 	movi	r4,57
 100036c:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x002C);     //always 0x2C
 1000370:	01000b04 	movi	r4,44
 1000374:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0000);     //always 0x00
 1000378:	0009883a 	mov	r4,zero
 100037c:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0034);     //Vcore = 1.6V
 1000380:	01000d04 	movi	r4,52
 1000384:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0002);     //DDVDH = 5.6V
 1000388:	01000084 	movi	r4,2
 100038c:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00CF);     //Power Control B
 1000390:	010033c4 	movi	r4,207
 1000394:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0000);     //always 0x00
 1000398:	0009883a 	mov	r4,zero
 100039c:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0081);     //PCEQ off
 10003a0:	01002044 	movi	r4,129
 10003a4:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0030);     //ESD protection
 10003a8:	01000c04 	movi	r4,48
 10003ac:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00E8);     //Driver timing control A
 10003b0:	01003a04 	movi	r4,232
 10003b4:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0085);     //non - overlap
 10003b8:	01002144 	movi	r4,133
 10003bc:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0001);     //EQ timing
 10003c0:	01000044 	movi	r4,1
 10003c4:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0079);     //Pre-charge timing
 10003c8:	01001e44 	movi	r4,121
 10003cc:	10002c40 	call	10002c4 <LCD_Write_Data>


  LCD_Write_Command(0x00EA);     //Driver timing control B
 10003d0:	01003a84 	movi	r4,234
 10003d4:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0000);        //Gate driver timing
 10003d8:	0009883a 	mov	r4,zero
 10003dc:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0000);        //always 0x00
 10003e0:	0009883a 	mov	r4,zero
 10003e4:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00ED); //Power‐On sequence control
 10003e8:	01003b44 	movi	r4,237
 10003ec:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0064);        //soft start
 10003f0:	01001904 	movi	r4,100
 10003f4:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0003);        //power on sequence
 10003f8:	010000c4 	movi	r4,3
 10003fc:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0012);        //power on sequence
 1000400:	01000484 	movi	r4,18
 1000404:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0081);        //DDVDH enhance on
 1000408:	01002044 	movi	r4,129
 100040c:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00F7);     //Pump ratio control
 1000410:	01003dc4 	movi	r4,247
 1000414:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0020);     //DDVDH=2xVCI
 1000418:	01000804 	movi	r4,32
 100041c:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00C0);    //power control 1
 1000420:	01003004 	movi	r4,192
 1000424:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0026);
 1000428:	01000984 	movi	r4,38
 100042c:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0004);     //second parameter for ILI9340 (ignored by ILI9341)
 1000430:	01000104 	movi	r4,4
 1000434:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00C1);     //power control 2
 1000438:	01003044 	movi	r4,193
 100043c:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0011);
 1000440:	01000444 	movi	r4,17
 1000444:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00C5);     //VCOM control 1
 1000448:	01003144 	movi	r4,197
 100044c:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0035);
 1000450:	01000d44 	movi	r4,53
 1000454:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x003E);
 1000458:	01000f84 	movi	r4,62
 100045c:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00C7);     //VCOM control 2
 1000460:	010031c4 	movi	r4,199
 1000464:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x00BE);
 1000468:	01002f84 	movi	r4,190
 100046c:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00B1);     //frame rate control
 1000470:	01002c44 	movi	r4,177
 1000474:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0000);
 1000478:	0009883a 	mov	r4,zero
 100047c:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0010);
 1000480:	01000404 	movi	r4,16
 1000484:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x003A);    //pixel format = 16 bit per pixel
 1000488:	01000e84 	movi	r4,58
 100048c:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0055);
 1000490:	01001544 	movi	r4,85
 1000494:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00B6);     //display function control
 1000498:	01002d84 	movi	r4,182
 100049c:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x000A);
 10004a0:	01000284 	movi	r4,10
 10004a4:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x00A2);
 10004a8:	01002884 	movi	r4,162
 10004ac:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x00F2);     //3G Gamma control
 10004b0:	01003c84 	movi	r4,242
 10004b4:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0002);         //off
 10004b8:	01000084 	movi	r4,2
 10004bc:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x0026);     //Gamma curve 3
 10004c0:	01000984 	movi	r4,38
 10004c4:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0001);
 10004c8:	01000044 	movi	r4,1
 10004cc:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x0036);     //memory access control = BGR
 10004d0:	01000d84 	movi	r4,54
 10004d4:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0000);
 10004d8:	0009883a 	mov	r4,zero
 10004dc:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x002A);     //column address set
 10004e0:	01000a84 	movi	r4,42
 10004e4:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0000);
 10004e8:	0009883a 	mov	r4,zero
 10004ec:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0000);        //start 0x0000
 10004f0:	0009883a 	mov	r4,zero
 10004f4:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0000);
 10004f8:	0009883a 	mov	r4,zero
 10004fc:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x00EF);        //end 0x00EF
 1000500:	01003bc4 	movi	r4,239
 1000504:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x002B);    //page address set
 1000508:	01000ac4 	movi	r4,43
 100050c:	10002900 	call	1000290 <LCD_Write_Command>
  LCD_Write_Data(0x0000);
 1000510:	0009883a 	mov	r4,zero
 1000514:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0000);        //start 0x0000
 1000518:	0009883a 	mov	r4,zero
 100051c:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x0001);
 1000520:	01000044 	movi	r4,1
 1000524:	10002c40 	call	10002c4 <LCD_Write_Data>
  LCD_Write_Data(0x003F);        //end 0x013F
 1000528:	01000fc4 	movi	r4,63
 100052c:	10002c40 	call	10002c4 <LCD_Write_Data>

  LCD_Write_Command(0x0029);
 1000530:	01000a44 	movi	r4,41
 1000534:	10002900 	call	1000290 <LCD_Write_Command>

}
 1000538:	0001883a 	nop
 100053c:	e037883a 	mov	sp,fp
 1000540:	dfc00117 	ldw	ra,4(sp)
 1000544:	df000017 	ldw	fp,0(sp)
 1000548:	dec00204 	addi	sp,sp,8
 100054c:	f800283a 	ret

01000550 <sendPixel>:

void sendPixel(uint16_t red, uint16_t green, uint16_t blue) {
 1000550:	defffb04 	addi	sp,sp,-20
 1000554:	dfc00415 	stw	ra,16(sp)
 1000558:	df000315 	stw	fp,12(sp)
 100055c:	df000304 	addi	fp,sp,12
 1000560:	2807883a 	mov	r3,r5
 1000564:	3005883a 	mov	r2,r6
 1000568:	e13ffd0d 	sth	r4,-12(fp)
 100056c:	e0fffe0d 	sth	r3,-8(fp)
 1000570:	e0bfff0d 	sth	r2,-4(fp)
	LCD_Write_Data(((blue >> 3)<<11) + ((green >> 2)<<5) + (red >> 3));
 1000574:	e0bfff0b 	ldhu	r2,-4(fp)
 1000578:	1004d0fa 	srli	r2,r2,3
 100057c:	10bfffcc 	andi	r2,r2,65535
 1000580:	100692fa 	slli	r3,r2,11
 1000584:	e0bffe0b 	ldhu	r2,-8(fp)
 1000588:	1004d0ba 	srli	r2,r2,2
 100058c:	10bfffcc 	andi	r2,r2,65535
 1000590:	1004917a 	slli	r2,r2,5
 1000594:	1887883a 	add	r3,r3,r2
 1000598:	e0bffd0b 	ldhu	r2,-12(fp)
 100059c:	1004d0fa 	srli	r2,r2,3
 10005a0:	10bfffcc 	andi	r2,r2,65535
 10005a4:	1885883a 	add	r2,r3,r2
 10005a8:	1009883a 	mov	r4,r2
 10005ac:	10002c40 	call	10002c4 <LCD_Write_Data>
}
 10005b0:	0001883a 	nop
 10005b4:	e037883a 	mov	sp,fp
 10005b8:	dfc00117 	ldw	ra,4(sp)
 10005bc:	df000017 	ldw	fp,0(sp)
 10005c0:	dec00204 	addi	sp,sp,8
 10005c4:	f800283a 	ret

010005c8 <sendPicture>:
void sendPicture(uint16_t red, uint16_t green, uint16_t blue){
 10005c8:	defffa04 	addi	sp,sp,-24
 10005cc:	dfc00515 	stw	ra,20(sp)
 10005d0:	df000415 	stw	fp,16(sp)
 10005d4:	df000404 	addi	fp,sp,16
 10005d8:	2807883a 	mov	r3,r5
 10005dc:	3005883a 	mov	r2,r6
 10005e0:	e13ffd0d 	sth	r4,-12(fp)
 10005e4:	e0fffe0d 	sth	r3,-8(fp)
 10005e8:	e0bfff0d 	sth	r2,-4(fp)
	counter = 0;
 10005ec:	d026cb15 	stw	zero,-25812(gp)
	for (int i = 0; i < (320*240); i++){
 10005f0:	e03ffc15 	stw	zero,-16(fp)
 10005f4:	00000a06 	br	1000620 <sendPicture+0x58>
		sendPixel(red, green, blue);
 10005f8:	e0bffd0b 	ldhu	r2,-12(fp)
 10005fc:	e0fffe0b 	ldhu	r3,-8(fp)
 1000600:	e13fff0b 	ldhu	r4,-4(fp)
 1000604:	200d883a 	mov	r6,r4
 1000608:	180b883a 	mov	r5,r3
 100060c:	1009883a 	mov	r4,r2
 1000610:	10005500 	call	1000550 <sendPixel>
void sendPixel(uint16_t red, uint16_t green, uint16_t blue) {
	LCD_Write_Data(((blue >> 3)<<11) + ((green >> 2)<<5) + (red >> 3));
}
void sendPicture(uint16_t red, uint16_t green, uint16_t blue){
	counter = 0;
	for (int i = 0; i < (320*240); i++){
 1000614:	e0bffc17 	ldw	r2,-16(fp)
 1000618:	10800044 	addi	r2,r2,1
 100061c:	e0bffc15 	stw	r2,-16(fp)
 1000620:	e0fffc17 	ldw	r3,-16(fp)
 1000624:	00800074 	movhi	r2,1
 1000628:	108affc4 	addi	r2,r2,11263
 100062c:	10fff20e 	bge	r2,r3,10005f8 <sendPicture+0x30>
		sendPixel(red, green, blue);
	}
	printf("Refresh time is %d ms\n", counter*10);
 1000630:	d0a6cb17 	ldw	r2,-25812(gp)
 1000634:	108002a4 	muli	r2,r2,10
 1000638:	100b883a 	mov	r5,r2
 100063c:	01004074 	movhi	r4,257
 1000640:	213f4204 	addi	r4,r4,-760
 1000644:	1000bf40 	call	1000bf4 <printf>
}
 1000648:	0001883a 	nop
 100064c:	e037883a 	mov	sp,fp
 1000650:	dfc00117 	ldw	ra,4(sp)
 1000654:	df000017 	ldw	fp,0(sp)
 1000658:	dec00204 	addi	sp,sp,8
 100065c:	f800283a 	ret

01000660 <timer_interrupt>:
void timer_interrupt(void *context, alt_u32 id){
 1000660:	defffd04 	addi	sp,sp,-12
 1000664:	df000215 	stw	fp,8(sp)
 1000668:	df000204 	addi	fp,sp,8
 100066c:	e13ffe15 	stw	r4,-8(fp)
 1000670:	e17fff15 	stw	r5,-4(fp)

	counter++; // increase the counter;
 1000674:	d0a6cb17 	ldw	r2,-25812(gp)
 1000678:	10800044 	addi	r2,r2,1
 100067c:	d0a6cb15 	stw	r2,-25812(gp)
	// acknowledge IRQ on the timer;
	IOWR_16DIRECT(TIMER_0_BASE,0,0); //Reset the flag interrupt
 1000680:	0007883a 	mov	r3,zero
 1000684:	00808034 	movhi	r2,512
 1000688:	10840804 	addi	r2,r2,4128
 100068c:	10c0002d 	sthio	r3,0(r2)
}
 1000690:	0001883a 	nop
 1000694:	e037883a 	mov	sp,fp
 1000698:	df000017 	ldw	fp,0(sp)
 100069c:	dec00104 	addi	sp,sp,4
 10006a0:	f800283a 	ret

010006a4 <RGBtoBGR>:
int RGBtoBGR (uint16_t red, uint16_t green, uint16_t blue){
 10006a4:	defffc04 	addi	sp,sp,-16
 10006a8:	df000315 	stw	fp,12(sp)
 10006ac:	df000304 	addi	fp,sp,12
 10006b0:	2807883a 	mov	r3,r5
 10006b4:	3005883a 	mov	r2,r6
 10006b8:	e13ffd0d 	sth	r4,-12(fp)
 10006bc:	e0fffe0d 	sth	r3,-8(fp)
 10006c0:	e0bfff0d 	sth	r2,-4(fp)
	return (((blue >> 3)<<11) + ((green >> 2)<<5) + (red >> 3));
 10006c4:	e0bfff0b 	ldhu	r2,-4(fp)
 10006c8:	1004d0fa 	srli	r2,r2,3
 10006cc:	10bfffcc 	andi	r2,r2,65535
 10006d0:	100692fa 	slli	r3,r2,11
 10006d4:	e0bffe0b 	ldhu	r2,-8(fp)
 10006d8:	1004d0ba 	srli	r2,r2,2
 10006dc:	10bfffcc 	andi	r2,r2,65535
 10006e0:	1004917a 	slli	r2,r2,5
 10006e4:	1887883a 	add	r3,r3,r2
 10006e8:	e0bffd0b 	ldhu	r2,-12(fp)
 10006ec:	1004d0fa 	srli	r2,r2,3
 10006f0:	10bfffcc 	andi	r2,r2,65535
 10006f4:	1885883a 	add	r2,r3,r2
}
 10006f8:	e037883a 	mov	sp,fp
 10006fc:	df000017 	ldw	fp,0(sp)
 1000700:	dec00104 	addi	sp,sp,4
 1000704:	f800283a 	ret

01000708 <initPictures>:
void initPictures(){
 1000708:	defffb04 	addi	sp,sp,-20
 100070c:	dfc00415 	stw	ra,16(sp)
 1000710:	df000315 	stw	fp,12(sp)
 1000714:	dc000215 	stw	r16,8(sp)
 1000718:	df000304 	addi	fp,sp,12
	for (int j = 0; j < (240); j++){
 100071c:	e03ffd15 	stw	zero,-12(fp)
 1000720:	0000bf06 	br	1000a20 <initPictures+0x318>
		for (int i = 0; i < 320; i++){
 1000724:	e03ffe15 	stw	zero,-8(fp)
 1000728:	0000b706 	br	1000a08 <initPictures+0x300>
			if (i > 120){
 100072c:	e0bffe17 	ldw	r2,-8(fp)
 1000730:	10801e50 	cmplti	r2,r2,121
 1000734:	1000591e 	bne	r2,zero,100089c <initPictures+0x194>
				if (j > 160){
 1000738:	e0bffd17 	ldw	r2,-12(fp)
 100073c:	10802850 	cmplti	r2,r2,161
 1000740:	10002b1e 	bne	r2,zero,10007f0 <initPictures+0xe8>
					IOWR_16DIRECT(redPicture,(i*240+j)*2,RGBtoBGR(255,0,0)); // Adapt this line
 1000744:	e0bffe17 	ldw	r2,-8(fp)
 1000748:	10c03c24 	muli	r3,r2,240
 100074c:	e0bffd17 	ldw	r2,-12(fp)
 1000750:	1885883a 	add	r2,r3,r2
 1000754:	1085883a 	add	r2,r2,r2
 1000758:	1007883a 	mov	r3,r2
 100075c:	00804074 	movhi	r2,257
 1000760:	108da104 	addi	r2,r2,13956
 1000764:	18a1883a 	add	r16,r3,r2
 1000768:	000d883a 	mov	r6,zero
 100076c:	000b883a 	mov	r5,zero
 1000770:	01003fc4 	movi	r4,255
 1000774:	10006a40 	call	10006a4 <RGBtoBGR>
 1000778:	8080002d 	sthio	r2,0(r16)
					IOWR_16DIRECT(greenPicture,(i*240+j)*2,RGBtoBGR(0,255,0)); // Adapt this line
 100077c:	e0bffe17 	ldw	r2,-8(fp)
 1000780:	10c03c24 	muli	r3,r2,240
 1000784:	e0bffd17 	ldw	r2,-12(fp)
 1000788:	1885883a 	add	r2,r3,r2
 100078c:	1085883a 	add	r2,r2,r2
 1000790:	1007883a 	mov	r3,r2
 1000794:	008041b4 	movhi	r2,262
 1000798:	10b9a104 	addi	r2,r2,-6524
 100079c:	18a1883a 	add	r16,r3,r2
 10007a0:	000d883a 	mov	r6,zero
 10007a4:	01403fc4 	movi	r5,255
 10007a8:	0009883a 	mov	r4,zero
 10007ac:	10006a40 	call	10006a4 <RGBtoBGR>
 10007b0:	8080002d 	sthio	r2,0(r16)
					IOWR_16DIRECT(bluePicture,(i*240+j)*2,RGBtoBGR(0,0,255)); // Adapt this line
 10007b4:	e0bffe17 	ldw	r2,-8(fp)
 10007b8:	10c03c24 	muli	r3,r2,240
 10007bc:	e0bffd17 	ldw	r2,-12(fp)
 10007c0:	1885883a 	add	r2,r3,r2
 10007c4:	1085883a 	add	r2,r2,r2
 10007c8:	1007883a 	mov	r3,r2
 10007cc:	00804134 	movhi	r2,260
 10007d0:	10a3a104 	addi	r2,r2,-29052
 10007d4:	18a1883a 	add	r16,r3,r2
 10007d8:	01803fc4 	movi	r6,255
 10007dc:	000b883a 	mov	r5,zero
 10007e0:	0009883a 	mov	r4,zero
 10007e4:	10006a40 	call	10006a4 <RGBtoBGR>
 10007e8:	8080002d 	sthio	r2,0(r16)
 10007ec:	00008306 	br	10009fc <initPictures+0x2f4>
				}
				else{
					IOWR_16DIRECT(redPicture,(i*240+j)*2,RGBtoBGR(255,255,0)); // Adapt this line
 10007f0:	e0bffe17 	ldw	r2,-8(fp)
 10007f4:	10c03c24 	muli	r3,r2,240
 10007f8:	e0bffd17 	ldw	r2,-12(fp)
 10007fc:	1885883a 	add	r2,r3,r2
 1000800:	1085883a 	add	r2,r2,r2
 1000804:	1007883a 	mov	r3,r2
 1000808:	00804074 	movhi	r2,257
 100080c:	108da104 	addi	r2,r2,13956
 1000810:	18a1883a 	add	r16,r3,r2
 1000814:	000d883a 	mov	r6,zero
 1000818:	01403fc4 	movi	r5,255
 100081c:	01003fc4 	movi	r4,255
 1000820:	10006a40 	call	10006a4 <RGBtoBGR>
 1000824:	8080002d 	sthio	r2,0(r16)
					IOWR_16DIRECT(greenPicture,(i*240+j)*2,RGBtoBGR(0,255,255)); // Adapt this line
 1000828:	e0bffe17 	ldw	r2,-8(fp)
 100082c:	10c03c24 	muli	r3,r2,240
 1000830:	e0bffd17 	ldw	r2,-12(fp)
 1000834:	1885883a 	add	r2,r3,r2
 1000838:	1085883a 	add	r2,r2,r2
 100083c:	1007883a 	mov	r3,r2
 1000840:	008041b4 	movhi	r2,262
 1000844:	10b9a104 	addi	r2,r2,-6524
 1000848:	18a1883a 	add	r16,r3,r2
 100084c:	01803fc4 	movi	r6,255
 1000850:	01403fc4 	movi	r5,255
 1000854:	0009883a 	mov	r4,zero
 1000858:	10006a40 	call	10006a4 <RGBtoBGR>
 100085c:	8080002d 	sthio	r2,0(r16)
					IOWR_16DIRECT(bluePicture,(i*240+j)*2,RGBtoBGR(255,0,255)); // Adapt this line
 1000860:	e0bffe17 	ldw	r2,-8(fp)
 1000864:	10c03c24 	muli	r3,r2,240
 1000868:	e0bffd17 	ldw	r2,-12(fp)
 100086c:	1885883a 	add	r2,r3,r2
 1000870:	1085883a 	add	r2,r2,r2
 1000874:	1007883a 	mov	r3,r2
 1000878:	00804134 	movhi	r2,260
 100087c:	10a3a104 	addi	r2,r2,-29052
 1000880:	18a1883a 	add	r16,r3,r2
 1000884:	01803fc4 	movi	r6,255
 1000888:	000b883a 	mov	r5,zero
 100088c:	01003fc4 	movi	r4,255
 1000890:	10006a40 	call	10006a4 <RGBtoBGR>
 1000894:	8080002d 	sthio	r2,0(r16)
 1000898:	00005806 	br	10009fc <initPictures+0x2f4>
				}
			}else{
				if (j > 160){
 100089c:	e0bffd17 	ldw	r2,-12(fp)
 10008a0:	10802850 	cmplti	r2,r2,161
 10008a4:	10002b1e 	bne	r2,zero,1000954 <initPictures+0x24c>
					IOWR_16DIRECT(redPicture,(i*240+j)*2,RGBtoBGR(255,128,0)); // Adapt this line
 10008a8:	e0bffe17 	ldw	r2,-8(fp)
 10008ac:	10c03c24 	muli	r3,r2,240
 10008b0:	e0bffd17 	ldw	r2,-12(fp)
 10008b4:	1885883a 	add	r2,r3,r2
 10008b8:	1085883a 	add	r2,r2,r2
 10008bc:	1007883a 	mov	r3,r2
 10008c0:	00804074 	movhi	r2,257
 10008c4:	108da104 	addi	r2,r2,13956
 10008c8:	18a1883a 	add	r16,r3,r2
 10008cc:	000d883a 	mov	r6,zero
 10008d0:	01402004 	movi	r5,128
 10008d4:	01003fc4 	movi	r4,255
 10008d8:	10006a40 	call	10006a4 <RGBtoBGR>
 10008dc:	8080002d 	sthio	r2,0(r16)
					IOWR_16DIRECT(greenPicture,(i*240+j)*2,RGBtoBGR(128,255,0)); // Adapt this line
 10008e0:	e0bffe17 	ldw	r2,-8(fp)
 10008e4:	10c03c24 	muli	r3,r2,240
 10008e8:	e0bffd17 	ldw	r2,-12(fp)
 10008ec:	1885883a 	add	r2,r3,r2
 10008f0:	1085883a 	add	r2,r2,r2
 10008f4:	1007883a 	mov	r3,r2
 10008f8:	008041b4 	movhi	r2,262
 10008fc:	10b9a104 	addi	r2,r2,-6524
 1000900:	18a1883a 	add	r16,r3,r2
 1000904:	000d883a 	mov	r6,zero
 1000908:	01403fc4 	movi	r5,255
 100090c:	01002004 	movi	r4,128
 1000910:	10006a40 	call	10006a4 <RGBtoBGR>
 1000914:	8080002d 	sthio	r2,0(r16)
					IOWR_16DIRECT(bluePicture,(i*240+j)*2,RGBtoBGR(128,0,255)); // Adapt this line
 1000918:	e0bffe17 	ldw	r2,-8(fp)
 100091c:	10c03c24 	muli	r3,r2,240
 1000920:	e0bffd17 	ldw	r2,-12(fp)
 1000924:	1885883a 	add	r2,r3,r2
 1000928:	1085883a 	add	r2,r2,r2
 100092c:	1007883a 	mov	r3,r2
 1000930:	00804134 	movhi	r2,260
 1000934:	10a3a104 	addi	r2,r2,-29052
 1000938:	18a1883a 	add	r16,r3,r2
 100093c:	01803fc4 	movi	r6,255
 1000940:	000b883a 	mov	r5,zero
 1000944:	01002004 	movi	r4,128
 1000948:	10006a40 	call	10006a4 <RGBtoBGR>
 100094c:	8080002d 	sthio	r2,0(r16)
 1000950:	00002a06 	br	10009fc <initPictures+0x2f4>
				}
				else{
					IOWR_16DIRECT(redPicture,(i*240+j)*2,RGBtoBGR(255,255,128)); // Adapt this line
 1000954:	e0bffe17 	ldw	r2,-8(fp)
 1000958:	10c03c24 	muli	r3,r2,240
 100095c:	e0bffd17 	ldw	r2,-12(fp)
 1000960:	1885883a 	add	r2,r3,r2
 1000964:	1085883a 	add	r2,r2,r2
 1000968:	1007883a 	mov	r3,r2
 100096c:	00804074 	movhi	r2,257
 1000970:	108da104 	addi	r2,r2,13956
 1000974:	18a1883a 	add	r16,r3,r2
 1000978:	01802004 	movi	r6,128
 100097c:	01403fc4 	movi	r5,255
 1000980:	01003fc4 	movi	r4,255
 1000984:	10006a40 	call	10006a4 <RGBtoBGR>
 1000988:	8080002d 	sthio	r2,0(r16)
					IOWR_16DIRECT(greenPicture,(i*240+j)*2,RGBtoBGR(0,128,255)); // Adapt this line
 100098c:	e0bffe17 	ldw	r2,-8(fp)
 1000990:	10c03c24 	muli	r3,r2,240
 1000994:	e0bffd17 	ldw	r2,-12(fp)
 1000998:	1885883a 	add	r2,r3,r2
 100099c:	1085883a 	add	r2,r2,r2
 10009a0:	1007883a 	mov	r3,r2
 10009a4:	008041b4 	movhi	r2,262
 10009a8:	10b9a104 	addi	r2,r2,-6524
 10009ac:	18a1883a 	add	r16,r3,r2
 10009b0:	01803fc4 	movi	r6,255
 10009b4:	01402004 	movi	r5,128
 10009b8:	0009883a 	mov	r4,zero
 10009bc:	10006a40 	call	10006a4 <RGBtoBGR>
 10009c0:	8080002d 	sthio	r2,0(r16)
					IOWR_16DIRECT(bluePicture,(i*240+j)*2,RGBtoBGR(255,0,128)); // Adapt this line
 10009c4:	e0bffe17 	ldw	r2,-8(fp)
 10009c8:	10c03c24 	muli	r3,r2,240
 10009cc:	e0bffd17 	ldw	r2,-12(fp)
 10009d0:	1885883a 	add	r2,r3,r2
 10009d4:	1085883a 	add	r2,r2,r2
 10009d8:	1007883a 	mov	r3,r2
 10009dc:	00804134 	movhi	r2,260
 10009e0:	10a3a104 	addi	r2,r2,-29052
 10009e4:	18a1883a 	add	r16,r3,r2
 10009e8:	01802004 	movi	r6,128
 10009ec:	000b883a 	mov	r5,zero
 10009f0:	01003fc4 	movi	r4,255
 10009f4:	10006a40 	call	10006a4 <RGBtoBGR>
 10009f8:	8080002d 	sthio	r2,0(r16)
int RGBtoBGR (uint16_t red, uint16_t green, uint16_t blue){
	return (((blue >> 3)<<11) + ((green >> 2)<<5) + (red >> 3));
}
void initPictures(){
	for (int j = 0; j < (240); j++){
		for (int i = 0; i < 320; i++){
 10009fc:	e0bffe17 	ldw	r2,-8(fp)
 1000a00:	10800044 	addi	r2,r2,1
 1000a04:	e0bffe15 	stw	r2,-8(fp)
 1000a08:	e0bffe17 	ldw	r2,-8(fp)
 1000a0c:	10805010 	cmplti	r2,r2,320
 1000a10:	103f461e 	bne	r2,zero,100072c <initPictures+0x24>
}
int RGBtoBGR (uint16_t red, uint16_t green, uint16_t blue){
	return (((blue >> 3)<<11) + ((green >> 2)<<5) + (red >> 3));
}
void initPictures(){
	for (int j = 0; j < (240); j++){
 1000a14:	e0bffd17 	ldw	r2,-12(fp)
 1000a18:	10800044 	addi	r2,r2,1
 1000a1c:	e0bffd15 	stw	r2,-12(fp)
 1000a20:	e0bffd17 	ldw	r2,-12(fp)
 1000a24:	10803c10 	cmplti	r2,r2,240
 1000a28:	103f3e1e 	bne	r2,zero,1000724 <initPictures+0x1c>
		//On the cache
		//redPicture[i] = RGBtoBGR(255,0,0);
		//greenPicture[i] = RGBtoBGR(0,255,0);
		//bluePicture[i] = RGBtoBGR(0,0,255);
	}
}
 1000a2c:	0001883a 	nop
 1000a30:	e6ffff04 	addi	sp,fp,-4
 1000a34:	dfc00217 	ldw	ra,8(sp)
 1000a38:	df000117 	ldw	fp,4(sp)
 1000a3c:	dc000017 	ldw	r16,0(sp)
 1000a40:	dec00304 	addi	sp,sp,12
 1000a44:	f800283a 	ret

01000a48 <sendPictureTab>:
void sendPictureTab(uint16_t* tab){
 1000a48:	defffc04 	addi	sp,sp,-16
 1000a4c:	dfc00315 	stw	ra,12(sp)
 1000a50:	df000215 	stw	fp,8(sp)
 1000a54:	df000204 	addi	fp,sp,8
 1000a58:	e13fff15 	stw	r4,-4(fp)
	counter = 0;
 1000a5c:	d026cb15 	stw	zero,-25812(gp)
	for (int i = 0; i < (320*240); i++){
 1000a60:	e03ffe15 	stw	zero,-8(fp)
 1000a64:	00000c06 	br	1000a98 <sendPictureTab+0x50>
		LCD_Write_Data(tab[i]);
 1000a68:	e0bffe17 	ldw	r2,-8(fp)
 1000a6c:	1085883a 	add	r2,r2,r2
 1000a70:	1007883a 	mov	r3,r2
 1000a74:	e0bfff17 	ldw	r2,-4(fp)
 1000a78:	10c5883a 	add	r2,r2,r3
 1000a7c:	1080000b 	ldhu	r2,0(r2)
 1000a80:	10bfffcc 	andi	r2,r2,65535
 1000a84:	1009883a 	mov	r4,r2
 1000a88:	10002c40 	call	10002c4 <LCD_Write_Data>
		//bluePicture[i] = RGBtoBGR(0,0,255);
	}
}
void sendPictureTab(uint16_t* tab){
	counter = 0;
	for (int i = 0; i < (320*240); i++){
 1000a8c:	e0bffe17 	ldw	r2,-8(fp)
 1000a90:	10800044 	addi	r2,r2,1
 1000a94:	e0bffe15 	stw	r2,-8(fp)
 1000a98:	e0fffe17 	ldw	r3,-8(fp)
 1000a9c:	00800074 	movhi	r2,1
 1000aa0:	108affc4 	addi	r2,r2,11263
 1000aa4:	10fff00e 	bge	r2,r3,1000a68 <sendPictureTab+0x20>
		LCD_Write_Data(tab[i]);
	}
	printf("Refresh time is %d ms\n", counter*10);
 1000aa8:	d0a6cb17 	ldw	r2,-25812(gp)
 1000aac:	108002a4 	muli	r2,r2,10
 1000ab0:	100b883a 	mov	r5,r2
 1000ab4:	01004074 	movhi	r4,257
 1000ab8:	213f4204 	addi	r4,r4,-760
 1000abc:	1000bf40 	call	1000bf4 <printf>
}
 1000ac0:	0001883a 	nop
 1000ac4:	e037883a 	mov	sp,fp
 1000ac8:	dfc00117 	ldw	ra,4(sp)
 1000acc:	df000017 	ldw	fp,0(sp)
 1000ad0:	dec00204 	addi	sp,sp,8
 1000ad4:	f800283a 	ret

01000ad8 <main>:
int main(){
 1000ad8:	defffe04 	addi	sp,sp,-8
 1000adc:	dfc00115 	stw	ra,4(sp)
 1000ae0:	df000015 	stw	fp,0(sp)
 1000ae4:	d839883a 	mov	fp,sp

	printf("Lets start counting \n");
 1000ae8:	01004074 	movhi	r4,257
 1000aec:	213f4804 	addi	r4,r4,-736
 1000af0:	1000cf00 	call	1000cf0 <puts>
	// set all to output

	IOWR_32DIRECT(GPIO_PARALLEL_PORT_0_BASE, 0b000*4, 0xFFFFFFFF); //Set to outputs
 1000af4:	00ffffc4 	movi	r3,-1
 1000af8:	00808034 	movhi	r2,512
 1000afc:	10841004 	addi	r2,r2,4160
 1000b00:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(GPIO_PARALLEL_PORT_0_BASE, 0b010*4, 0xFFFFFFFF); //Set all to 1
 1000b04:	00ffffc4 	movi	r3,-1
 1000b08:	00808034 	movhi	r2,512
 1000b0c:	10841204 	addi	r2,r2,4168
 1000b10:	10c00035 	stwio	r3,0(r2)

	alt_irq_register(TIMER_0_IRQ,(void*)2,(alt_isr_func)timer_interrupt);
 1000b14:	01804034 	movhi	r6,256
 1000b18:	31819804 	addi	r6,r6,1632
 1000b1c:	01400084 	movi	r5,2
 1000b20:	01000044 	movi	r4,1
 1000b24:	100d7080 	call	100d708 <alt_irq_register>

	IOWR_16DIRECT(TIMER_0_BASE,4,0b111); // enbale timer 0
 1000b28:	00c001c4 	movi	r3,7
 1000b2c:	00808034 	movhi	r2,512
 1000b30:	10840904 	addi	r2,r2,4132
 1000b34:	10c0002d 	sthio	r3,0(r2)
	initPictures();
 1000b38:	10007080 	call	1000708 <initPictures>
	init_LCD();
 1000b3c:	10002f80 	call	10002f8 <init_LCD>


	LCD_Write_Command(0x002C);
 1000b40:	01000b04 	movi	r4,44
 1000b44:	10002900 	call	1000290 <LCD_Write_Command>

	printf("addr = %d \n", redPicture);
 1000b48:	01404074 	movhi	r5,257
 1000b4c:	294da104 	addi	r5,r5,13956
 1000b50:	01004074 	movhi	r4,257
 1000b54:	213f4e04 	addi	r4,r4,-712
 1000b58:	1000bf40 	call	1000bf4 <printf>
	printf("& = %d \n", &redPicture);
 1000b5c:	01404074 	movhi	r5,257
 1000b60:	294da104 	addi	r5,r5,13956
 1000b64:	01004074 	movhi	r4,257
 1000b68:	213f5104 	addi	r4,r4,-700
 1000b6c:	1000bf40 	call	1000bf4 <printf>

	LCD_Write_Data(0x0000);
 1000b70:	0009883a 	mov	r4,zero
 1000b74:	10002c40 	call	10002c4 <LCD_Write_Data>
	IOWR_32DIRECT(DMA_LCD_0_BASE,0b010*4,greenPicture); //Give the picture data pointer
 1000b78:	00c041b4 	movhi	r3,262
 1000b7c:	18f9a104 	addi	r3,r3,-6524
 1000b80:	00808034 	movhi	r2,512
 1000b84:	10840204 	addi	r2,r2,4104
 1000b88:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(DMA_LCD_0_BASE,0b011*4,320*240*2); //Give the size
 1000b8c:	00c000b4 	movhi	r3,2
 1000b90:	18d60004 	addi	r3,r3,22528
 1000b94:	00808034 	movhi	r2,512
 1000b98:	10840304 	addi	r2,r2,4108
 1000b9c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(DMA_LCD_0_BASE,0b100*4,0b001); //Start transfer
 1000ba0:	00c00044 	movi	r3,1
 1000ba4:	00808034 	movhi	r2,512
 1000ba8:	10840404 	addi	r2,r2,4112
 1000bac:	10c00035 	stwio	r3,0(r2)
	while(1){

		//sendPictureTab(redPicture);
		//sendPictureTab(bluePicture);

		IOWR_32DIRECT(GPIO_PARALLEL_PORT_0_BASE, 0b010*4, counter);// write counter value on the parallel port;
 1000bb0:	d0e6cb17 	ldw	r3,-25812(gp)
 1000bb4:	00808034 	movhi	r2,512
 1000bb8:	10841204 	addi	r2,r2,4168
 1000bbc:	10c00035 	stwio	r3,0(r2)
		//counter++;
		//printf("counter = %d \n", counter);
	}
 1000bc0:	003ffb06 	br	1000bb0 <main+0xd8>

01000bc4 <_printf_r>:
 1000bc4:	defffd04 	addi	sp,sp,-12
 1000bc8:	2805883a 	mov	r2,r5
 1000bcc:	dfc00015 	stw	ra,0(sp)
 1000bd0:	d9800115 	stw	r6,4(sp)
 1000bd4:	d9c00215 	stw	r7,8(sp)
 1000bd8:	21400217 	ldw	r5,8(r4)
 1000bdc:	d9c00104 	addi	r7,sp,4
 1000be0:	100d883a 	mov	r6,r2
 1000be4:	1000d9c0 	call	1000d9c <___vfprintf_internal_r>
 1000be8:	dfc00017 	ldw	ra,0(sp)
 1000bec:	dec00304 	addi	sp,sp,12
 1000bf0:	f800283a 	ret

01000bf4 <printf>:
 1000bf4:	defffc04 	addi	sp,sp,-16
 1000bf8:	dfc00015 	stw	ra,0(sp)
 1000bfc:	d9400115 	stw	r5,4(sp)
 1000c00:	d9800215 	stw	r6,8(sp)
 1000c04:	d9c00315 	stw	r7,12(sp)
 1000c08:	00804074 	movhi	r2,257
 1000c0c:	1086be04 	addi	r2,r2,6904
 1000c10:	10800017 	ldw	r2,0(r2)
 1000c14:	200b883a 	mov	r5,r4
 1000c18:	d9800104 	addi	r6,sp,4
 1000c1c:	11000217 	ldw	r4,8(r2)
 1000c20:	1002f940 	call	1002f94 <__vfprintf_internal>
 1000c24:	dfc00017 	ldw	ra,0(sp)
 1000c28:	dec00404 	addi	sp,sp,16
 1000c2c:	f800283a 	ret

01000c30 <_puts_r>:
 1000c30:	defff604 	addi	sp,sp,-40
 1000c34:	dc000715 	stw	r16,28(sp)
 1000c38:	2021883a 	mov	r16,r4
 1000c3c:	2809883a 	mov	r4,r5
 1000c40:	dc400815 	stw	r17,32(sp)
 1000c44:	dfc00915 	stw	ra,36(sp)
 1000c48:	2823883a 	mov	r17,r5
 1000c4c:	1000d040 	call	1000d04 <strlen>
 1000c50:	10c00044 	addi	r3,r2,1
 1000c54:	d8800115 	stw	r2,4(sp)
 1000c58:	00804074 	movhi	r2,257
 1000c5c:	10bf5404 	addi	r2,r2,-688
 1000c60:	d8800215 	stw	r2,8(sp)
 1000c64:	00800044 	movi	r2,1
 1000c68:	d8800315 	stw	r2,12(sp)
 1000c6c:	00800084 	movi	r2,2
 1000c70:	dc400015 	stw	r17,0(sp)
 1000c74:	d8c00615 	stw	r3,24(sp)
 1000c78:	dec00415 	stw	sp,16(sp)
 1000c7c:	d8800515 	stw	r2,20(sp)
 1000c80:	80000226 	beq	r16,zero,1000c8c <_puts_r+0x5c>
 1000c84:	80800e17 	ldw	r2,56(r16)
 1000c88:	10001426 	beq	r2,zero,1000cdc <_puts_r+0xac>
 1000c8c:	81400217 	ldw	r5,8(r16)
 1000c90:	2880030b 	ldhu	r2,12(r5)
 1000c94:	10c8000c 	andi	r3,r2,8192
 1000c98:	1800061e 	bne	r3,zero,1000cb4 <_puts_r+0x84>
 1000c9c:	29001917 	ldw	r4,100(r5)
 1000ca0:	00f7ffc4 	movi	r3,-8193
 1000ca4:	10880014 	ori	r2,r2,8192
 1000ca8:	20c6703a 	and	r3,r4,r3
 1000cac:	2880030d 	sth	r2,12(r5)
 1000cb0:	28c01915 	stw	r3,100(r5)
 1000cb4:	d9800404 	addi	r6,sp,16
 1000cb8:	8009883a 	mov	r4,r16
 1000cbc:	10054c40 	call	10054c4 <__sfvwrite_r>
 1000cc0:	1000091e 	bne	r2,zero,1000ce8 <_puts_r+0xb8>
 1000cc4:	00800284 	movi	r2,10
 1000cc8:	dfc00917 	ldw	ra,36(sp)
 1000ccc:	dc400817 	ldw	r17,32(sp)
 1000cd0:	dc000717 	ldw	r16,28(sp)
 1000cd4:	dec00a04 	addi	sp,sp,40
 1000cd8:	f800283a 	ret
 1000cdc:	8009883a 	mov	r4,r16
 1000ce0:	10050400 	call	1005040 <__sinit>
 1000ce4:	003fe906 	br	1000c8c <_puts_r+0x5c>
 1000ce8:	00bfffc4 	movi	r2,-1
 1000cec:	003ff606 	br	1000cc8 <_puts_r+0x98>

01000cf0 <puts>:
 1000cf0:	00804074 	movhi	r2,257
 1000cf4:	1086be04 	addi	r2,r2,6904
 1000cf8:	200b883a 	mov	r5,r4
 1000cfc:	11000017 	ldw	r4,0(r2)
 1000d00:	1000c301 	jmpi	1000c30 <_puts_r>

01000d04 <strlen>:
 1000d04:	208000cc 	andi	r2,r4,3
 1000d08:	10002026 	beq	r2,zero,1000d8c <strlen+0x88>
 1000d0c:	20800007 	ldb	r2,0(r4)
 1000d10:	10002026 	beq	r2,zero,1000d94 <strlen+0x90>
 1000d14:	2005883a 	mov	r2,r4
 1000d18:	00000206 	br	1000d24 <strlen+0x20>
 1000d1c:	10c00007 	ldb	r3,0(r2)
 1000d20:	18001826 	beq	r3,zero,1000d84 <strlen+0x80>
 1000d24:	10800044 	addi	r2,r2,1
 1000d28:	10c000cc 	andi	r3,r2,3
 1000d2c:	183ffb1e 	bne	r3,zero,1000d1c <strlen+0x18>
 1000d30:	10c00017 	ldw	r3,0(r2)
 1000d34:	01ffbff4 	movhi	r7,65279
 1000d38:	39ffbfc4 	addi	r7,r7,-257
 1000d3c:	00ca303a 	nor	r5,zero,r3
 1000d40:	01a02074 	movhi	r6,32897
 1000d44:	19c7883a 	add	r3,r3,r7
 1000d48:	31a02004 	addi	r6,r6,-32640
 1000d4c:	1946703a 	and	r3,r3,r5
 1000d50:	1986703a 	and	r3,r3,r6
 1000d54:	1800091e 	bne	r3,zero,1000d7c <strlen+0x78>
 1000d58:	10800104 	addi	r2,r2,4
 1000d5c:	10c00017 	ldw	r3,0(r2)
 1000d60:	19cb883a 	add	r5,r3,r7
 1000d64:	00c6303a 	nor	r3,zero,r3
 1000d68:	28c6703a 	and	r3,r5,r3
 1000d6c:	1986703a 	and	r3,r3,r6
 1000d70:	183ff926 	beq	r3,zero,1000d58 <strlen+0x54>
 1000d74:	00000106 	br	1000d7c <strlen+0x78>
 1000d78:	10800044 	addi	r2,r2,1
 1000d7c:	10c00007 	ldb	r3,0(r2)
 1000d80:	183ffd1e 	bne	r3,zero,1000d78 <strlen+0x74>
 1000d84:	1105c83a 	sub	r2,r2,r4
 1000d88:	f800283a 	ret
 1000d8c:	2005883a 	mov	r2,r4
 1000d90:	003fe706 	br	1000d30 <strlen+0x2c>
 1000d94:	0005883a 	mov	r2,zero
 1000d98:	f800283a 	ret

01000d9c <___vfprintf_internal_r>:
 1000d9c:	deffb804 	addi	sp,sp,-288
 1000da0:	dfc04715 	stw	ra,284(sp)
 1000da4:	ddc04515 	stw	r23,276(sp)
 1000da8:	dd404315 	stw	r21,268(sp)
 1000dac:	d9002c15 	stw	r4,176(sp)
 1000db0:	282f883a 	mov	r23,r5
 1000db4:	302b883a 	mov	r21,r6
 1000db8:	d9c02d15 	stw	r7,180(sp)
 1000dbc:	df004615 	stw	fp,280(sp)
 1000dc0:	dd804415 	stw	r22,272(sp)
 1000dc4:	dd004215 	stw	r20,264(sp)
 1000dc8:	dcc04115 	stw	r19,260(sp)
 1000dcc:	dc804015 	stw	r18,256(sp)
 1000dd0:	dc403f15 	stw	r17,252(sp)
 1000dd4:	dc003e15 	stw	r16,248(sp)
 1000dd8:	1005bb40 	call	1005bb4 <_localeconv_r>
 1000ddc:	10800017 	ldw	r2,0(r2)
 1000de0:	1009883a 	mov	r4,r2
 1000de4:	d8803415 	stw	r2,208(sp)
 1000de8:	1000d040 	call	1000d04 <strlen>
 1000dec:	d8803715 	stw	r2,220(sp)
 1000df0:	d8802c17 	ldw	r2,176(sp)
 1000df4:	10000226 	beq	r2,zero,1000e00 <___vfprintf_internal_r+0x64>
 1000df8:	10800e17 	ldw	r2,56(r2)
 1000dfc:	1000f926 	beq	r2,zero,10011e4 <___vfprintf_internal_r+0x448>
 1000e00:	b880030b 	ldhu	r2,12(r23)
 1000e04:	10c8000c 	andi	r3,r2,8192
 1000e08:	1800061e 	bne	r3,zero,1000e24 <___vfprintf_internal_r+0x88>
 1000e0c:	b9001917 	ldw	r4,100(r23)
 1000e10:	00f7ffc4 	movi	r3,-8193
 1000e14:	10880014 	ori	r2,r2,8192
 1000e18:	20c6703a 	and	r3,r4,r3
 1000e1c:	b880030d 	sth	r2,12(r23)
 1000e20:	b8c01915 	stw	r3,100(r23)
 1000e24:	10c0020c 	andi	r3,r2,8
 1000e28:	1800c126 	beq	r3,zero,1001130 <___vfprintf_internal_r+0x394>
 1000e2c:	b8c00417 	ldw	r3,16(r23)
 1000e30:	1800bf26 	beq	r3,zero,1001130 <___vfprintf_internal_r+0x394>
 1000e34:	1080068c 	andi	r2,r2,26
 1000e38:	00c00284 	movi	r3,10
 1000e3c:	10c0c426 	beq	r2,r3,1001150 <___vfprintf_internal_r+0x3b4>
 1000e40:	d8c00404 	addi	r3,sp,16
 1000e44:	05004074 	movhi	r20,257
 1000e48:	d9001e04 	addi	r4,sp,120
 1000e4c:	a53f6584 	addi	r20,r20,-618
 1000e50:	d8c01e15 	stw	r3,120(sp)
 1000e54:	d8002015 	stw	zero,128(sp)
 1000e58:	d8001f15 	stw	zero,124(sp)
 1000e5c:	d8003315 	stw	zero,204(sp)
 1000e60:	d8003615 	stw	zero,216(sp)
 1000e64:	d8003815 	stw	zero,224(sp)
 1000e68:	1811883a 	mov	r8,r3
 1000e6c:	d8003915 	stw	zero,228(sp)
 1000e70:	d8003a15 	stw	zero,232(sp)
 1000e74:	d8002f15 	stw	zero,188(sp)
 1000e78:	d9002815 	stw	r4,160(sp)
 1000e7c:	a8800007 	ldb	r2,0(r21)
 1000e80:	10027b26 	beq	r2,zero,1001870 <___vfprintf_internal_r+0xad4>
 1000e84:	00c00944 	movi	r3,37
 1000e88:	a821883a 	mov	r16,r21
 1000e8c:	10c0021e 	bne	r2,r3,1000e98 <___vfprintf_internal_r+0xfc>
 1000e90:	00001406 	br	1000ee4 <___vfprintf_internal_r+0x148>
 1000e94:	10c00326 	beq	r2,r3,1000ea4 <___vfprintf_internal_r+0x108>
 1000e98:	84000044 	addi	r16,r16,1
 1000e9c:	80800007 	ldb	r2,0(r16)
 1000ea0:	103ffc1e 	bne	r2,zero,1000e94 <___vfprintf_internal_r+0xf8>
 1000ea4:	8563c83a 	sub	r17,r16,r21
 1000ea8:	88000e26 	beq	r17,zero,1000ee4 <___vfprintf_internal_r+0x148>
 1000eac:	d8c02017 	ldw	r3,128(sp)
 1000eb0:	d8801f17 	ldw	r2,124(sp)
 1000eb4:	45400015 	stw	r21,0(r8)
 1000eb8:	1c47883a 	add	r3,r3,r17
 1000ebc:	10800044 	addi	r2,r2,1
 1000ec0:	d8c02015 	stw	r3,128(sp)
 1000ec4:	44400115 	stw	r17,4(r8)
 1000ec8:	d8801f15 	stw	r2,124(sp)
 1000ecc:	00c001c4 	movi	r3,7
 1000ed0:	1880a716 	blt	r3,r2,1001170 <___vfprintf_internal_r+0x3d4>
 1000ed4:	42000204 	addi	r8,r8,8
 1000ed8:	d9402f17 	ldw	r5,188(sp)
 1000edc:	2c4b883a 	add	r5,r5,r17
 1000ee0:	d9402f15 	stw	r5,188(sp)
 1000ee4:	80800007 	ldb	r2,0(r16)
 1000ee8:	1000a826 	beq	r2,zero,100118c <___vfprintf_internal_r+0x3f0>
 1000eec:	84400047 	ldb	r17,1(r16)
 1000ef0:	00bfffc4 	movi	r2,-1
 1000ef4:	85400044 	addi	r21,r16,1
 1000ef8:	d8002785 	stb	zero,158(sp)
 1000efc:	0007883a 	mov	r3,zero
 1000f00:	000f883a 	mov	r7,zero
 1000f04:	d8802915 	stw	r2,164(sp)
 1000f08:	d8003115 	stw	zero,196(sp)
 1000f0c:	0025883a 	mov	r18,zero
 1000f10:	01401604 	movi	r5,88
 1000f14:	01800244 	movi	r6,9
 1000f18:	02800a84 	movi	r10,42
 1000f1c:	02401b04 	movi	r9,108
 1000f20:	ad400044 	addi	r21,r21,1
 1000f24:	88bff804 	addi	r2,r17,-32
 1000f28:	28830436 	bltu	r5,r2,1001b3c <___vfprintf_internal_r+0xda0>
 1000f2c:	100490ba 	slli	r2,r2,2
 1000f30:	01004034 	movhi	r4,256
 1000f34:	2103d104 	addi	r4,r4,3908
 1000f38:	1105883a 	add	r2,r2,r4
 1000f3c:	10800017 	ldw	r2,0(r2)
 1000f40:	1000683a 	jmp	r2
 1000f44:	01001a5c 	xori	r4,zero,105
 1000f48:	01001b3c 	xorhi	r4,zero,108
 1000f4c:	01001b3c 	xorhi	r4,zero,108
 1000f50:	01001a7c 	xorhi	r4,zero,105
 1000f54:	01001b3c 	xorhi	r4,zero,108
 1000f58:	01001b3c 	xorhi	r4,zero,108
 1000f5c:	01001b3c 	xorhi	r4,zero,108
 1000f60:	01001b3c 	xorhi	r4,zero,108
 1000f64:	01001b3c 	xorhi	r4,zero,108
 1000f68:	01001b3c 	xorhi	r4,zero,108
 1000f6c:	010011f0 	cmpltui	r4,zero,71
 1000f70:	01001998 	cmpnei	r4,zero,102
 1000f74:	01001b3c 	xorhi	r4,zero,108
 1000f78:	010010b8 	rdprs	r4,zero,66
 1000f7c:	01001218 	cmpnei	r4,zero,72
 1000f80:	01001b3c 	xorhi	r4,zero,108
 1000f84:	01001258 	cmpnei	r4,zero,73
 1000f88:	01001264 	muli	r4,zero,73
 1000f8c:	01001264 	muli	r4,zero,73
 1000f90:	01001264 	muli	r4,zero,73
 1000f94:	01001264 	muli	r4,zero,73
 1000f98:	01001264 	muli	r4,zero,73
 1000f9c:	01001264 	muli	r4,zero,73
 1000fa0:	01001264 	muli	r4,zero,73
 1000fa4:	01001264 	muli	r4,zero,73
 1000fa8:	01001264 	muli	r4,zero,73
 1000fac:	01001b3c 	xorhi	r4,zero,108
 1000fb0:	01001b3c 	xorhi	r4,zero,108
 1000fb4:	01001b3c 	xorhi	r4,zero,108
 1000fb8:	01001b3c 	xorhi	r4,zero,108
 1000fbc:	01001b3c 	xorhi	r4,zero,108
 1000fc0:	01001b3c 	xorhi	r4,zero,108
 1000fc4:	01001b3c 	xorhi	r4,zero,108
 1000fc8:	01001b3c 	xorhi	r4,zero,108
 1000fcc:	01001b3c 	xorhi	r4,zero,108
 1000fd0:	01001b3c 	xorhi	r4,zero,108
 1000fd4:	01001298 	cmpnei	r4,zero,74
 1000fd8:	01001354 	movui	r4,77
 1000fdc:	01001b3c 	xorhi	r4,zero,108
 1000fe0:	01001354 	movui	r4,77
 1000fe4:	01001b3c 	xorhi	r4,zero,108
 1000fe8:	01001b3c 	xorhi	r4,zero,108
 1000fec:	01001b3c 	xorhi	r4,zero,108
 1000ff0:	01001b3c 	xorhi	r4,zero,108
 1000ff4:	010013f4 	movhi	r4,79
 1000ff8:	01001b3c 	xorhi	r4,zero,108
 1000ffc:	01001b3c 	xorhi	r4,zero,108
 1001000:	01001400 	call	100140 <__alt_mem_SDRAM_controller-0xeffec0>
 1001004:	01001b3c 	xorhi	r4,zero,108
 1001008:	01001b3c 	xorhi	r4,zero,108
 100100c:	01001b3c 	xorhi	r4,zero,108
 1001010:	01001b3c 	xorhi	r4,zero,108
 1001014:	01001b3c 	xorhi	r4,zero,108
 1001018:	01001878 	rdprs	r4,zero,97
 100101c:	01001b3c 	xorhi	r4,zero,108
 1001020:	01001b3c 	xorhi	r4,zero,108
 1001024:	010018d8 	cmpnei	r4,zero,99
 1001028:	01001b3c 	xorhi	r4,zero,108
 100102c:	01001b3c 	xorhi	r4,zero,108
 1001030:	01001b3c 	xorhi	r4,zero,108
 1001034:	01001b3c 	xorhi	r4,zero,108
 1001038:	01001b3c 	xorhi	r4,zero,108
 100103c:	01001b3c 	xorhi	r4,zero,108
 1001040:	01001b3c 	xorhi	r4,zero,108
 1001044:	01001b3c 	xorhi	r4,zero,108
 1001048:	01001b3c 	xorhi	r4,zero,108
 100104c:	01001b3c 	xorhi	r4,zero,108
 1001050:	01001ae8 	cmpgeui	r4,zero,107
 1001054:	01001a88 	cmpgei	r4,zero,106
 1001058:	01001354 	movui	r4,77
 100105c:	01001354 	movui	r4,77
 1001060:	01001354 	movui	r4,77
 1001064:	01001a98 	cmpnei	r4,zero,106
 1001068:	01001a88 	cmpgei	r4,zero,106
 100106c:	01001b3c 	xorhi	r4,zero,108
 1001070:	01001b3c 	xorhi	r4,zero,108
 1001074:	01001aa4 	muli	r4,zero,106
 1001078:	01001b3c 	xorhi	r4,zero,108
 100107c:	01001ab4 	movhi	r4,106
 1001080:	01001988 	cmpgei	r4,zero,102
 1001084:	010010c4 	movi	r4,67
 1001088:	010019a8 	cmpgeui	r4,zero,102
 100108c:	01001b3c 	xorhi	r4,zero,108
 1001090:	010019b4 	movhi	r4,102
 1001094:	01001b3c 	xorhi	r4,zero,108
 1001098:	01001a10 	cmplti	r4,zero,104
 100109c:	01001b3c 	xorhi	r4,zero,108
 10010a0:	01001b3c 	xorhi	r4,zero,108
 10010a4:	01001a20 	cmpeqi	r4,zero,104
 10010a8:	d9003117 	ldw	r4,196(sp)
 10010ac:	d8802d15 	stw	r2,180(sp)
 10010b0:	0109c83a 	sub	r4,zero,r4
 10010b4:	d9003115 	stw	r4,196(sp)
 10010b8:	94800114 	ori	r18,r18,4
 10010bc:	ac400007 	ldb	r17,0(r21)
 10010c0:	003f9706 	br	1000f20 <___vfprintf_internal_r+0x184>
 10010c4:	00800c04 	movi	r2,48
 10010c8:	d9002d17 	ldw	r4,180(sp)
 10010cc:	d9402917 	ldw	r5,164(sp)
 10010d0:	d8802705 	stb	r2,156(sp)
 10010d4:	00801e04 	movi	r2,120
 10010d8:	d8802745 	stb	r2,157(sp)
 10010dc:	d8002785 	stb	zero,158(sp)
 10010e0:	20c00104 	addi	r3,r4,4
 10010e4:	24c00017 	ldw	r19,0(r4)
 10010e8:	002d883a 	mov	r22,zero
 10010ec:	90800094 	ori	r2,r18,2
 10010f0:	28029a16 	blt	r5,zero,1001b5c <___vfprintf_internal_r+0xdc0>
 10010f4:	00bfdfc4 	movi	r2,-129
 10010f8:	90a4703a 	and	r18,r18,r2
 10010fc:	d8c02d15 	stw	r3,180(sp)
 1001100:	94800094 	ori	r18,r18,2
 1001104:	9802871e 	bne	r19,zero,1001b24 <___vfprintf_internal_r+0xd88>
 1001108:	00804074 	movhi	r2,257
 100110c:	10bf5e04 	addi	r2,r2,-648
 1001110:	d8803915 	stw	r2,228(sp)
 1001114:	04401e04 	movi	r17,120
 1001118:	d8802917 	ldw	r2,164(sp)
 100111c:	0039883a 	mov	fp,zero
 1001120:	1001e926 	beq	r2,zero,10018c8 <___vfprintf_internal_r+0xb2c>
 1001124:	0027883a 	mov	r19,zero
 1001128:	002d883a 	mov	r22,zero
 100112c:	00020506 	br	1001944 <___vfprintf_internal_r+0xba8>
 1001130:	d9002c17 	ldw	r4,176(sp)
 1001134:	b80b883a 	mov	r5,r23
 1001138:	100306c0 	call	100306c <__swsetup_r>
 100113c:	1005ac1e 	bne	r2,zero,10027f0 <___vfprintf_internal_r+0x1a54>
 1001140:	b880030b 	ldhu	r2,12(r23)
 1001144:	00c00284 	movi	r3,10
 1001148:	1080068c 	andi	r2,r2,26
 100114c:	10ff3c1e 	bne	r2,r3,1000e40 <___vfprintf_internal_r+0xa4>
 1001150:	b880038f 	ldh	r2,14(r23)
 1001154:	103f3a16 	blt	r2,zero,1000e40 <___vfprintf_internal_r+0xa4>
 1001158:	d9c02d17 	ldw	r7,180(sp)
 100115c:	d9002c17 	ldw	r4,176(sp)
 1001160:	a80d883a 	mov	r6,r21
 1001164:	b80b883a 	mov	r5,r23
 1001168:	1002fb00 	call	1002fb0 <__sbprintf>
 100116c:	00001106 	br	10011b4 <___vfprintf_internal_r+0x418>
 1001170:	d9002c17 	ldw	r4,176(sp)
 1001174:	d9801e04 	addi	r6,sp,120
 1001178:	b80b883a 	mov	r5,r23
 100117c:	10083980 	call	1008398 <__sprint_r>
 1001180:	1000081e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1001184:	da000404 	addi	r8,sp,16
 1001188:	003f5306 	br	1000ed8 <___vfprintf_internal_r+0x13c>
 100118c:	d8802017 	ldw	r2,128(sp)
 1001190:	10000426 	beq	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1001194:	d9002c17 	ldw	r4,176(sp)
 1001198:	d9801e04 	addi	r6,sp,120
 100119c:	b80b883a 	mov	r5,r23
 10011a0:	10083980 	call	1008398 <__sprint_r>
 10011a4:	b880030b 	ldhu	r2,12(r23)
 10011a8:	1080100c 	andi	r2,r2,64
 10011ac:	1005901e 	bne	r2,zero,10027f0 <___vfprintf_internal_r+0x1a54>
 10011b0:	d8802f17 	ldw	r2,188(sp)
 10011b4:	dfc04717 	ldw	ra,284(sp)
 10011b8:	df004617 	ldw	fp,280(sp)
 10011bc:	ddc04517 	ldw	r23,276(sp)
 10011c0:	dd804417 	ldw	r22,272(sp)
 10011c4:	dd404317 	ldw	r21,268(sp)
 10011c8:	dd004217 	ldw	r20,264(sp)
 10011cc:	dcc04117 	ldw	r19,260(sp)
 10011d0:	dc804017 	ldw	r18,256(sp)
 10011d4:	dc403f17 	ldw	r17,252(sp)
 10011d8:	dc003e17 	ldw	r16,248(sp)
 10011dc:	dec04804 	addi	sp,sp,288
 10011e0:	f800283a 	ret
 10011e4:	d9002c17 	ldw	r4,176(sp)
 10011e8:	10050400 	call	1005040 <__sinit>
 10011ec:	003f0406 	br	1000e00 <___vfprintf_internal_r+0x64>
 10011f0:	d8802d17 	ldw	r2,180(sp)
 10011f4:	d9002d17 	ldw	r4,180(sp)
 10011f8:	10800017 	ldw	r2,0(r2)
 10011fc:	d8803115 	stw	r2,196(sp)
 1001200:	20800104 	addi	r2,r4,4
 1001204:	d9003117 	ldw	r4,196(sp)
 1001208:	203fa716 	blt	r4,zero,10010a8 <___vfprintf_internal_r+0x30c>
 100120c:	d8802d15 	stw	r2,180(sp)
 1001210:	ac400007 	ldb	r17,0(r21)
 1001214:	003f4206 	br	1000f20 <___vfprintf_internal_r+0x184>
 1001218:	ac400007 	ldb	r17,0(r21)
 100121c:	aac00044 	addi	r11,r21,1
 1001220:	8a872826 	beq	r17,r10,1002ec4 <___vfprintf_internal_r+0x2128>
 1001224:	88bff404 	addi	r2,r17,-48
 1001228:	0009883a 	mov	r4,zero
 100122c:	30867d36 	bltu	r6,r2,1002c24 <___vfprintf_internal_r+0x1e88>
 1001230:	5c400007 	ldb	r17,0(r11)
 1001234:	210002a4 	muli	r4,r4,10
 1001238:	5d400044 	addi	r21,r11,1
 100123c:	a817883a 	mov	r11,r21
 1001240:	2089883a 	add	r4,r4,r2
 1001244:	88bff404 	addi	r2,r17,-48
 1001248:	30bff92e 	bgeu	r6,r2,1001230 <___vfprintf_internal_r+0x494>
 100124c:	2005c916 	blt	r4,zero,1002974 <___vfprintf_internal_r+0x1bd8>
 1001250:	d9002915 	stw	r4,164(sp)
 1001254:	003f3306 	br	1000f24 <___vfprintf_internal_r+0x188>
 1001258:	94802014 	ori	r18,r18,128
 100125c:	ac400007 	ldb	r17,0(r21)
 1001260:	003f2f06 	br	1000f20 <___vfprintf_internal_r+0x184>
 1001264:	a809883a 	mov	r4,r21
 1001268:	d8003115 	stw	zero,196(sp)
 100126c:	88bff404 	addi	r2,r17,-48
 1001270:	0017883a 	mov	r11,zero
 1001274:	24400007 	ldb	r17,0(r4)
 1001278:	5ac002a4 	muli	r11,r11,10
 100127c:	ad400044 	addi	r21,r21,1
 1001280:	a809883a 	mov	r4,r21
 1001284:	12d7883a 	add	r11,r2,r11
 1001288:	88bff404 	addi	r2,r17,-48
 100128c:	30bff92e 	bgeu	r6,r2,1001274 <___vfprintf_internal_r+0x4d8>
 1001290:	dac03115 	stw	r11,196(sp)
 1001294:	003f2306 	br	1000f24 <___vfprintf_internal_r+0x188>
 1001298:	18c03fcc 	andi	r3,r3,255
 100129c:	18072b1e 	bne	r3,zero,1002f4c <___vfprintf_internal_r+0x21b0>
 10012a0:	94800414 	ori	r18,r18,16
 10012a4:	9080080c 	andi	r2,r18,32
 10012a8:	10037b26 	beq	r2,zero,1002098 <___vfprintf_internal_r+0x12fc>
 10012ac:	d9402d17 	ldw	r5,180(sp)
 10012b0:	28800117 	ldw	r2,4(r5)
 10012b4:	2cc00017 	ldw	r19,0(r5)
 10012b8:	29400204 	addi	r5,r5,8
 10012bc:	d9402d15 	stw	r5,180(sp)
 10012c0:	102d883a 	mov	r22,r2
 10012c4:	10044b16 	blt	r2,zero,10023f4 <___vfprintf_internal_r+0x1658>
 10012c8:	d9402917 	ldw	r5,164(sp)
 10012cc:	df002783 	ldbu	fp,158(sp)
 10012d0:	2803bc16 	blt	r5,zero,10021c4 <___vfprintf_internal_r+0x1428>
 10012d4:	00ffdfc4 	movi	r3,-129
 10012d8:	9d84b03a 	or	r2,r19,r22
 10012dc:	90e4703a 	and	r18,r18,r3
 10012e0:	10017726 	beq	r2,zero,10018c0 <___vfprintf_internal_r+0xb24>
 10012e4:	b0038326 	beq	r22,zero,10020f4 <___vfprintf_internal_r+0x1358>
 10012e8:	dc402a15 	stw	r17,168(sp)
 10012ec:	dc001e04 	addi	r16,sp,120
 10012f0:	b023883a 	mov	r17,r22
 10012f4:	402d883a 	mov	r22,r8
 10012f8:	9809883a 	mov	r4,r19
 10012fc:	880b883a 	mov	r5,r17
 1001300:	01800284 	movi	r6,10
 1001304:	000f883a 	mov	r7,zero
 1001308:	100a7900 	call	100a790 <__umoddi3>
 100130c:	10800c04 	addi	r2,r2,48
 1001310:	843fffc4 	addi	r16,r16,-1
 1001314:	9809883a 	mov	r4,r19
 1001318:	880b883a 	mov	r5,r17
 100131c:	80800005 	stb	r2,0(r16)
 1001320:	01800284 	movi	r6,10
 1001324:	000f883a 	mov	r7,zero
 1001328:	100a2180 	call	100a218 <__udivdi3>
 100132c:	1027883a 	mov	r19,r2
 1001330:	10c4b03a 	or	r2,r2,r3
 1001334:	1823883a 	mov	r17,r3
 1001338:	103fef1e 	bne	r2,zero,10012f8 <___vfprintf_internal_r+0x55c>
 100133c:	d8c02817 	ldw	r3,160(sp)
 1001340:	dc402a17 	ldw	r17,168(sp)
 1001344:	b011883a 	mov	r8,r22
 1001348:	1c07c83a 	sub	r3,r3,r16
 100134c:	d8c02e15 	stw	r3,184(sp)
 1001350:	00005906 	br	10014b8 <___vfprintf_internal_r+0x71c>
 1001354:	18c03fcc 	andi	r3,r3,255
 1001358:	1806fa1e 	bne	r3,zero,1002f44 <___vfprintf_internal_r+0x21a8>
 100135c:	9080020c 	andi	r2,r18,8
 1001360:	10048a26 	beq	r2,zero,100258c <___vfprintf_internal_r+0x17f0>
 1001364:	d8c02d17 	ldw	r3,180(sp)
 1001368:	d9002d17 	ldw	r4,180(sp)
 100136c:	d9402d17 	ldw	r5,180(sp)
 1001370:	18c00017 	ldw	r3,0(r3)
 1001374:	21000117 	ldw	r4,4(r4)
 1001378:	29400204 	addi	r5,r5,8
 100137c:	d8c03615 	stw	r3,216(sp)
 1001380:	d9003815 	stw	r4,224(sp)
 1001384:	d9402d15 	stw	r5,180(sp)
 1001388:	d9003617 	ldw	r4,216(sp)
 100138c:	d9403817 	ldw	r5,224(sp)
 1001390:	da003d15 	stw	r8,244(sp)
 1001394:	04000044 	movi	r16,1
 1001398:	1007fbc0 	call	1007fbc <__fpclassifyd>
 100139c:	da003d17 	ldw	r8,244(sp)
 10013a0:	14041f1e 	bne	r2,r16,1002420 <___vfprintf_internal_r+0x1684>
 10013a4:	d9003617 	ldw	r4,216(sp)
 10013a8:	d9403817 	ldw	r5,224(sp)
 10013ac:	000d883a 	mov	r6,zero
 10013b0:	000f883a 	mov	r7,zero
 10013b4:	100c1740 	call	100c174 <__ledf2>
 10013b8:	da003d17 	ldw	r8,244(sp)
 10013bc:	1005be16 	blt	r2,zero,1002ab8 <___vfprintf_internal_r+0x1d1c>
 10013c0:	df002783 	ldbu	fp,158(sp)
 10013c4:	008011c4 	movi	r2,71
 10013c8:	1445330e 	bge	r2,r17,1002898 <___vfprintf_internal_r+0x1afc>
 10013cc:	04004074 	movhi	r16,257
 10013d0:	843f5604 	addi	r16,r16,-680
 10013d4:	00c000c4 	movi	r3,3
 10013d8:	00bfdfc4 	movi	r2,-129
 10013dc:	d8c02a15 	stw	r3,168(sp)
 10013e0:	90a4703a 	and	r18,r18,r2
 10013e4:	d8c02e15 	stw	r3,184(sp)
 10013e8:	d8002915 	stw	zero,164(sp)
 10013ec:	d8003215 	stw	zero,200(sp)
 10013f0:	00003706 	br	10014d0 <___vfprintf_internal_r+0x734>
 10013f4:	94800214 	ori	r18,r18,8
 10013f8:	ac400007 	ldb	r17,0(r21)
 10013fc:	003ec806 	br	1000f20 <___vfprintf_internal_r+0x184>
 1001400:	18c03fcc 	andi	r3,r3,255
 1001404:	1806db1e 	bne	r3,zero,1002f74 <___vfprintf_internal_r+0x21d8>
 1001408:	94800414 	ori	r18,r18,16
 100140c:	9080080c 	andi	r2,r18,32
 1001410:	1002d826 	beq	r2,zero,1001f74 <___vfprintf_internal_r+0x11d8>
 1001414:	d9402d17 	ldw	r5,180(sp)
 1001418:	d8c02917 	ldw	r3,164(sp)
 100141c:	d8002785 	stb	zero,158(sp)
 1001420:	28800204 	addi	r2,r5,8
 1001424:	2cc00017 	ldw	r19,0(r5)
 1001428:	2d800117 	ldw	r22,4(r5)
 100142c:	18048f16 	blt	r3,zero,100266c <___vfprintf_internal_r+0x18d0>
 1001430:	013fdfc4 	movi	r4,-129
 1001434:	9d86b03a 	or	r3,r19,r22
 1001438:	d8802d15 	stw	r2,180(sp)
 100143c:	9124703a 	and	r18,r18,r4
 1001440:	1802d91e 	bne	r3,zero,1001fa8 <___vfprintf_internal_r+0x120c>
 1001444:	d8c02917 	ldw	r3,164(sp)
 1001448:	0039883a 	mov	fp,zero
 100144c:	1805c326 	beq	r3,zero,1002b5c <___vfprintf_internal_r+0x1dc0>
 1001450:	0027883a 	mov	r19,zero
 1001454:	002d883a 	mov	r22,zero
 1001458:	dc001e04 	addi	r16,sp,120
 100145c:	9806d0fa 	srli	r3,r19,3
 1001460:	b008977a 	slli	r4,r22,29
 1001464:	b02cd0fa 	srli	r22,r22,3
 1001468:	9cc001cc 	andi	r19,r19,7
 100146c:	98800c04 	addi	r2,r19,48
 1001470:	843fffc4 	addi	r16,r16,-1
 1001474:	20e6b03a 	or	r19,r4,r3
 1001478:	80800005 	stb	r2,0(r16)
 100147c:	9d86b03a 	or	r3,r19,r22
 1001480:	183ff61e 	bne	r3,zero,100145c <___vfprintf_internal_r+0x6c0>
 1001484:	90c0004c 	andi	r3,r18,1
 1001488:	18013b26 	beq	r3,zero,1001978 <___vfprintf_internal_r+0xbdc>
 100148c:	10803fcc 	andi	r2,r2,255
 1001490:	1080201c 	xori	r2,r2,128
 1001494:	10bfe004 	addi	r2,r2,-128
 1001498:	00c00c04 	movi	r3,48
 100149c:	10c13626 	beq	r2,r3,1001978 <___vfprintf_internal_r+0xbdc>
 10014a0:	80ffffc5 	stb	r3,-1(r16)
 10014a4:	d8c02817 	ldw	r3,160(sp)
 10014a8:	80bfffc4 	addi	r2,r16,-1
 10014ac:	1021883a 	mov	r16,r2
 10014b0:	1887c83a 	sub	r3,r3,r2
 10014b4:	d8c02e15 	stw	r3,184(sp)
 10014b8:	d8802e17 	ldw	r2,184(sp)
 10014bc:	d9002917 	ldw	r4,164(sp)
 10014c0:	1100010e 	bge	r2,r4,10014c8 <___vfprintf_internal_r+0x72c>
 10014c4:	2005883a 	mov	r2,r4
 10014c8:	d8802a15 	stw	r2,168(sp)
 10014cc:	d8003215 	stw	zero,200(sp)
 10014d0:	e7003fcc 	andi	fp,fp,255
 10014d4:	e700201c 	xori	fp,fp,128
 10014d8:	e73fe004 	addi	fp,fp,-128
 10014dc:	e0000326 	beq	fp,zero,10014ec <___vfprintf_internal_r+0x750>
 10014e0:	d8c02a17 	ldw	r3,168(sp)
 10014e4:	18c00044 	addi	r3,r3,1
 10014e8:	d8c02a15 	stw	r3,168(sp)
 10014ec:	90c0008c 	andi	r3,r18,2
 10014f0:	d8c02b15 	stw	r3,172(sp)
 10014f4:	18000326 	beq	r3,zero,1001504 <___vfprintf_internal_r+0x768>
 10014f8:	d8c02a17 	ldw	r3,168(sp)
 10014fc:	18c00084 	addi	r3,r3,2
 1001500:	d8c02a15 	stw	r3,168(sp)
 1001504:	90c0210c 	andi	r3,r18,132
 1001508:	d8c03015 	stw	r3,192(sp)
 100150c:	1801a31e 	bne	r3,zero,1001b9c <___vfprintf_internal_r+0xe00>
 1001510:	d9003117 	ldw	r4,196(sp)
 1001514:	d8c02a17 	ldw	r3,168(sp)
 1001518:	20e7c83a 	sub	r19,r4,r3
 100151c:	04c19f0e 	bge	zero,r19,1001b9c <___vfprintf_internal_r+0xe00>
 1001520:	02400404 	movi	r9,16
 1001524:	d8c02017 	ldw	r3,128(sp)
 1001528:	d8801f17 	ldw	r2,124(sp)
 100152c:	4cc50d0e 	bge	r9,r19,1002964 <___vfprintf_internal_r+0x1bc8>
 1001530:	01404074 	movhi	r5,257
 1001534:	297f6984 	addi	r5,r5,-602
 1001538:	dc403b15 	stw	r17,236(sp)
 100153c:	d9403515 	stw	r5,212(sp)
 1001540:	9823883a 	mov	r17,r19
 1001544:	482d883a 	mov	r22,r9
 1001548:	9027883a 	mov	r19,r18
 100154c:	070001c4 	movi	fp,7
 1001550:	8025883a 	mov	r18,r16
 1001554:	dc002c17 	ldw	r16,176(sp)
 1001558:	00000306 	br	1001568 <___vfprintf_internal_r+0x7cc>
 100155c:	8c7ffc04 	addi	r17,r17,-16
 1001560:	42000204 	addi	r8,r8,8
 1001564:	b440130e 	bge	r22,r17,10015b4 <___vfprintf_internal_r+0x818>
 1001568:	01004074 	movhi	r4,257
 100156c:	18c00404 	addi	r3,r3,16
 1001570:	10800044 	addi	r2,r2,1
 1001574:	213f6984 	addi	r4,r4,-602
 1001578:	41000015 	stw	r4,0(r8)
 100157c:	45800115 	stw	r22,4(r8)
 1001580:	d8c02015 	stw	r3,128(sp)
 1001584:	d8801f15 	stw	r2,124(sp)
 1001588:	e0bff40e 	bge	fp,r2,100155c <___vfprintf_internal_r+0x7c0>
 100158c:	d9801e04 	addi	r6,sp,120
 1001590:	b80b883a 	mov	r5,r23
 1001594:	8009883a 	mov	r4,r16
 1001598:	10083980 	call	1008398 <__sprint_r>
 100159c:	103f011e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10015a0:	8c7ffc04 	addi	r17,r17,-16
 10015a4:	d8c02017 	ldw	r3,128(sp)
 10015a8:	d8801f17 	ldw	r2,124(sp)
 10015ac:	da000404 	addi	r8,sp,16
 10015b0:	b47fed16 	blt	r22,r17,1001568 <___vfprintf_internal_r+0x7cc>
 10015b4:	9021883a 	mov	r16,r18
 10015b8:	9825883a 	mov	r18,r19
 10015bc:	8827883a 	mov	r19,r17
 10015c0:	dc403b17 	ldw	r17,236(sp)
 10015c4:	d9403517 	ldw	r5,212(sp)
 10015c8:	98c7883a 	add	r3,r19,r3
 10015cc:	10800044 	addi	r2,r2,1
 10015d0:	41400015 	stw	r5,0(r8)
 10015d4:	44c00115 	stw	r19,4(r8)
 10015d8:	d8c02015 	stw	r3,128(sp)
 10015dc:	d8801f15 	stw	r2,124(sp)
 10015e0:	010001c4 	movi	r4,7
 10015e4:	2082a316 	blt	r4,r2,1002074 <___vfprintf_internal_r+0x12d8>
 10015e8:	df002787 	ldb	fp,158(sp)
 10015ec:	42000204 	addi	r8,r8,8
 10015f0:	e0000c26 	beq	fp,zero,1001624 <___vfprintf_internal_r+0x888>
 10015f4:	d8801f17 	ldw	r2,124(sp)
 10015f8:	d9002784 	addi	r4,sp,158
 10015fc:	18c00044 	addi	r3,r3,1
 1001600:	10800044 	addi	r2,r2,1
 1001604:	41000015 	stw	r4,0(r8)
 1001608:	01000044 	movi	r4,1
 100160c:	41000115 	stw	r4,4(r8)
 1001610:	d8c02015 	stw	r3,128(sp)
 1001614:	d8801f15 	stw	r2,124(sp)
 1001618:	010001c4 	movi	r4,7
 100161c:	20823c16 	blt	r4,r2,1001f10 <___vfprintf_internal_r+0x1174>
 1001620:	42000204 	addi	r8,r8,8
 1001624:	d8802b17 	ldw	r2,172(sp)
 1001628:	10000c26 	beq	r2,zero,100165c <___vfprintf_internal_r+0x8c0>
 100162c:	d8801f17 	ldw	r2,124(sp)
 1001630:	d9002704 	addi	r4,sp,156
 1001634:	18c00084 	addi	r3,r3,2
 1001638:	10800044 	addi	r2,r2,1
 100163c:	41000015 	stw	r4,0(r8)
 1001640:	01000084 	movi	r4,2
 1001644:	41000115 	stw	r4,4(r8)
 1001648:	d8c02015 	stw	r3,128(sp)
 100164c:	d8801f15 	stw	r2,124(sp)
 1001650:	010001c4 	movi	r4,7
 1001654:	20823616 	blt	r4,r2,1001f30 <___vfprintf_internal_r+0x1194>
 1001658:	42000204 	addi	r8,r8,8
 100165c:	d9003017 	ldw	r4,192(sp)
 1001660:	00802004 	movi	r2,128
 1001664:	20819926 	beq	r4,r2,1001ccc <___vfprintf_internal_r+0xf30>
 1001668:	d9402917 	ldw	r5,164(sp)
 100166c:	d8802e17 	ldw	r2,184(sp)
 1001670:	28adc83a 	sub	r22,r5,r2
 1001674:	0580310e 	bge	zero,r22,100173c <___vfprintf_internal_r+0x9a0>
 1001678:	07000404 	movi	fp,16
 100167c:	d8801f17 	ldw	r2,124(sp)
 1001680:	e584140e 	bge	fp,r22,10026d4 <___vfprintf_internal_r+0x1938>
 1001684:	01404074 	movhi	r5,257
 1001688:	297f6584 	addi	r5,r5,-618
 100168c:	dc402915 	stw	r17,164(sp)
 1001690:	d9402b15 	stw	r5,172(sp)
 1001694:	b023883a 	mov	r17,r22
 1001698:	04c001c4 	movi	r19,7
 100169c:	a82d883a 	mov	r22,r21
 10016a0:	902b883a 	mov	r21,r18
 10016a4:	8025883a 	mov	r18,r16
 10016a8:	dc002c17 	ldw	r16,176(sp)
 10016ac:	00000306 	br	10016bc <___vfprintf_internal_r+0x920>
 10016b0:	8c7ffc04 	addi	r17,r17,-16
 10016b4:	42000204 	addi	r8,r8,8
 10016b8:	e440110e 	bge	fp,r17,1001700 <___vfprintf_internal_r+0x964>
 10016bc:	18c00404 	addi	r3,r3,16
 10016c0:	10800044 	addi	r2,r2,1
 10016c4:	45000015 	stw	r20,0(r8)
 10016c8:	47000115 	stw	fp,4(r8)
 10016cc:	d8c02015 	stw	r3,128(sp)
 10016d0:	d8801f15 	stw	r2,124(sp)
 10016d4:	98bff60e 	bge	r19,r2,10016b0 <___vfprintf_internal_r+0x914>
 10016d8:	d9801e04 	addi	r6,sp,120
 10016dc:	b80b883a 	mov	r5,r23
 10016e0:	8009883a 	mov	r4,r16
 10016e4:	10083980 	call	1008398 <__sprint_r>
 10016e8:	103eae1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10016ec:	8c7ffc04 	addi	r17,r17,-16
 10016f0:	d8c02017 	ldw	r3,128(sp)
 10016f4:	d8801f17 	ldw	r2,124(sp)
 10016f8:	da000404 	addi	r8,sp,16
 10016fc:	e47fef16 	blt	fp,r17,10016bc <___vfprintf_internal_r+0x920>
 1001700:	9021883a 	mov	r16,r18
 1001704:	a825883a 	mov	r18,r21
 1001708:	b02b883a 	mov	r21,r22
 100170c:	882d883a 	mov	r22,r17
 1001710:	dc402917 	ldw	r17,164(sp)
 1001714:	d9002b17 	ldw	r4,172(sp)
 1001718:	1d87883a 	add	r3,r3,r22
 100171c:	10800044 	addi	r2,r2,1
 1001720:	41000015 	stw	r4,0(r8)
 1001724:	45800115 	stw	r22,4(r8)
 1001728:	d8c02015 	stw	r3,128(sp)
 100172c:	d8801f15 	stw	r2,124(sp)
 1001730:	010001c4 	movi	r4,7
 1001734:	2081ee16 	blt	r4,r2,1001ef0 <___vfprintf_internal_r+0x1154>
 1001738:	42000204 	addi	r8,r8,8
 100173c:	9080400c 	andi	r2,r18,256
 1001740:	1001181e 	bne	r2,zero,1001ba4 <___vfprintf_internal_r+0xe08>
 1001744:	d9402e17 	ldw	r5,184(sp)
 1001748:	d8801f17 	ldw	r2,124(sp)
 100174c:	44000015 	stw	r16,0(r8)
 1001750:	1947883a 	add	r3,r3,r5
 1001754:	10800044 	addi	r2,r2,1
 1001758:	41400115 	stw	r5,4(r8)
 100175c:	d8c02015 	stw	r3,128(sp)
 1001760:	d8801f15 	stw	r2,124(sp)
 1001764:	010001c4 	movi	r4,7
 1001768:	2081d316 	blt	r4,r2,1001eb8 <___vfprintf_internal_r+0x111c>
 100176c:	42000204 	addi	r8,r8,8
 1001770:	9480010c 	andi	r18,r18,4
 1001774:	90003226 	beq	r18,zero,1001840 <___vfprintf_internal_r+0xaa4>
 1001778:	d9403117 	ldw	r5,196(sp)
 100177c:	d8802a17 	ldw	r2,168(sp)
 1001780:	28a1c83a 	sub	r16,r5,r2
 1001784:	04002e0e 	bge	zero,r16,1001840 <___vfprintf_internal_r+0xaa4>
 1001788:	04400404 	movi	r17,16
 100178c:	d8801f17 	ldw	r2,124(sp)
 1001790:	8c04a20e 	bge	r17,r16,1002a1c <___vfprintf_internal_r+0x1c80>
 1001794:	01404074 	movhi	r5,257
 1001798:	297f6984 	addi	r5,r5,-602
 100179c:	d9403515 	stw	r5,212(sp)
 10017a0:	048001c4 	movi	r18,7
 10017a4:	dcc02c17 	ldw	r19,176(sp)
 10017a8:	00000306 	br	10017b8 <___vfprintf_internal_r+0xa1c>
 10017ac:	843ffc04 	addi	r16,r16,-16
 10017b0:	42000204 	addi	r8,r8,8
 10017b4:	8c00130e 	bge	r17,r16,1001804 <___vfprintf_internal_r+0xa68>
 10017b8:	01004074 	movhi	r4,257
 10017bc:	18c00404 	addi	r3,r3,16
 10017c0:	10800044 	addi	r2,r2,1
 10017c4:	213f6984 	addi	r4,r4,-602
 10017c8:	41000015 	stw	r4,0(r8)
 10017cc:	44400115 	stw	r17,4(r8)
 10017d0:	d8c02015 	stw	r3,128(sp)
 10017d4:	d8801f15 	stw	r2,124(sp)
 10017d8:	90bff40e 	bge	r18,r2,10017ac <___vfprintf_internal_r+0xa10>
 10017dc:	d9801e04 	addi	r6,sp,120
 10017e0:	b80b883a 	mov	r5,r23
 10017e4:	9809883a 	mov	r4,r19
 10017e8:	10083980 	call	1008398 <__sprint_r>
 10017ec:	103e6d1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10017f0:	843ffc04 	addi	r16,r16,-16
 10017f4:	d8c02017 	ldw	r3,128(sp)
 10017f8:	d8801f17 	ldw	r2,124(sp)
 10017fc:	da000404 	addi	r8,sp,16
 1001800:	8c3fed16 	blt	r17,r16,10017b8 <___vfprintf_internal_r+0xa1c>
 1001804:	d9403517 	ldw	r5,212(sp)
 1001808:	1c07883a 	add	r3,r3,r16
 100180c:	10800044 	addi	r2,r2,1
 1001810:	41400015 	stw	r5,0(r8)
 1001814:	44000115 	stw	r16,4(r8)
 1001818:	d8c02015 	stw	r3,128(sp)
 100181c:	d8801f15 	stw	r2,124(sp)
 1001820:	010001c4 	movi	r4,7
 1001824:	2080060e 	bge	r4,r2,1001840 <___vfprintf_internal_r+0xaa4>
 1001828:	d9002c17 	ldw	r4,176(sp)
 100182c:	d9801e04 	addi	r6,sp,120
 1001830:	b80b883a 	mov	r5,r23
 1001834:	10083980 	call	1008398 <__sprint_r>
 1001838:	103e5a1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 100183c:	d8c02017 	ldw	r3,128(sp)
 1001840:	d8803117 	ldw	r2,196(sp)
 1001844:	d9002a17 	ldw	r4,168(sp)
 1001848:	1100010e 	bge	r2,r4,1001850 <___vfprintf_internal_r+0xab4>
 100184c:	2005883a 	mov	r2,r4
 1001850:	d9402f17 	ldw	r5,188(sp)
 1001854:	288b883a 	add	r5,r5,r2
 1001858:	d9402f15 	stw	r5,188(sp)
 100185c:	18019e1e 	bne	r3,zero,1001ed8 <___vfprintf_internal_r+0x113c>
 1001860:	a8800007 	ldb	r2,0(r21)
 1001864:	d8001f15 	stw	zero,124(sp)
 1001868:	da000404 	addi	r8,sp,16
 100186c:	103d851e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0xe8>
 1001870:	a821883a 	mov	r16,r21
 1001874:	003d9b06 	br	1000ee4 <___vfprintf_internal_r+0x148>
 1001878:	18c03fcc 	andi	r3,r3,255
 100187c:	1805c11e 	bne	r3,zero,1002f84 <___vfprintf_internal_r+0x21e8>
 1001880:	94800414 	ori	r18,r18,16
 1001884:	9080080c 	andi	r2,r18,32
 1001888:	10020c26 	beq	r2,zero,10020bc <___vfprintf_internal_r+0x1320>
 100188c:	d8802d17 	ldw	r2,180(sp)
 1001890:	d9002917 	ldw	r4,164(sp)
 1001894:	d8002785 	stb	zero,158(sp)
 1001898:	10c00204 	addi	r3,r2,8
 100189c:	14c00017 	ldw	r19,0(r2)
 10018a0:	15800117 	ldw	r22,4(r2)
 10018a4:	20040f16 	blt	r4,zero,10028e4 <___vfprintf_internal_r+0x1b48>
 10018a8:	013fdfc4 	movi	r4,-129
 10018ac:	9d84b03a 	or	r2,r19,r22
 10018b0:	d8c02d15 	stw	r3,180(sp)
 10018b4:	9124703a 	and	r18,r18,r4
 10018b8:	0039883a 	mov	fp,zero
 10018bc:	103e891e 	bne	r2,zero,10012e4 <___vfprintf_internal_r+0x548>
 10018c0:	d9002917 	ldw	r4,164(sp)
 10018c4:	2002c11e 	bne	r4,zero,10023cc <___vfprintf_internal_r+0x1630>
 10018c8:	d8002915 	stw	zero,164(sp)
 10018cc:	d8002e15 	stw	zero,184(sp)
 10018d0:	dc001e04 	addi	r16,sp,120
 10018d4:	003ef806 	br	10014b8 <___vfprintf_internal_r+0x71c>
 10018d8:	18c03fcc 	andi	r3,r3,255
 10018dc:	18059d1e 	bne	r3,zero,1002f54 <___vfprintf_internal_r+0x21b8>
 10018e0:	01404074 	movhi	r5,257
 10018e4:	297f5904 	addi	r5,r5,-668
 10018e8:	d9403915 	stw	r5,228(sp)
 10018ec:	9080080c 	andi	r2,r18,32
 10018f0:	10005226 	beq	r2,zero,1001a3c <___vfprintf_internal_r+0xca0>
 10018f4:	d8802d17 	ldw	r2,180(sp)
 10018f8:	14c00017 	ldw	r19,0(r2)
 10018fc:	15800117 	ldw	r22,4(r2)
 1001900:	10800204 	addi	r2,r2,8
 1001904:	d8802d15 	stw	r2,180(sp)
 1001908:	9080004c 	andi	r2,r18,1
 100190c:	10019026 	beq	r2,zero,1001f50 <___vfprintf_internal_r+0x11b4>
 1001910:	9d84b03a 	or	r2,r19,r22
 1001914:	10036926 	beq	r2,zero,10026bc <___vfprintf_internal_r+0x1920>
 1001918:	d8c02917 	ldw	r3,164(sp)
 100191c:	00800c04 	movi	r2,48
 1001920:	d8802705 	stb	r2,156(sp)
 1001924:	dc402745 	stb	r17,157(sp)
 1001928:	d8002785 	stb	zero,158(sp)
 100192c:	90800094 	ori	r2,r18,2
 1001930:	18045d16 	blt	r3,zero,1002aa8 <___vfprintf_internal_r+0x1d0c>
 1001934:	00bfdfc4 	movi	r2,-129
 1001938:	90a4703a 	and	r18,r18,r2
 100193c:	94800094 	ori	r18,r18,2
 1001940:	0039883a 	mov	fp,zero
 1001944:	d9003917 	ldw	r4,228(sp)
 1001948:	dc001e04 	addi	r16,sp,120
 100194c:	988003cc 	andi	r2,r19,15
 1001950:	b006973a 	slli	r3,r22,28
 1001954:	2085883a 	add	r2,r4,r2
 1001958:	9826d13a 	srli	r19,r19,4
 100195c:	10800003 	ldbu	r2,0(r2)
 1001960:	b02cd13a 	srli	r22,r22,4
 1001964:	843fffc4 	addi	r16,r16,-1
 1001968:	1ce6b03a 	or	r19,r3,r19
 100196c:	80800005 	stb	r2,0(r16)
 1001970:	9d84b03a 	or	r2,r19,r22
 1001974:	103ff51e 	bne	r2,zero,100194c <___vfprintf_internal_r+0xbb0>
 1001978:	d8c02817 	ldw	r3,160(sp)
 100197c:	1c07c83a 	sub	r3,r3,r16
 1001980:	d8c02e15 	stw	r3,184(sp)
 1001984:	003ecc06 	br	10014b8 <___vfprintf_internal_r+0x71c>
 1001988:	18c03fcc 	andi	r3,r3,255
 100198c:	183e9f26 	beq	r3,zero,100140c <___vfprintf_internal_r+0x670>
 1001990:	d9c02785 	stb	r7,158(sp)
 1001994:	003e9d06 	br	100140c <___vfprintf_internal_r+0x670>
 1001998:	00c00044 	movi	r3,1
 100199c:	01c00ac4 	movi	r7,43
 10019a0:	ac400007 	ldb	r17,0(r21)
 10019a4:	003d5e06 	br	1000f20 <___vfprintf_internal_r+0x184>
 10019a8:	94800814 	ori	r18,r18,32
 10019ac:	ac400007 	ldb	r17,0(r21)
 10019b0:	003d5b06 	br	1000f20 <___vfprintf_internal_r+0x184>
 10019b4:	d8c02d17 	ldw	r3,180(sp)
 10019b8:	d8002785 	stb	zero,158(sp)
 10019bc:	1c000017 	ldw	r16,0(r3)
 10019c0:	1cc00104 	addi	r19,r3,4
 10019c4:	80041926 	beq	r16,zero,1002a2c <___vfprintf_internal_r+0x1c90>
 10019c8:	d9002917 	ldw	r4,164(sp)
 10019cc:	2003d016 	blt	r4,zero,1002910 <___vfprintf_internal_r+0x1b74>
 10019d0:	200d883a 	mov	r6,r4
 10019d4:	000b883a 	mov	r5,zero
 10019d8:	8009883a 	mov	r4,r16
 10019dc:	da003d15 	stw	r8,244(sp)
 10019e0:	10065ac0 	call	10065ac <memchr>
 10019e4:	da003d17 	ldw	r8,244(sp)
 10019e8:	10045426 	beq	r2,zero,1002b3c <___vfprintf_internal_r+0x1da0>
 10019ec:	1405c83a 	sub	r2,r2,r16
 10019f0:	d8802e15 	stw	r2,184(sp)
 10019f4:	1003cc16 	blt	r2,zero,1002928 <___vfprintf_internal_r+0x1b8c>
 10019f8:	df002783 	ldbu	fp,158(sp)
 10019fc:	d8802a15 	stw	r2,168(sp)
 1001a00:	dcc02d15 	stw	r19,180(sp)
 1001a04:	d8002915 	stw	zero,164(sp)
 1001a08:	d8003215 	stw	zero,200(sp)
 1001a0c:	003eb006 	br	10014d0 <___vfprintf_internal_r+0x734>
 1001a10:	18c03fcc 	andi	r3,r3,255
 1001a14:	183f9b26 	beq	r3,zero,1001884 <___vfprintf_internal_r+0xae8>
 1001a18:	d9c02785 	stb	r7,158(sp)
 1001a1c:	003f9906 	br	1001884 <___vfprintf_internal_r+0xae8>
 1001a20:	18c03fcc 	andi	r3,r3,255
 1001a24:	1805551e 	bne	r3,zero,1002f7c <___vfprintf_internal_r+0x21e0>
 1001a28:	01404074 	movhi	r5,257
 1001a2c:	297f5e04 	addi	r5,r5,-648
 1001a30:	d9403915 	stw	r5,228(sp)
 1001a34:	9080080c 	andi	r2,r18,32
 1001a38:	103fae1e 	bne	r2,zero,10018f4 <___vfprintf_internal_r+0xb58>
 1001a3c:	9080040c 	andi	r2,r18,16
 1001a40:	1002de26 	beq	r2,zero,10025bc <___vfprintf_internal_r+0x1820>
 1001a44:	d8c02d17 	ldw	r3,180(sp)
 1001a48:	002d883a 	mov	r22,zero
 1001a4c:	1cc00017 	ldw	r19,0(r3)
 1001a50:	18c00104 	addi	r3,r3,4
 1001a54:	d8c02d15 	stw	r3,180(sp)
 1001a58:	003fab06 	br	1001908 <___vfprintf_internal_r+0xb6c>
 1001a5c:	38803fcc 	andi	r2,r7,255
 1001a60:	1080201c 	xori	r2,r2,128
 1001a64:	10bfe004 	addi	r2,r2,-128
 1001a68:	1002d21e 	bne	r2,zero,10025b4 <___vfprintf_internal_r+0x1818>
 1001a6c:	00c00044 	movi	r3,1
 1001a70:	01c00804 	movi	r7,32
 1001a74:	ac400007 	ldb	r17,0(r21)
 1001a78:	003d2906 	br	1000f20 <___vfprintf_internal_r+0x184>
 1001a7c:	94800054 	ori	r18,r18,1
 1001a80:	ac400007 	ldb	r17,0(r21)
 1001a84:	003d2606 	br	1000f20 <___vfprintf_internal_r+0x184>
 1001a88:	18c03fcc 	andi	r3,r3,255
 1001a8c:	183e0526 	beq	r3,zero,10012a4 <___vfprintf_internal_r+0x508>
 1001a90:	d9c02785 	stb	r7,158(sp)
 1001a94:	003e0306 	br	10012a4 <___vfprintf_internal_r+0x508>
 1001a98:	94801014 	ori	r18,r18,64
 1001a9c:	ac400007 	ldb	r17,0(r21)
 1001aa0:	003d1f06 	br	1000f20 <___vfprintf_internal_r+0x184>
 1001aa4:	ac400007 	ldb	r17,0(r21)
 1001aa8:	8a438726 	beq	r17,r9,10028c8 <___vfprintf_internal_r+0x1b2c>
 1001aac:	94800414 	ori	r18,r18,16
 1001ab0:	003d1b06 	br	1000f20 <___vfprintf_internal_r+0x184>
 1001ab4:	18c03fcc 	andi	r3,r3,255
 1001ab8:	1805341e 	bne	r3,zero,1002f8c <___vfprintf_internal_r+0x21f0>
 1001abc:	9080080c 	andi	r2,r18,32
 1001ac0:	1002cd26 	beq	r2,zero,10025f8 <___vfprintf_internal_r+0x185c>
 1001ac4:	d9402d17 	ldw	r5,180(sp)
 1001ac8:	d9002f17 	ldw	r4,188(sp)
 1001acc:	28800017 	ldw	r2,0(r5)
 1001ad0:	2007d7fa 	srai	r3,r4,31
 1001ad4:	29400104 	addi	r5,r5,4
 1001ad8:	d9402d15 	stw	r5,180(sp)
 1001adc:	11000015 	stw	r4,0(r2)
 1001ae0:	10c00115 	stw	r3,4(r2)
 1001ae4:	003ce506 	br	1000e7c <___vfprintf_internal_r+0xe0>
 1001ae8:	d8c02d17 	ldw	r3,180(sp)
 1001aec:	d9002d17 	ldw	r4,180(sp)
 1001af0:	d8002785 	stb	zero,158(sp)
 1001af4:	18800017 	ldw	r2,0(r3)
 1001af8:	21000104 	addi	r4,r4,4
 1001afc:	00c00044 	movi	r3,1
 1001b00:	d8c02a15 	stw	r3,168(sp)
 1001b04:	d8801405 	stb	r2,80(sp)
 1001b08:	d9002d15 	stw	r4,180(sp)
 1001b0c:	d8c02e15 	stw	r3,184(sp)
 1001b10:	d8002915 	stw	zero,164(sp)
 1001b14:	d8003215 	stw	zero,200(sp)
 1001b18:	dc001404 	addi	r16,sp,80
 1001b1c:	0039883a 	mov	fp,zero
 1001b20:	003e7206 	br	10014ec <___vfprintf_internal_r+0x750>
 1001b24:	01004074 	movhi	r4,257
 1001b28:	213f5e04 	addi	r4,r4,-648
 1001b2c:	0039883a 	mov	fp,zero
 1001b30:	d9003915 	stw	r4,228(sp)
 1001b34:	04401e04 	movi	r17,120
 1001b38:	003f8206 	br	1001944 <___vfprintf_internal_r+0xba8>
 1001b3c:	18c03fcc 	andi	r3,r3,255
 1001b40:	1805061e 	bne	r3,zero,1002f5c <___vfprintf_internal_r+0x21c0>
 1001b44:	883d9126 	beq	r17,zero,100118c <___vfprintf_internal_r+0x3f0>
 1001b48:	00c00044 	movi	r3,1
 1001b4c:	d8c02a15 	stw	r3,168(sp)
 1001b50:	dc401405 	stb	r17,80(sp)
 1001b54:	d8002785 	stb	zero,158(sp)
 1001b58:	003fec06 	br	1001b0c <___vfprintf_internal_r+0xd70>
 1001b5c:	01404074 	movhi	r5,257
 1001b60:	297f5e04 	addi	r5,r5,-648
 1001b64:	d9403915 	stw	r5,228(sp)
 1001b68:	d8c02d15 	stw	r3,180(sp)
 1001b6c:	1025883a 	mov	r18,r2
 1001b70:	04401e04 	movi	r17,120
 1001b74:	9d84b03a 	or	r2,r19,r22
 1001b78:	1000fc1e 	bne	r2,zero,1001f6c <___vfprintf_internal_r+0x11d0>
 1001b7c:	0039883a 	mov	fp,zero
 1001b80:	00800084 	movi	r2,2
 1001b84:	10803fcc 	andi	r2,r2,255
 1001b88:	00c00044 	movi	r3,1
 1001b8c:	10c20f26 	beq	r2,r3,10023cc <___vfprintf_internal_r+0x1630>
 1001b90:	00c00084 	movi	r3,2
 1001b94:	10fd6326 	beq	r2,r3,1001124 <___vfprintf_internal_r+0x388>
 1001b98:	003e2d06 	br	1001450 <___vfprintf_internal_r+0x6b4>
 1001b9c:	d8c02017 	ldw	r3,128(sp)
 1001ba0:	003e9306 	br	10015f0 <___vfprintf_internal_r+0x854>
 1001ba4:	00801944 	movi	r2,101
 1001ba8:	14407e0e 	bge	r2,r17,1001da4 <___vfprintf_internal_r+0x1008>
 1001bac:	d9003617 	ldw	r4,216(sp)
 1001bb0:	d9403817 	ldw	r5,224(sp)
 1001bb4:	000d883a 	mov	r6,zero
 1001bb8:	000f883a 	mov	r7,zero
 1001bbc:	d8c03c15 	stw	r3,240(sp)
 1001bc0:	da003d15 	stw	r8,244(sp)
 1001bc4:	100c0100 	call	100c010 <__eqdf2>
 1001bc8:	d8c03c17 	ldw	r3,240(sp)
 1001bcc:	da003d17 	ldw	r8,244(sp)
 1001bd0:	1000f71e 	bne	r2,zero,1001fb0 <___vfprintf_internal_r+0x1214>
 1001bd4:	d8801f17 	ldw	r2,124(sp)
 1001bd8:	01004074 	movhi	r4,257
 1001bdc:	213f6504 	addi	r4,r4,-620
 1001be0:	18c00044 	addi	r3,r3,1
 1001be4:	10800044 	addi	r2,r2,1
 1001be8:	41000015 	stw	r4,0(r8)
 1001bec:	01000044 	movi	r4,1
 1001bf0:	41000115 	stw	r4,4(r8)
 1001bf4:	d8c02015 	stw	r3,128(sp)
 1001bf8:	d8801f15 	stw	r2,124(sp)
 1001bfc:	010001c4 	movi	r4,7
 1001c00:	2082b816 	blt	r4,r2,10026e4 <___vfprintf_internal_r+0x1948>
 1001c04:	42000204 	addi	r8,r8,8
 1001c08:	d8802617 	ldw	r2,152(sp)
 1001c0c:	d9403317 	ldw	r5,204(sp)
 1001c10:	11400216 	blt	r2,r5,1001c1c <___vfprintf_internal_r+0xe80>
 1001c14:	9080004c 	andi	r2,r18,1
 1001c18:	103ed526 	beq	r2,zero,1001770 <___vfprintf_internal_r+0x9d4>
 1001c1c:	d8803717 	ldw	r2,220(sp)
 1001c20:	d9003417 	ldw	r4,208(sp)
 1001c24:	d9403717 	ldw	r5,220(sp)
 1001c28:	1887883a 	add	r3,r3,r2
 1001c2c:	d8801f17 	ldw	r2,124(sp)
 1001c30:	41000015 	stw	r4,0(r8)
 1001c34:	41400115 	stw	r5,4(r8)
 1001c38:	10800044 	addi	r2,r2,1
 1001c3c:	d8c02015 	stw	r3,128(sp)
 1001c40:	d8801f15 	stw	r2,124(sp)
 1001c44:	010001c4 	movi	r4,7
 1001c48:	20832916 	blt	r4,r2,10028f0 <___vfprintf_internal_r+0x1b54>
 1001c4c:	42000204 	addi	r8,r8,8
 1001c50:	d8803317 	ldw	r2,204(sp)
 1001c54:	143fffc4 	addi	r16,r2,-1
 1001c58:	043ec50e 	bge	zero,r16,1001770 <___vfprintf_internal_r+0x9d4>
 1001c5c:	04400404 	movi	r17,16
 1001c60:	d8801f17 	ldw	r2,124(sp)
 1001c64:	8c00880e 	bge	r17,r16,1001e88 <___vfprintf_internal_r+0x10ec>
 1001c68:	01404074 	movhi	r5,257
 1001c6c:	297f6584 	addi	r5,r5,-618
 1001c70:	d9402b15 	stw	r5,172(sp)
 1001c74:	058001c4 	movi	r22,7
 1001c78:	dcc02c17 	ldw	r19,176(sp)
 1001c7c:	00000306 	br	1001c8c <___vfprintf_internal_r+0xef0>
 1001c80:	42000204 	addi	r8,r8,8
 1001c84:	843ffc04 	addi	r16,r16,-16
 1001c88:	8c00820e 	bge	r17,r16,1001e94 <___vfprintf_internal_r+0x10f8>
 1001c8c:	18c00404 	addi	r3,r3,16
 1001c90:	10800044 	addi	r2,r2,1
 1001c94:	45000015 	stw	r20,0(r8)
 1001c98:	44400115 	stw	r17,4(r8)
 1001c9c:	d8c02015 	stw	r3,128(sp)
 1001ca0:	d8801f15 	stw	r2,124(sp)
 1001ca4:	b0bff60e 	bge	r22,r2,1001c80 <___vfprintf_internal_r+0xee4>
 1001ca8:	d9801e04 	addi	r6,sp,120
 1001cac:	b80b883a 	mov	r5,r23
 1001cb0:	9809883a 	mov	r4,r19
 1001cb4:	10083980 	call	1008398 <__sprint_r>
 1001cb8:	103d3a1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1001cbc:	d8c02017 	ldw	r3,128(sp)
 1001cc0:	d8801f17 	ldw	r2,124(sp)
 1001cc4:	da000404 	addi	r8,sp,16
 1001cc8:	003fee06 	br	1001c84 <___vfprintf_internal_r+0xee8>
 1001ccc:	d9403117 	ldw	r5,196(sp)
 1001cd0:	d8802a17 	ldw	r2,168(sp)
 1001cd4:	28adc83a 	sub	r22,r5,r2
 1001cd8:	05be630e 	bge	zero,r22,1001668 <___vfprintf_internal_r+0x8cc>
 1001cdc:	07000404 	movi	fp,16
 1001ce0:	d8801f17 	ldw	r2,124(sp)
 1001ce4:	e5838f0e 	bge	fp,r22,1002b24 <___vfprintf_internal_r+0x1d88>
 1001ce8:	01404074 	movhi	r5,257
 1001cec:	297f6584 	addi	r5,r5,-618
 1001cf0:	dc403015 	stw	r17,192(sp)
 1001cf4:	d9402b15 	stw	r5,172(sp)
 1001cf8:	b023883a 	mov	r17,r22
 1001cfc:	04c001c4 	movi	r19,7
 1001d00:	a82d883a 	mov	r22,r21
 1001d04:	902b883a 	mov	r21,r18
 1001d08:	8025883a 	mov	r18,r16
 1001d0c:	dc002c17 	ldw	r16,176(sp)
 1001d10:	00000306 	br	1001d20 <___vfprintf_internal_r+0xf84>
 1001d14:	8c7ffc04 	addi	r17,r17,-16
 1001d18:	42000204 	addi	r8,r8,8
 1001d1c:	e440110e 	bge	fp,r17,1001d64 <___vfprintf_internal_r+0xfc8>
 1001d20:	18c00404 	addi	r3,r3,16
 1001d24:	10800044 	addi	r2,r2,1
 1001d28:	45000015 	stw	r20,0(r8)
 1001d2c:	47000115 	stw	fp,4(r8)
 1001d30:	d8c02015 	stw	r3,128(sp)
 1001d34:	d8801f15 	stw	r2,124(sp)
 1001d38:	98bff60e 	bge	r19,r2,1001d14 <___vfprintf_internal_r+0xf78>
 1001d3c:	d9801e04 	addi	r6,sp,120
 1001d40:	b80b883a 	mov	r5,r23
 1001d44:	8009883a 	mov	r4,r16
 1001d48:	10083980 	call	1008398 <__sprint_r>
 1001d4c:	103d151e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1001d50:	8c7ffc04 	addi	r17,r17,-16
 1001d54:	d8c02017 	ldw	r3,128(sp)
 1001d58:	d8801f17 	ldw	r2,124(sp)
 1001d5c:	da000404 	addi	r8,sp,16
 1001d60:	e47fef16 	blt	fp,r17,1001d20 <___vfprintf_internal_r+0xf84>
 1001d64:	9021883a 	mov	r16,r18
 1001d68:	a825883a 	mov	r18,r21
 1001d6c:	b02b883a 	mov	r21,r22
 1001d70:	882d883a 	mov	r22,r17
 1001d74:	dc403017 	ldw	r17,192(sp)
 1001d78:	d9002b17 	ldw	r4,172(sp)
 1001d7c:	1d87883a 	add	r3,r3,r22
 1001d80:	10800044 	addi	r2,r2,1
 1001d84:	41000015 	stw	r4,0(r8)
 1001d88:	45800115 	stw	r22,4(r8)
 1001d8c:	d8c02015 	stw	r3,128(sp)
 1001d90:	d8801f15 	stw	r2,124(sp)
 1001d94:	010001c4 	movi	r4,7
 1001d98:	20818e16 	blt	r4,r2,10023d4 <___vfprintf_internal_r+0x1638>
 1001d9c:	42000204 	addi	r8,r8,8
 1001da0:	003e3106 	br	1001668 <___vfprintf_internal_r+0x8cc>
 1001da4:	d9403317 	ldw	r5,204(sp)
 1001da8:	00800044 	movi	r2,1
 1001dac:	18c00044 	addi	r3,r3,1
 1001db0:	1141530e 	bge	r2,r5,1002300 <___vfprintf_internal_r+0x1564>
 1001db4:	dc401f17 	ldw	r17,124(sp)
 1001db8:	00800044 	movi	r2,1
 1001dbc:	40800115 	stw	r2,4(r8)
 1001dc0:	8c400044 	addi	r17,r17,1
 1001dc4:	44000015 	stw	r16,0(r8)
 1001dc8:	d8c02015 	stw	r3,128(sp)
 1001dcc:	dc401f15 	stw	r17,124(sp)
 1001dd0:	008001c4 	movi	r2,7
 1001dd4:	14416b16 	blt	r2,r17,1002384 <___vfprintf_internal_r+0x15e8>
 1001dd8:	42000204 	addi	r8,r8,8
 1001ddc:	d8803717 	ldw	r2,220(sp)
 1001de0:	d9003417 	ldw	r4,208(sp)
 1001de4:	8c400044 	addi	r17,r17,1
 1001de8:	10c7883a 	add	r3,r2,r3
 1001dec:	40800115 	stw	r2,4(r8)
 1001df0:	41000015 	stw	r4,0(r8)
 1001df4:	d8c02015 	stw	r3,128(sp)
 1001df8:	dc401f15 	stw	r17,124(sp)
 1001dfc:	008001c4 	movi	r2,7
 1001e00:	14416916 	blt	r2,r17,10023a8 <___vfprintf_internal_r+0x160c>
 1001e04:	45800204 	addi	r22,r8,8
 1001e08:	d9003617 	ldw	r4,216(sp)
 1001e0c:	d9403817 	ldw	r5,224(sp)
 1001e10:	000d883a 	mov	r6,zero
 1001e14:	000f883a 	mov	r7,zero
 1001e18:	d8c03c15 	stw	r3,240(sp)
 1001e1c:	100c0100 	call	100c010 <__eqdf2>
 1001e20:	d8c03c17 	ldw	r3,240(sp)
 1001e24:	1000bc26 	beq	r2,zero,1002118 <___vfprintf_internal_r+0x137c>
 1001e28:	d9403317 	ldw	r5,204(sp)
 1001e2c:	84000044 	addi	r16,r16,1
 1001e30:	8c400044 	addi	r17,r17,1
 1001e34:	28bfffc4 	addi	r2,r5,-1
 1001e38:	1887883a 	add	r3,r3,r2
 1001e3c:	b0800115 	stw	r2,4(r22)
 1001e40:	b4000015 	stw	r16,0(r22)
 1001e44:	d8c02015 	stw	r3,128(sp)
 1001e48:	dc401f15 	stw	r17,124(sp)
 1001e4c:	008001c4 	movi	r2,7
 1001e50:	14414316 	blt	r2,r17,1002360 <___vfprintf_internal_r+0x15c4>
 1001e54:	b5800204 	addi	r22,r22,8
 1001e58:	d9003a17 	ldw	r4,232(sp)
 1001e5c:	df0022c4 	addi	fp,sp,139
 1001e60:	8c400044 	addi	r17,r17,1
 1001e64:	20c7883a 	add	r3,r4,r3
 1001e68:	b7000015 	stw	fp,0(r22)
 1001e6c:	b1000115 	stw	r4,4(r22)
 1001e70:	d8c02015 	stw	r3,128(sp)
 1001e74:	dc401f15 	stw	r17,124(sp)
 1001e78:	008001c4 	movi	r2,7
 1001e7c:	14400e16 	blt	r2,r17,1001eb8 <___vfprintf_internal_r+0x111c>
 1001e80:	b2000204 	addi	r8,r22,8
 1001e84:	003e3a06 	br	1001770 <___vfprintf_internal_r+0x9d4>
 1001e88:	01004074 	movhi	r4,257
 1001e8c:	213f6584 	addi	r4,r4,-618
 1001e90:	d9002b15 	stw	r4,172(sp)
 1001e94:	d9002b17 	ldw	r4,172(sp)
 1001e98:	1c07883a 	add	r3,r3,r16
 1001e9c:	44000115 	stw	r16,4(r8)
 1001ea0:	41000015 	stw	r4,0(r8)
 1001ea4:	10800044 	addi	r2,r2,1
 1001ea8:	d8c02015 	stw	r3,128(sp)
 1001eac:	d8801f15 	stw	r2,124(sp)
 1001eb0:	010001c4 	movi	r4,7
 1001eb4:	20be2d0e 	bge	r4,r2,100176c <___vfprintf_internal_r+0x9d0>
 1001eb8:	d9002c17 	ldw	r4,176(sp)
 1001ebc:	d9801e04 	addi	r6,sp,120
 1001ec0:	b80b883a 	mov	r5,r23
 1001ec4:	10083980 	call	1008398 <__sprint_r>
 1001ec8:	103cb61e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1001ecc:	d8c02017 	ldw	r3,128(sp)
 1001ed0:	da000404 	addi	r8,sp,16
 1001ed4:	003e2606 	br	1001770 <___vfprintf_internal_r+0x9d4>
 1001ed8:	d9002c17 	ldw	r4,176(sp)
 1001edc:	d9801e04 	addi	r6,sp,120
 1001ee0:	b80b883a 	mov	r5,r23
 1001ee4:	10083980 	call	1008398 <__sprint_r>
 1001ee8:	103e5d26 	beq	r2,zero,1001860 <___vfprintf_internal_r+0xac4>
 1001eec:	003cad06 	br	10011a4 <___vfprintf_internal_r+0x408>
 1001ef0:	d9002c17 	ldw	r4,176(sp)
 1001ef4:	d9801e04 	addi	r6,sp,120
 1001ef8:	b80b883a 	mov	r5,r23
 1001efc:	10083980 	call	1008398 <__sprint_r>
 1001f00:	103ca81e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1001f04:	d8c02017 	ldw	r3,128(sp)
 1001f08:	da000404 	addi	r8,sp,16
 1001f0c:	003e0b06 	br	100173c <___vfprintf_internal_r+0x9a0>
 1001f10:	d9002c17 	ldw	r4,176(sp)
 1001f14:	d9801e04 	addi	r6,sp,120
 1001f18:	b80b883a 	mov	r5,r23
 1001f1c:	10083980 	call	1008398 <__sprint_r>
 1001f20:	103ca01e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1001f24:	d8c02017 	ldw	r3,128(sp)
 1001f28:	da000404 	addi	r8,sp,16
 1001f2c:	003dbd06 	br	1001624 <___vfprintf_internal_r+0x888>
 1001f30:	d9002c17 	ldw	r4,176(sp)
 1001f34:	d9801e04 	addi	r6,sp,120
 1001f38:	b80b883a 	mov	r5,r23
 1001f3c:	10083980 	call	1008398 <__sprint_r>
 1001f40:	103c981e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1001f44:	d8c02017 	ldw	r3,128(sp)
 1001f48:	da000404 	addi	r8,sp,16
 1001f4c:	003dc306 	br	100165c <___vfprintf_internal_r+0x8c0>
 1001f50:	d8802917 	ldw	r2,164(sp)
 1001f54:	d8002785 	stb	zero,158(sp)
 1001f58:	103f0616 	blt	r2,zero,1001b74 <___vfprintf_internal_r+0xdd8>
 1001f5c:	00ffdfc4 	movi	r3,-129
 1001f60:	9d84b03a 	or	r2,r19,r22
 1001f64:	90e4703a 	and	r18,r18,r3
 1001f68:	103c6b26 	beq	r2,zero,1001118 <___vfprintf_internal_r+0x37c>
 1001f6c:	0039883a 	mov	fp,zero
 1001f70:	003e7406 	br	1001944 <___vfprintf_internal_r+0xba8>
 1001f74:	9080040c 	andi	r2,r18,16
 1001f78:	1001b326 	beq	r2,zero,1002648 <___vfprintf_internal_r+0x18ac>
 1001f7c:	d9002d17 	ldw	r4,180(sp)
 1001f80:	d9402917 	ldw	r5,164(sp)
 1001f84:	d8002785 	stb	zero,158(sp)
 1001f88:	20800104 	addi	r2,r4,4
 1001f8c:	24c00017 	ldw	r19,0(r4)
 1001f90:	002d883a 	mov	r22,zero
 1001f94:	2801b516 	blt	r5,zero,100266c <___vfprintf_internal_r+0x18d0>
 1001f98:	00ffdfc4 	movi	r3,-129
 1001f9c:	d8802d15 	stw	r2,180(sp)
 1001fa0:	90e4703a 	and	r18,r18,r3
 1001fa4:	983d2726 	beq	r19,zero,1001444 <___vfprintf_internal_r+0x6a8>
 1001fa8:	0039883a 	mov	fp,zero
 1001fac:	003d2a06 	br	1001458 <___vfprintf_internal_r+0x6bc>
 1001fb0:	dc402617 	ldw	r17,152(sp)
 1001fb4:	0441d30e 	bge	zero,r17,1002704 <___vfprintf_internal_r+0x1968>
 1001fb8:	dc403217 	ldw	r17,200(sp)
 1001fbc:	d8803317 	ldw	r2,204(sp)
 1001fc0:	1440010e 	bge	r2,r17,1001fc8 <___vfprintf_internal_r+0x122c>
 1001fc4:	1023883a 	mov	r17,r2
 1001fc8:	04400a0e 	bge	zero,r17,1001ff4 <___vfprintf_internal_r+0x1258>
 1001fcc:	d8801f17 	ldw	r2,124(sp)
 1001fd0:	1c47883a 	add	r3,r3,r17
 1001fd4:	44000015 	stw	r16,0(r8)
 1001fd8:	10800044 	addi	r2,r2,1
 1001fdc:	44400115 	stw	r17,4(r8)
 1001fe0:	d8c02015 	stw	r3,128(sp)
 1001fe4:	d8801f15 	stw	r2,124(sp)
 1001fe8:	010001c4 	movi	r4,7
 1001fec:	20826516 	blt	r4,r2,1002984 <___vfprintf_internal_r+0x1be8>
 1001ff0:	42000204 	addi	r8,r8,8
 1001ff4:	88026116 	blt	r17,zero,100297c <___vfprintf_internal_r+0x1be0>
 1001ff8:	d9003217 	ldw	r4,200(sp)
 1001ffc:	2463c83a 	sub	r17,r4,r17
 1002000:	04407b0e 	bge	zero,r17,10021f0 <___vfprintf_internal_r+0x1454>
 1002004:	05800404 	movi	r22,16
 1002008:	d8801f17 	ldw	r2,124(sp)
 100200c:	b4419d0e 	bge	r22,r17,1002684 <___vfprintf_internal_r+0x18e8>
 1002010:	01004074 	movhi	r4,257
 1002014:	213f6584 	addi	r4,r4,-618
 1002018:	d9002b15 	stw	r4,172(sp)
 100201c:	070001c4 	movi	fp,7
 1002020:	dcc02c17 	ldw	r19,176(sp)
 1002024:	00000306 	br	1002034 <___vfprintf_internal_r+0x1298>
 1002028:	42000204 	addi	r8,r8,8
 100202c:	8c7ffc04 	addi	r17,r17,-16
 1002030:	b441970e 	bge	r22,r17,1002690 <___vfprintf_internal_r+0x18f4>
 1002034:	18c00404 	addi	r3,r3,16
 1002038:	10800044 	addi	r2,r2,1
 100203c:	45000015 	stw	r20,0(r8)
 1002040:	45800115 	stw	r22,4(r8)
 1002044:	d8c02015 	stw	r3,128(sp)
 1002048:	d8801f15 	stw	r2,124(sp)
 100204c:	e0bff60e 	bge	fp,r2,1002028 <___vfprintf_internal_r+0x128c>
 1002050:	d9801e04 	addi	r6,sp,120
 1002054:	b80b883a 	mov	r5,r23
 1002058:	9809883a 	mov	r4,r19
 100205c:	10083980 	call	1008398 <__sprint_r>
 1002060:	103c501e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1002064:	d8c02017 	ldw	r3,128(sp)
 1002068:	d8801f17 	ldw	r2,124(sp)
 100206c:	da000404 	addi	r8,sp,16
 1002070:	003fee06 	br	100202c <___vfprintf_internal_r+0x1290>
 1002074:	d9002c17 	ldw	r4,176(sp)
 1002078:	d9801e04 	addi	r6,sp,120
 100207c:	b80b883a 	mov	r5,r23
 1002080:	10083980 	call	1008398 <__sprint_r>
 1002084:	103c471e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1002088:	d8c02017 	ldw	r3,128(sp)
 100208c:	df002787 	ldb	fp,158(sp)
 1002090:	da000404 	addi	r8,sp,16
 1002094:	003d5606 	br	10015f0 <___vfprintf_internal_r+0x854>
 1002098:	9080040c 	andi	r2,r18,16
 100209c:	10016126 	beq	r2,zero,1002624 <___vfprintf_internal_r+0x1888>
 10020a0:	d8802d17 	ldw	r2,180(sp)
 10020a4:	14c00017 	ldw	r19,0(r2)
 10020a8:	10800104 	addi	r2,r2,4
 10020ac:	d8802d15 	stw	r2,180(sp)
 10020b0:	982dd7fa 	srai	r22,r19,31
 10020b4:	b005883a 	mov	r2,r22
 10020b8:	003c8206 	br	10012c4 <___vfprintf_internal_r+0x528>
 10020bc:	9080040c 	andi	r2,r18,16
 10020c0:	10003526 	beq	r2,zero,1002198 <___vfprintf_internal_r+0x13fc>
 10020c4:	d9402d17 	ldw	r5,180(sp)
 10020c8:	d8c02917 	ldw	r3,164(sp)
 10020cc:	d8002785 	stb	zero,158(sp)
 10020d0:	28800104 	addi	r2,r5,4
 10020d4:	2cc00017 	ldw	r19,0(r5)
 10020d8:	002d883a 	mov	r22,zero
 10020dc:	18003716 	blt	r3,zero,10021bc <___vfprintf_internal_r+0x1420>
 10020e0:	00ffdfc4 	movi	r3,-129
 10020e4:	d8802d15 	stw	r2,180(sp)
 10020e8:	90e4703a 	and	r18,r18,r3
 10020ec:	0039883a 	mov	fp,zero
 10020f0:	983df326 	beq	r19,zero,10018c0 <___vfprintf_internal_r+0xb24>
 10020f4:	00800244 	movi	r2,9
 10020f8:	14fc7b36 	bltu	r2,r19,10012e8 <___vfprintf_internal_r+0x54c>
 10020fc:	d8c02817 	ldw	r3,160(sp)
 1002100:	dc001dc4 	addi	r16,sp,119
 1002104:	9cc00c04 	addi	r19,r19,48
 1002108:	1c07c83a 	sub	r3,r3,r16
 100210c:	dcc01dc5 	stb	r19,119(sp)
 1002110:	d8c02e15 	stw	r3,184(sp)
 1002114:	003ce806 	br	10014b8 <___vfprintf_internal_r+0x71c>
 1002118:	d8803317 	ldw	r2,204(sp)
 100211c:	143fffc4 	addi	r16,r2,-1
 1002120:	043f4d0e 	bge	zero,r16,1001e58 <___vfprintf_internal_r+0x10bc>
 1002124:	07000404 	movi	fp,16
 1002128:	e400810e 	bge	fp,r16,1002330 <___vfprintf_internal_r+0x1594>
 100212c:	01404074 	movhi	r5,257
 1002130:	297f6584 	addi	r5,r5,-618
 1002134:	d9402b15 	stw	r5,172(sp)
 1002138:	01c001c4 	movi	r7,7
 100213c:	dcc02c17 	ldw	r19,176(sp)
 1002140:	00000306 	br	1002150 <___vfprintf_internal_r+0x13b4>
 1002144:	b5800204 	addi	r22,r22,8
 1002148:	843ffc04 	addi	r16,r16,-16
 100214c:	e4007b0e 	bge	fp,r16,100233c <___vfprintf_internal_r+0x15a0>
 1002150:	18c00404 	addi	r3,r3,16
 1002154:	8c400044 	addi	r17,r17,1
 1002158:	b5000015 	stw	r20,0(r22)
 100215c:	b7000115 	stw	fp,4(r22)
 1002160:	d8c02015 	stw	r3,128(sp)
 1002164:	dc401f15 	stw	r17,124(sp)
 1002168:	3c7ff60e 	bge	r7,r17,1002144 <___vfprintf_internal_r+0x13a8>
 100216c:	d9801e04 	addi	r6,sp,120
 1002170:	b80b883a 	mov	r5,r23
 1002174:	9809883a 	mov	r4,r19
 1002178:	d9c03c15 	stw	r7,240(sp)
 100217c:	10083980 	call	1008398 <__sprint_r>
 1002180:	d9c03c17 	ldw	r7,240(sp)
 1002184:	103c071e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1002188:	d8c02017 	ldw	r3,128(sp)
 100218c:	dc401f17 	ldw	r17,124(sp)
 1002190:	dd800404 	addi	r22,sp,16
 1002194:	003fec06 	br	1002148 <___vfprintf_internal_r+0x13ac>
 1002198:	9080100c 	andi	r2,r18,64
 100219c:	d8002785 	stb	zero,158(sp)
 10021a0:	10010e26 	beq	r2,zero,10025dc <___vfprintf_internal_r+0x1840>
 10021a4:	d9002d17 	ldw	r4,180(sp)
 10021a8:	d9402917 	ldw	r5,164(sp)
 10021ac:	002d883a 	mov	r22,zero
 10021b0:	20800104 	addi	r2,r4,4
 10021b4:	24c0000b 	ldhu	r19,0(r4)
 10021b8:	283fc90e 	bge	r5,zero,10020e0 <___vfprintf_internal_r+0x1344>
 10021bc:	d8802d15 	stw	r2,180(sp)
 10021c0:	0039883a 	mov	fp,zero
 10021c4:	9d84b03a 	or	r2,r19,r22
 10021c8:	103c461e 	bne	r2,zero,10012e4 <___vfprintf_internal_r+0x548>
 10021cc:	00800044 	movi	r2,1
 10021d0:	003e6c06 	br	1001b84 <___vfprintf_internal_r+0xde8>
 10021d4:	d9002c17 	ldw	r4,176(sp)
 10021d8:	d9801e04 	addi	r6,sp,120
 10021dc:	b80b883a 	mov	r5,r23
 10021e0:	10083980 	call	1008398 <__sprint_r>
 10021e4:	103bef1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10021e8:	d8c02017 	ldw	r3,128(sp)
 10021ec:	da000404 	addi	r8,sp,16
 10021f0:	d9003217 	ldw	r4,200(sp)
 10021f4:	d8802617 	ldw	r2,152(sp)
 10021f8:	d9403317 	ldw	r5,204(sp)
 10021fc:	8123883a 	add	r17,r16,r4
 1002200:	11400216 	blt	r2,r5,100220c <___vfprintf_internal_r+0x1470>
 1002204:	9100004c 	andi	r4,r18,1
 1002208:	20000d26 	beq	r4,zero,1002240 <___vfprintf_internal_r+0x14a4>
 100220c:	d9003717 	ldw	r4,220(sp)
 1002210:	d9403417 	ldw	r5,208(sp)
 1002214:	1907883a 	add	r3,r3,r4
 1002218:	d9001f17 	ldw	r4,124(sp)
 100221c:	41400015 	stw	r5,0(r8)
 1002220:	d9403717 	ldw	r5,220(sp)
 1002224:	21000044 	addi	r4,r4,1
 1002228:	d8c02015 	stw	r3,128(sp)
 100222c:	41400115 	stw	r5,4(r8)
 1002230:	d9001f15 	stw	r4,124(sp)
 1002234:	014001c4 	movi	r5,7
 1002238:	2901e816 	blt	r5,r4,10029dc <___vfprintf_internal_r+0x1c40>
 100223c:	42000204 	addi	r8,r8,8
 1002240:	d9003317 	ldw	r4,204(sp)
 1002244:	8121883a 	add	r16,r16,r4
 1002248:	2085c83a 	sub	r2,r4,r2
 100224c:	8461c83a 	sub	r16,r16,r17
 1002250:	1400010e 	bge	r2,r16,1002258 <___vfprintf_internal_r+0x14bc>
 1002254:	1021883a 	mov	r16,r2
 1002258:	04000a0e 	bge	zero,r16,1002284 <___vfprintf_internal_r+0x14e8>
 100225c:	d9001f17 	ldw	r4,124(sp)
 1002260:	1c07883a 	add	r3,r3,r16
 1002264:	44400015 	stw	r17,0(r8)
 1002268:	21000044 	addi	r4,r4,1
 100226c:	44000115 	stw	r16,4(r8)
 1002270:	d8c02015 	stw	r3,128(sp)
 1002274:	d9001f15 	stw	r4,124(sp)
 1002278:	014001c4 	movi	r5,7
 100227c:	2901fb16 	blt	r5,r4,1002a6c <___vfprintf_internal_r+0x1cd0>
 1002280:	42000204 	addi	r8,r8,8
 1002284:	8001f716 	blt	r16,zero,1002a64 <___vfprintf_internal_r+0x1cc8>
 1002288:	1421c83a 	sub	r16,r2,r16
 100228c:	043d380e 	bge	zero,r16,1001770 <___vfprintf_internal_r+0x9d4>
 1002290:	04400404 	movi	r17,16
 1002294:	d8801f17 	ldw	r2,124(sp)
 1002298:	8c3efb0e 	bge	r17,r16,1001e88 <___vfprintf_internal_r+0x10ec>
 100229c:	01404074 	movhi	r5,257
 10022a0:	297f6584 	addi	r5,r5,-618
 10022a4:	d9402b15 	stw	r5,172(sp)
 10022a8:	058001c4 	movi	r22,7
 10022ac:	dcc02c17 	ldw	r19,176(sp)
 10022b0:	00000306 	br	10022c0 <___vfprintf_internal_r+0x1524>
 10022b4:	42000204 	addi	r8,r8,8
 10022b8:	843ffc04 	addi	r16,r16,-16
 10022bc:	8c3ef50e 	bge	r17,r16,1001e94 <___vfprintf_internal_r+0x10f8>
 10022c0:	18c00404 	addi	r3,r3,16
 10022c4:	10800044 	addi	r2,r2,1
 10022c8:	45000015 	stw	r20,0(r8)
 10022cc:	44400115 	stw	r17,4(r8)
 10022d0:	d8c02015 	stw	r3,128(sp)
 10022d4:	d8801f15 	stw	r2,124(sp)
 10022d8:	b0bff60e 	bge	r22,r2,10022b4 <___vfprintf_internal_r+0x1518>
 10022dc:	d9801e04 	addi	r6,sp,120
 10022e0:	b80b883a 	mov	r5,r23
 10022e4:	9809883a 	mov	r4,r19
 10022e8:	10083980 	call	1008398 <__sprint_r>
 10022ec:	103bad1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10022f0:	d8c02017 	ldw	r3,128(sp)
 10022f4:	d8801f17 	ldw	r2,124(sp)
 10022f8:	da000404 	addi	r8,sp,16
 10022fc:	003fee06 	br	10022b8 <___vfprintf_internal_r+0x151c>
 1002300:	9088703a 	and	r4,r18,r2
 1002304:	203eab1e 	bne	r4,zero,1001db4 <___vfprintf_internal_r+0x1018>
 1002308:	dc401f17 	ldw	r17,124(sp)
 100230c:	40800115 	stw	r2,4(r8)
 1002310:	44000015 	stw	r16,0(r8)
 1002314:	8c400044 	addi	r17,r17,1
 1002318:	d8c02015 	stw	r3,128(sp)
 100231c:	dc401f15 	stw	r17,124(sp)
 1002320:	008001c4 	movi	r2,7
 1002324:	14400e16 	blt	r2,r17,1002360 <___vfprintf_internal_r+0x15c4>
 1002328:	45800204 	addi	r22,r8,8
 100232c:	003eca06 	br	1001e58 <___vfprintf_internal_r+0x10bc>
 1002330:	01004074 	movhi	r4,257
 1002334:	213f6584 	addi	r4,r4,-618
 1002338:	d9002b15 	stw	r4,172(sp)
 100233c:	d8802b17 	ldw	r2,172(sp)
 1002340:	1c07883a 	add	r3,r3,r16
 1002344:	8c400044 	addi	r17,r17,1
 1002348:	b0800015 	stw	r2,0(r22)
 100234c:	b4000115 	stw	r16,4(r22)
 1002350:	d8c02015 	stw	r3,128(sp)
 1002354:	dc401f15 	stw	r17,124(sp)
 1002358:	008001c4 	movi	r2,7
 100235c:	147ebd0e 	bge	r2,r17,1001e54 <___vfprintf_internal_r+0x10b8>
 1002360:	d9002c17 	ldw	r4,176(sp)
 1002364:	d9801e04 	addi	r6,sp,120
 1002368:	b80b883a 	mov	r5,r23
 100236c:	10083980 	call	1008398 <__sprint_r>
 1002370:	103b8c1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1002374:	d8c02017 	ldw	r3,128(sp)
 1002378:	dc401f17 	ldw	r17,124(sp)
 100237c:	dd800404 	addi	r22,sp,16
 1002380:	003eb506 	br	1001e58 <___vfprintf_internal_r+0x10bc>
 1002384:	d9002c17 	ldw	r4,176(sp)
 1002388:	d9801e04 	addi	r6,sp,120
 100238c:	b80b883a 	mov	r5,r23
 1002390:	10083980 	call	1008398 <__sprint_r>
 1002394:	103b831e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1002398:	d8c02017 	ldw	r3,128(sp)
 100239c:	dc401f17 	ldw	r17,124(sp)
 10023a0:	da000404 	addi	r8,sp,16
 10023a4:	003e8d06 	br	1001ddc <___vfprintf_internal_r+0x1040>
 10023a8:	d9002c17 	ldw	r4,176(sp)
 10023ac:	d9801e04 	addi	r6,sp,120
 10023b0:	b80b883a 	mov	r5,r23
 10023b4:	10083980 	call	1008398 <__sprint_r>
 10023b8:	103b7a1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10023bc:	d8c02017 	ldw	r3,128(sp)
 10023c0:	dc401f17 	ldw	r17,124(sp)
 10023c4:	dd800404 	addi	r22,sp,16
 10023c8:	003e8f06 	br	1001e08 <___vfprintf_internal_r+0x106c>
 10023cc:	0027883a 	mov	r19,zero
 10023d0:	003f4a06 	br	10020fc <___vfprintf_internal_r+0x1360>
 10023d4:	d9002c17 	ldw	r4,176(sp)
 10023d8:	d9801e04 	addi	r6,sp,120
 10023dc:	b80b883a 	mov	r5,r23
 10023e0:	10083980 	call	1008398 <__sprint_r>
 10023e4:	103b6f1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10023e8:	d8c02017 	ldw	r3,128(sp)
 10023ec:	da000404 	addi	r8,sp,16
 10023f0:	003c9d06 	br	1001668 <___vfprintf_internal_r+0x8cc>
 10023f4:	04e7c83a 	sub	r19,zero,r19
 10023f8:	9804c03a 	cmpne	r2,r19,zero
 10023fc:	05adc83a 	sub	r22,zero,r22
 1002400:	b0adc83a 	sub	r22,r22,r2
 1002404:	d8802917 	ldw	r2,164(sp)
 1002408:	07000b44 	movi	fp,45
 100240c:	df002785 	stb	fp,158(sp)
 1002410:	10017b16 	blt	r2,zero,1002a00 <___vfprintf_internal_r+0x1c64>
 1002414:	00bfdfc4 	movi	r2,-129
 1002418:	90a4703a 	and	r18,r18,r2
 100241c:	003bb106 	br	10012e4 <___vfprintf_internal_r+0x548>
 1002420:	d9003617 	ldw	r4,216(sp)
 1002424:	d9403817 	ldw	r5,224(sp)
 1002428:	da003d15 	stw	r8,244(sp)
 100242c:	1007fbc0 	call	1007fbc <__fpclassifyd>
 1002430:	da003d17 	ldw	r8,244(sp)
 1002434:	1000f026 	beq	r2,zero,10027f8 <___vfprintf_internal_r+0x1a5c>
 1002438:	d9002917 	ldw	r4,164(sp)
 100243c:	05bff7c4 	movi	r22,-33
 1002440:	00bfffc4 	movi	r2,-1
 1002444:	8dac703a 	and	r22,r17,r22
 1002448:	20820026 	beq	r4,r2,1002c4c <___vfprintf_internal_r+0x1eb0>
 100244c:	008011c4 	movi	r2,71
 1002450:	b081f726 	beq	r22,r2,1002c30 <___vfprintf_internal_r+0x1e94>
 1002454:	d9003817 	ldw	r4,224(sp)
 1002458:	90c04014 	ori	r3,r18,256
 100245c:	d8c02b15 	stw	r3,172(sp)
 1002460:	20021516 	blt	r4,zero,1002cb8 <___vfprintf_internal_r+0x1f1c>
 1002464:	dcc03817 	ldw	r19,224(sp)
 1002468:	d8002a05 	stb	zero,168(sp)
 100246c:	00801984 	movi	r2,102
 1002470:	8881f926 	beq	r17,r2,1002c58 <___vfprintf_internal_r+0x1ebc>
 1002474:	00801184 	movi	r2,70
 1002478:	88821c26 	beq	r17,r2,1002cec <___vfprintf_internal_r+0x1f50>
 100247c:	00801144 	movi	r2,69
 1002480:	b081ef26 	beq	r22,r2,1002c40 <___vfprintf_internal_r+0x1ea4>
 1002484:	d8c02917 	ldw	r3,164(sp)
 1002488:	d8802104 	addi	r2,sp,132
 100248c:	d8800315 	stw	r2,12(sp)
 1002490:	d9403617 	ldw	r5,216(sp)
 1002494:	d8802504 	addi	r2,sp,148
 1002498:	d9002c17 	ldw	r4,176(sp)
 100249c:	d8800215 	stw	r2,8(sp)
 10024a0:	d8802604 	addi	r2,sp,152
 10024a4:	d8c00015 	stw	r3,0(sp)
 10024a8:	d8800115 	stw	r2,4(sp)
 10024ac:	01c00084 	movi	r7,2
 10024b0:	980d883a 	mov	r6,r19
 10024b4:	d8c03c15 	stw	r3,240(sp)
 10024b8:	da003d15 	stw	r8,244(sp)
 10024bc:	10033c00 	call	10033c0 <_dtoa_r>
 10024c0:	1021883a 	mov	r16,r2
 10024c4:	008019c4 	movi	r2,103
 10024c8:	d8c03c17 	ldw	r3,240(sp)
 10024cc:	da003d17 	ldw	r8,244(sp)
 10024d0:	88817126 	beq	r17,r2,1002a98 <___vfprintf_internal_r+0x1cfc>
 10024d4:	008011c4 	movi	r2,71
 10024d8:	88829226 	beq	r17,r2,1002f24 <___vfprintf_internal_r+0x2188>
 10024dc:	80f9883a 	add	fp,r16,r3
 10024e0:	d9003617 	ldw	r4,216(sp)
 10024e4:	000d883a 	mov	r6,zero
 10024e8:	000f883a 	mov	r7,zero
 10024ec:	980b883a 	mov	r5,r19
 10024f0:	da003d15 	stw	r8,244(sp)
 10024f4:	100c0100 	call	100c010 <__eqdf2>
 10024f8:	da003d17 	ldw	r8,244(sp)
 10024fc:	10018d26 	beq	r2,zero,1002b34 <___vfprintf_internal_r+0x1d98>
 1002500:	d8802117 	ldw	r2,132(sp)
 1002504:	1700062e 	bgeu	r2,fp,1002520 <___vfprintf_internal_r+0x1784>
 1002508:	01000c04 	movi	r4,48
 100250c:	10c00044 	addi	r3,r2,1
 1002510:	d8c02115 	stw	r3,132(sp)
 1002514:	11000005 	stb	r4,0(r2)
 1002518:	d8802117 	ldw	r2,132(sp)
 100251c:	173ffb36 	bltu	r2,fp,100250c <___vfprintf_internal_r+0x1770>
 1002520:	1405c83a 	sub	r2,r2,r16
 1002524:	d8803315 	stw	r2,204(sp)
 1002528:	008011c4 	movi	r2,71
 100252c:	b0817626 	beq	r22,r2,1002b08 <___vfprintf_internal_r+0x1d6c>
 1002530:	00801944 	movi	r2,101
 1002534:	1442810e 	bge	r2,r17,1002f3c <___vfprintf_internal_r+0x21a0>
 1002538:	d8c02617 	ldw	r3,152(sp)
 100253c:	00801984 	movi	r2,102
 1002540:	d8c03215 	stw	r3,200(sp)
 1002544:	8881fe26 	beq	r17,r2,1002d40 <___vfprintf_internal_r+0x1fa4>
 1002548:	d8c03217 	ldw	r3,200(sp)
 100254c:	d9003317 	ldw	r4,204(sp)
 1002550:	1901dd16 	blt	r3,r4,1002cc8 <___vfprintf_internal_r+0x1f2c>
 1002554:	9480004c 	andi	r18,r18,1
 1002558:	90022b1e 	bne	r18,zero,1002e08 <___vfprintf_internal_r+0x206c>
 100255c:	1805883a 	mov	r2,r3
 1002560:	18028016 	blt	r3,zero,1002f64 <___vfprintf_internal_r+0x21c8>
 1002564:	d8c03217 	ldw	r3,200(sp)
 1002568:	044019c4 	movi	r17,103
 100256c:	d8c02e15 	stw	r3,184(sp)
 1002570:	df002a07 	ldb	fp,168(sp)
 1002574:	e001531e 	bne	fp,zero,1002ac4 <___vfprintf_internal_r+0x1d28>
 1002578:	df002783 	ldbu	fp,158(sp)
 100257c:	d8802a15 	stw	r2,168(sp)
 1002580:	dc802b17 	ldw	r18,172(sp)
 1002584:	d8002915 	stw	zero,164(sp)
 1002588:	003bd106 	br	10014d0 <___vfprintf_internal_r+0x734>
 100258c:	d8802d17 	ldw	r2,180(sp)
 1002590:	d8c02d17 	ldw	r3,180(sp)
 1002594:	d9002d17 	ldw	r4,180(sp)
 1002598:	10800017 	ldw	r2,0(r2)
 100259c:	18c00117 	ldw	r3,4(r3)
 10025a0:	21000204 	addi	r4,r4,8
 10025a4:	d8803615 	stw	r2,216(sp)
 10025a8:	d8c03815 	stw	r3,224(sp)
 10025ac:	d9002d15 	stw	r4,180(sp)
 10025b0:	003b7506 	br	1001388 <___vfprintf_internal_r+0x5ec>
 10025b4:	ac400007 	ldb	r17,0(r21)
 10025b8:	003a5906 	br	1000f20 <___vfprintf_internal_r+0x184>
 10025bc:	9080100c 	andi	r2,r18,64
 10025c0:	1000a826 	beq	r2,zero,1002864 <___vfprintf_internal_r+0x1ac8>
 10025c4:	d9002d17 	ldw	r4,180(sp)
 10025c8:	002d883a 	mov	r22,zero
 10025cc:	24c0000b 	ldhu	r19,0(r4)
 10025d0:	21000104 	addi	r4,r4,4
 10025d4:	d9002d15 	stw	r4,180(sp)
 10025d8:	003ccb06 	br	1001908 <___vfprintf_internal_r+0xb6c>
 10025dc:	d8c02d17 	ldw	r3,180(sp)
 10025e0:	d9002917 	ldw	r4,164(sp)
 10025e4:	002d883a 	mov	r22,zero
 10025e8:	18800104 	addi	r2,r3,4
 10025ec:	1cc00017 	ldw	r19,0(r3)
 10025f0:	203ebb0e 	bge	r4,zero,10020e0 <___vfprintf_internal_r+0x1344>
 10025f4:	003ef106 	br	10021bc <___vfprintf_internal_r+0x1420>
 10025f8:	9080040c 	andi	r2,r18,16
 10025fc:	1000921e 	bne	r2,zero,1002848 <___vfprintf_internal_r+0x1aac>
 1002600:	9480100c 	andi	r18,r18,64
 1002604:	90013926 	beq	r18,zero,1002aec <___vfprintf_internal_r+0x1d50>
 1002608:	d9002d17 	ldw	r4,180(sp)
 100260c:	d9402f17 	ldw	r5,188(sp)
 1002610:	20800017 	ldw	r2,0(r4)
 1002614:	21000104 	addi	r4,r4,4
 1002618:	d9002d15 	stw	r4,180(sp)
 100261c:	1140000d 	sth	r5,0(r2)
 1002620:	003a1606 	br	1000e7c <___vfprintf_internal_r+0xe0>
 1002624:	9080100c 	andi	r2,r18,64
 1002628:	10008026 	beq	r2,zero,100282c <___vfprintf_internal_r+0x1a90>
 100262c:	d8c02d17 	ldw	r3,180(sp)
 1002630:	1cc0000f 	ldh	r19,0(r3)
 1002634:	18c00104 	addi	r3,r3,4
 1002638:	d8c02d15 	stw	r3,180(sp)
 100263c:	982dd7fa 	srai	r22,r19,31
 1002640:	b005883a 	mov	r2,r22
 1002644:	003b1f06 	br	10012c4 <___vfprintf_internal_r+0x528>
 1002648:	9080100c 	andi	r2,r18,64
 100264c:	d8002785 	stb	zero,158(sp)
 1002650:	10008a1e 	bne	r2,zero,100287c <___vfprintf_internal_r+0x1ae0>
 1002654:	d9402d17 	ldw	r5,180(sp)
 1002658:	d8c02917 	ldw	r3,164(sp)
 100265c:	002d883a 	mov	r22,zero
 1002660:	28800104 	addi	r2,r5,4
 1002664:	2cc00017 	ldw	r19,0(r5)
 1002668:	183e4b0e 	bge	r3,zero,1001f98 <___vfprintf_internal_r+0x11fc>
 100266c:	9d86b03a 	or	r3,r19,r22
 1002670:	d8802d15 	stw	r2,180(sp)
 1002674:	183e4c1e 	bne	r3,zero,1001fa8 <___vfprintf_internal_r+0x120c>
 1002678:	0039883a 	mov	fp,zero
 100267c:	0005883a 	mov	r2,zero
 1002680:	003d4006 	br	1001b84 <___vfprintf_internal_r+0xde8>
 1002684:	01404074 	movhi	r5,257
 1002688:	297f6584 	addi	r5,r5,-618
 100268c:	d9402b15 	stw	r5,172(sp)
 1002690:	d9402b17 	ldw	r5,172(sp)
 1002694:	1c47883a 	add	r3,r3,r17
 1002698:	10800044 	addi	r2,r2,1
 100269c:	41400015 	stw	r5,0(r8)
 10026a0:	44400115 	stw	r17,4(r8)
 10026a4:	d8c02015 	stw	r3,128(sp)
 10026a8:	d8801f15 	stw	r2,124(sp)
 10026ac:	010001c4 	movi	r4,7
 10026b0:	20bec816 	blt	r4,r2,10021d4 <___vfprintf_internal_r+0x1438>
 10026b4:	42000204 	addi	r8,r8,8
 10026b8:	003ecd06 	br	10021f0 <___vfprintf_internal_r+0x1454>
 10026bc:	d9002917 	ldw	r4,164(sp)
 10026c0:	d8002785 	stb	zero,158(sp)
 10026c4:	203d2d16 	blt	r4,zero,1001b7c <___vfprintf_internal_r+0xde0>
 10026c8:	00bfdfc4 	movi	r2,-129
 10026cc:	90a4703a 	and	r18,r18,r2
 10026d0:	003a9106 	br	1001118 <___vfprintf_internal_r+0x37c>
 10026d4:	01004074 	movhi	r4,257
 10026d8:	213f6584 	addi	r4,r4,-618
 10026dc:	d9002b15 	stw	r4,172(sp)
 10026e0:	003c0c06 	br	1001714 <___vfprintf_internal_r+0x978>
 10026e4:	d9002c17 	ldw	r4,176(sp)
 10026e8:	d9801e04 	addi	r6,sp,120
 10026ec:	b80b883a 	mov	r5,r23
 10026f0:	10083980 	call	1008398 <__sprint_r>
 10026f4:	103aab1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10026f8:	d8c02017 	ldw	r3,128(sp)
 10026fc:	da000404 	addi	r8,sp,16
 1002700:	003d4106 	br	1001c08 <___vfprintf_internal_r+0xe6c>
 1002704:	d8801f17 	ldw	r2,124(sp)
 1002708:	01404074 	movhi	r5,257
 100270c:	01000044 	movi	r4,1
 1002710:	18c00044 	addi	r3,r3,1
 1002714:	10800044 	addi	r2,r2,1
 1002718:	297f6504 	addi	r5,r5,-620
 100271c:	41000115 	stw	r4,4(r8)
 1002720:	41400015 	stw	r5,0(r8)
 1002724:	d8c02015 	stw	r3,128(sp)
 1002728:	d8801f15 	stw	r2,124(sp)
 100272c:	010001c4 	movi	r4,7
 1002730:	20805c16 	blt	r4,r2,10028a4 <___vfprintf_internal_r+0x1b08>
 1002734:	42000204 	addi	r8,r8,8
 1002738:	8800041e 	bne	r17,zero,100274c <___vfprintf_internal_r+0x19b0>
 100273c:	d8803317 	ldw	r2,204(sp)
 1002740:	1000021e 	bne	r2,zero,100274c <___vfprintf_internal_r+0x19b0>
 1002744:	9080004c 	andi	r2,r18,1
 1002748:	103c0926 	beq	r2,zero,1001770 <___vfprintf_internal_r+0x9d4>
 100274c:	d9003717 	ldw	r4,220(sp)
 1002750:	d8801f17 	ldw	r2,124(sp)
 1002754:	d9403417 	ldw	r5,208(sp)
 1002758:	20c7883a 	add	r3,r4,r3
 100275c:	10800044 	addi	r2,r2,1
 1002760:	41000115 	stw	r4,4(r8)
 1002764:	41400015 	stw	r5,0(r8)
 1002768:	d8c02015 	stw	r3,128(sp)
 100276c:	d8801f15 	stw	r2,124(sp)
 1002770:	010001c4 	movi	r4,7
 1002774:	20812116 	blt	r4,r2,1002bfc <___vfprintf_internal_r+0x1e60>
 1002778:	42000204 	addi	r8,r8,8
 100277c:	0463c83a 	sub	r17,zero,r17
 1002780:	0440730e 	bge	zero,r17,1002950 <___vfprintf_internal_r+0x1bb4>
 1002784:	05800404 	movi	r22,16
 1002788:	b440860e 	bge	r22,r17,10029a4 <___vfprintf_internal_r+0x1c08>
 100278c:	01404074 	movhi	r5,257
 1002790:	297f6584 	addi	r5,r5,-618
 1002794:	d9402b15 	stw	r5,172(sp)
 1002798:	070001c4 	movi	fp,7
 100279c:	dcc02c17 	ldw	r19,176(sp)
 10027a0:	00000306 	br	10027b0 <___vfprintf_internal_r+0x1a14>
 10027a4:	42000204 	addi	r8,r8,8
 10027a8:	8c7ffc04 	addi	r17,r17,-16
 10027ac:	b440800e 	bge	r22,r17,10029b0 <___vfprintf_internal_r+0x1c14>
 10027b0:	18c00404 	addi	r3,r3,16
 10027b4:	10800044 	addi	r2,r2,1
 10027b8:	45000015 	stw	r20,0(r8)
 10027bc:	45800115 	stw	r22,4(r8)
 10027c0:	d8c02015 	stw	r3,128(sp)
 10027c4:	d8801f15 	stw	r2,124(sp)
 10027c8:	e0bff60e 	bge	fp,r2,10027a4 <___vfprintf_internal_r+0x1a08>
 10027cc:	d9801e04 	addi	r6,sp,120
 10027d0:	b80b883a 	mov	r5,r23
 10027d4:	9809883a 	mov	r4,r19
 10027d8:	10083980 	call	1008398 <__sprint_r>
 10027dc:	103a711e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10027e0:	d8c02017 	ldw	r3,128(sp)
 10027e4:	d8801f17 	ldw	r2,124(sp)
 10027e8:	da000404 	addi	r8,sp,16
 10027ec:	003fee06 	br	10027a8 <___vfprintf_internal_r+0x1a0c>
 10027f0:	00bfffc4 	movi	r2,-1
 10027f4:	003a6f06 	br	10011b4 <___vfprintf_internal_r+0x418>
 10027f8:	008011c4 	movi	r2,71
 10027fc:	1440b816 	blt	r2,r17,1002ae0 <___vfprintf_internal_r+0x1d44>
 1002800:	04004074 	movhi	r16,257
 1002804:	843f5704 	addi	r16,r16,-676
 1002808:	00c000c4 	movi	r3,3
 100280c:	00bfdfc4 	movi	r2,-129
 1002810:	d8c02a15 	stw	r3,168(sp)
 1002814:	90a4703a 	and	r18,r18,r2
 1002818:	df002783 	ldbu	fp,158(sp)
 100281c:	d8c02e15 	stw	r3,184(sp)
 1002820:	d8002915 	stw	zero,164(sp)
 1002824:	d8003215 	stw	zero,200(sp)
 1002828:	003b2906 	br	10014d0 <___vfprintf_internal_r+0x734>
 100282c:	d9002d17 	ldw	r4,180(sp)
 1002830:	24c00017 	ldw	r19,0(r4)
 1002834:	21000104 	addi	r4,r4,4
 1002838:	d9002d15 	stw	r4,180(sp)
 100283c:	982dd7fa 	srai	r22,r19,31
 1002840:	b005883a 	mov	r2,r22
 1002844:	003a9f06 	br	10012c4 <___vfprintf_internal_r+0x528>
 1002848:	d9402d17 	ldw	r5,180(sp)
 100284c:	d8c02f17 	ldw	r3,188(sp)
 1002850:	28800017 	ldw	r2,0(r5)
 1002854:	29400104 	addi	r5,r5,4
 1002858:	d9402d15 	stw	r5,180(sp)
 100285c:	10c00015 	stw	r3,0(r2)
 1002860:	00398606 	br	1000e7c <___vfprintf_internal_r+0xe0>
 1002864:	d9402d17 	ldw	r5,180(sp)
 1002868:	002d883a 	mov	r22,zero
 100286c:	2cc00017 	ldw	r19,0(r5)
 1002870:	29400104 	addi	r5,r5,4
 1002874:	d9402d15 	stw	r5,180(sp)
 1002878:	003c2306 	br	1001908 <___vfprintf_internal_r+0xb6c>
 100287c:	d8c02d17 	ldw	r3,180(sp)
 1002880:	d9002917 	ldw	r4,164(sp)
 1002884:	002d883a 	mov	r22,zero
 1002888:	18800104 	addi	r2,r3,4
 100288c:	1cc0000b 	ldhu	r19,0(r3)
 1002890:	203dc10e 	bge	r4,zero,1001f98 <___vfprintf_internal_r+0x11fc>
 1002894:	003f7506 	br	100266c <___vfprintf_internal_r+0x18d0>
 1002898:	04004074 	movhi	r16,257
 100289c:	843f5504 	addi	r16,r16,-684
 10028a0:	003acc06 	br	10013d4 <___vfprintf_internal_r+0x638>
 10028a4:	d9002c17 	ldw	r4,176(sp)
 10028a8:	d9801e04 	addi	r6,sp,120
 10028ac:	b80b883a 	mov	r5,r23
 10028b0:	10083980 	call	1008398 <__sprint_r>
 10028b4:	103a3b1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10028b8:	dc402617 	ldw	r17,152(sp)
 10028bc:	d8c02017 	ldw	r3,128(sp)
 10028c0:	da000404 	addi	r8,sp,16
 10028c4:	003f9c06 	br	1002738 <___vfprintf_internal_r+0x199c>
 10028c8:	ac400043 	ldbu	r17,1(r21)
 10028cc:	94800814 	ori	r18,r18,32
 10028d0:	ad400044 	addi	r21,r21,1
 10028d4:	8c403fcc 	andi	r17,r17,255
 10028d8:	8c40201c 	xori	r17,r17,128
 10028dc:	8c7fe004 	addi	r17,r17,-128
 10028e0:	00398f06 	br	1000f20 <___vfprintf_internal_r+0x184>
 10028e4:	d8c02d15 	stw	r3,180(sp)
 10028e8:	0039883a 	mov	fp,zero
 10028ec:	003e3506 	br	10021c4 <___vfprintf_internal_r+0x1428>
 10028f0:	d9002c17 	ldw	r4,176(sp)
 10028f4:	d9801e04 	addi	r6,sp,120
 10028f8:	b80b883a 	mov	r5,r23
 10028fc:	10083980 	call	1008398 <__sprint_r>
 1002900:	103a281e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1002904:	d8c02017 	ldw	r3,128(sp)
 1002908:	da000404 	addi	r8,sp,16
 100290c:	003cd006 	br	1001c50 <___vfprintf_internal_r+0xeb4>
 1002910:	8009883a 	mov	r4,r16
 1002914:	da003d15 	stw	r8,244(sp)
 1002918:	1000d040 	call	1000d04 <strlen>
 100291c:	d8802e15 	stw	r2,184(sp)
 1002920:	da003d17 	ldw	r8,244(sp)
 1002924:	103c340e 	bge	r2,zero,10019f8 <___vfprintf_internal_r+0xc5c>
 1002928:	0005883a 	mov	r2,zero
 100292c:	003c3206 	br	10019f8 <___vfprintf_internal_r+0xc5c>
 1002930:	d9002c17 	ldw	r4,176(sp)
 1002934:	d9801e04 	addi	r6,sp,120
 1002938:	b80b883a 	mov	r5,r23
 100293c:	10083980 	call	1008398 <__sprint_r>
 1002940:	103a181e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1002944:	d8c02017 	ldw	r3,128(sp)
 1002948:	d8801f17 	ldw	r2,124(sp)
 100294c:	da000404 	addi	r8,sp,16
 1002950:	d9403317 	ldw	r5,204(sp)
 1002954:	10800044 	addi	r2,r2,1
 1002958:	44000015 	stw	r16,0(r8)
 100295c:	28c7883a 	add	r3,r5,r3
 1002960:	003b7d06 	br	1001758 <___vfprintf_internal_r+0x9bc>
 1002964:	01004074 	movhi	r4,257
 1002968:	213f6984 	addi	r4,r4,-602
 100296c:	d9003515 	stw	r4,212(sp)
 1002970:	003b1406 	br	10015c4 <___vfprintf_internal_r+0x828>
 1002974:	013fffc4 	movi	r4,-1
 1002978:	003a3506 	br	1001250 <___vfprintf_internal_r+0x4b4>
 100297c:	0023883a 	mov	r17,zero
 1002980:	003d9d06 	br	1001ff8 <___vfprintf_internal_r+0x125c>
 1002984:	d9002c17 	ldw	r4,176(sp)
 1002988:	d9801e04 	addi	r6,sp,120
 100298c:	b80b883a 	mov	r5,r23
 1002990:	10083980 	call	1008398 <__sprint_r>
 1002994:	103a031e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1002998:	d8c02017 	ldw	r3,128(sp)
 100299c:	da000404 	addi	r8,sp,16
 10029a0:	003d9406 	br	1001ff4 <___vfprintf_internal_r+0x1258>
 10029a4:	01004074 	movhi	r4,257
 10029a8:	213f6584 	addi	r4,r4,-618
 10029ac:	d9002b15 	stw	r4,172(sp)
 10029b0:	d9002b17 	ldw	r4,172(sp)
 10029b4:	1c47883a 	add	r3,r3,r17
 10029b8:	10800044 	addi	r2,r2,1
 10029bc:	41000015 	stw	r4,0(r8)
 10029c0:	44400115 	stw	r17,4(r8)
 10029c4:	d8c02015 	stw	r3,128(sp)
 10029c8:	d8801f15 	stw	r2,124(sp)
 10029cc:	010001c4 	movi	r4,7
 10029d0:	20bfd716 	blt	r4,r2,1002930 <___vfprintf_internal_r+0x1b94>
 10029d4:	42000204 	addi	r8,r8,8
 10029d8:	003fdd06 	br	1002950 <___vfprintf_internal_r+0x1bb4>
 10029dc:	d9002c17 	ldw	r4,176(sp)
 10029e0:	d9801e04 	addi	r6,sp,120
 10029e4:	b80b883a 	mov	r5,r23
 10029e8:	10083980 	call	1008398 <__sprint_r>
 10029ec:	1039ed1e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 10029f0:	d8802617 	ldw	r2,152(sp)
 10029f4:	d8c02017 	ldw	r3,128(sp)
 10029f8:	da000404 	addi	r8,sp,16
 10029fc:	003e1006 	br	1002240 <___vfprintf_internal_r+0x14a4>
 1002a00:	00800044 	movi	r2,1
 1002a04:	10803fcc 	andi	r2,r2,255
 1002a08:	00c00044 	movi	r3,1
 1002a0c:	10fa3526 	beq	r2,r3,10012e4 <___vfprintf_internal_r+0x548>
 1002a10:	00c00084 	movi	r3,2
 1002a14:	10fbcb26 	beq	r2,r3,1001944 <___vfprintf_internal_r+0xba8>
 1002a18:	003a8f06 	br	1001458 <___vfprintf_internal_r+0x6bc>
 1002a1c:	01004074 	movhi	r4,257
 1002a20:	213f6984 	addi	r4,r4,-602
 1002a24:	d9003515 	stw	r4,212(sp)
 1002a28:	003b7606 	br	1001804 <___vfprintf_internal_r+0xa68>
 1002a2c:	d8802917 	ldw	r2,164(sp)
 1002a30:	00c00184 	movi	r3,6
 1002a34:	1880012e 	bgeu	r3,r2,1002a3c <___vfprintf_internal_r+0x1ca0>
 1002a38:	1805883a 	mov	r2,r3
 1002a3c:	d8802e15 	stw	r2,184(sp)
 1002a40:	1000ef16 	blt	r2,zero,1002e00 <___vfprintf_internal_r+0x2064>
 1002a44:	04004074 	movhi	r16,257
 1002a48:	d8802a15 	stw	r2,168(sp)
 1002a4c:	dcc02d15 	stw	r19,180(sp)
 1002a50:	d8002915 	stw	zero,164(sp)
 1002a54:	d8003215 	stw	zero,200(sp)
 1002a58:	843f6304 	addi	r16,r16,-628
 1002a5c:	0039883a 	mov	fp,zero
 1002a60:	003aa206 	br	10014ec <___vfprintf_internal_r+0x750>
 1002a64:	0021883a 	mov	r16,zero
 1002a68:	003e0706 	br	1002288 <___vfprintf_internal_r+0x14ec>
 1002a6c:	d9002c17 	ldw	r4,176(sp)
 1002a70:	d9801e04 	addi	r6,sp,120
 1002a74:	b80b883a 	mov	r5,r23
 1002a78:	10083980 	call	1008398 <__sprint_r>
 1002a7c:	1039c91e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1002a80:	d8802617 	ldw	r2,152(sp)
 1002a84:	d9403317 	ldw	r5,204(sp)
 1002a88:	d8c02017 	ldw	r3,128(sp)
 1002a8c:	da000404 	addi	r8,sp,16
 1002a90:	2885c83a 	sub	r2,r5,r2
 1002a94:	003dfb06 	br	1002284 <___vfprintf_internal_r+0x14e8>
 1002a98:	9080004c 	andi	r2,r18,1
 1002a9c:	103e8f1e 	bne	r2,zero,10024dc <___vfprintf_internal_r+0x1740>
 1002aa0:	d8802117 	ldw	r2,132(sp)
 1002aa4:	003e9e06 	br	1002520 <___vfprintf_internal_r+0x1784>
 1002aa8:	1025883a 	mov	r18,r2
 1002aac:	0039883a 	mov	fp,zero
 1002ab0:	00800084 	movi	r2,2
 1002ab4:	003fd306 	br	1002a04 <___vfprintf_internal_r+0x1c68>
 1002ab8:	07000b44 	movi	fp,45
 1002abc:	df002785 	stb	fp,158(sp)
 1002ac0:	003a4006 	br	10013c4 <___vfprintf_internal_r+0x628>
 1002ac4:	00c00b44 	movi	r3,45
 1002ac8:	d8c02785 	stb	r3,158(sp)
 1002acc:	d8802a15 	stw	r2,168(sp)
 1002ad0:	dc802b17 	ldw	r18,172(sp)
 1002ad4:	d8002915 	stw	zero,164(sp)
 1002ad8:	07000b44 	movi	fp,45
 1002adc:	003a8006 	br	10014e0 <___vfprintf_internal_r+0x744>
 1002ae0:	04004074 	movhi	r16,257
 1002ae4:	843f5804 	addi	r16,r16,-672
 1002ae8:	003f4706 	br	1002808 <___vfprintf_internal_r+0x1a6c>
 1002aec:	d8c02d17 	ldw	r3,180(sp)
 1002af0:	d9002f17 	ldw	r4,188(sp)
 1002af4:	18800017 	ldw	r2,0(r3)
 1002af8:	18c00104 	addi	r3,r3,4
 1002afc:	d8c02d15 	stw	r3,180(sp)
 1002b00:	11000015 	stw	r4,0(r2)
 1002b04:	0038dd06 	br	1000e7c <___vfprintf_internal_r+0xe0>
 1002b08:	dd802617 	ldw	r22,152(sp)
 1002b0c:	00bfff44 	movi	r2,-3
 1002b10:	b0801c16 	blt	r22,r2,1002b84 <___vfprintf_internal_r+0x1de8>
 1002b14:	d9402917 	ldw	r5,164(sp)
 1002b18:	2d801a16 	blt	r5,r22,1002b84 <___vfprintf_internal_r+0x1de8>
 1002b1c:	dd803215 	stw	r22,200(sp)
 1002b20:	003e8906 	br	1002548 <___vfprintf_internal_r+0x17ac>
 1002b24:	01004074 	movhi	r4,257
 1002b28:	213f6584 	addi	r4,r4,-618
 1002b2c:	d9002b15 	stw	r4,172(sp)
 1002b30:	003c9106 	br	1001d78 <___vfprintf_internal_r+0xfdc>
 1002b34:	e005883a 	mov	r2,fp
 1002b38:	003e7906 	br	1002520 <___vfprintf_internal_r+0x1784>
 1002b3c:	d9402917 	ldw	r5,164(sp)
 1002b40:	df002783 	ldbu	fp,158(sp)
 1002b44:	dcc02d15 	stw	r19,180(sp)
 1002b48:	d9402a15 	stw	r5,168(sp)
 1002b4c:	d9402e15 	stw	r5,184(sp)
 1002b50:	d8002915 	stw	zero,164(sp)
 1002b54:	d8003215 	stw	zero,200(sp)
 1002b58:	003a5d06 	br	10014d0 <___vfprintf_internal_r+0x734>
 1002b5c:	9080004c 	andi	r2,r18,1
 1002b60:	0039883a 	mov	fp,zero
 1002b64:	10000426 	beq	r2,zero,1002b78 <___vfprintf_internal_r+0x1ddc>
 1002b68:	00800c04 	movi	r2,48
 1002b6c:	dc001dc4 	addi	r16,sp,119
 1002b70:	d8801dc5 	stb	r2,119(sp)
 1002b74:	003b8006 	br	1001978 <___vfprintf_internal_r+0xbdc>
 1002b78:	d8002e15 	stw	zero,184(sp)
 1002b7c:	dc001e04 	addi	r16,sp,120
 1002b80:	003a4d06 	br	10014b8 <___vfprintf_internal_r+0x71c>
 1002b84:	8c7fff84 	addi	r17,r17,-2
 1002b88:	b5bfffc4 	addi	r22,r22,-1
 1002b8c:	dd802615 	stw	r22,152(sp)
 1002b90:	dc4022c5 	stb	r17,139(sp)
 1002b94:	b000bf16 	blt	r22,zero,1002e94 <___vfprintf_internal_r+0x20f8>
 1002b98:	00800ac4 	movi	r2,43
 1002b9c:	d8802305 	stb	r2,140(sp)
 1002ba0:	00800244 	movi	r2,9
 1002ba4:	15807016 	blt	r2,r22,1002d68 <___vfprintf_internal_r+0x1fcc>
 1002ba8:	00800c04 	movi	r2,48
 1002bac:	b5800c04 	addi	r22,r22,48
 1002bb0:	d8802345 	stb	r2,141(sp)
 1002bb4:	dd802385 	stb	r22,142(sp)
 1002bb8:	d88023c4 	addi	r2,sp,143
 1002bbc:	df0022c4 	addi	fp,sp,139
 1002bc0:	d8c03317 	ldw	r3,204(sp)
 1002bc4:	1739c83a 	sub	fp,r2,fp
 1002bc8:	d9003317 	ldw	r4,204(sp)
 1002bcc:	e0c7883a 	add	r3,fp,r3
 1002bd0:	df003a15 	stw	fp,232(sp)
 1002bd4:	d8c02e15 	stw	r3,184(sp)
 1002bd8:	00800044 	movi	r2,1
 1002bdc:	1100b30e 	bge	r2,r4,1002eac <___vfprintf_internal_r+0x2110>
 1002be0:	d8c02e17 	ldw	r3,184(sp)
 1002be4:	18c00044 	addi	r3,r3,1
 1002be8:	d8c02e15 	stw	r3,184(sp)
 1002bec:	1805883a 	mov	r2,r3
 1002bf0:	1800ac16 	blt	r3,zero,1002ea4 <___vfprintf_internal_r+0x2108>
 1002bf4:	d8003215 	stw	zero,200(sp)
 1002bf8:	003e5d06 	br	1002570 <___vfprintf_internal_r+0x17d4>
 1002bfc:	d9002c17 	ldw	r4,176(sp)
 1002c00:	d9801e04 	addi	r6,sp,120
 1002c04:	b80b883a 	mov	r5,r23
 1002c08:	10083980 	call	1008398 <__sprint_r>
 1002c0c:	1039651e 	bne	r2,zero,10011a4 <___vfprintf_internal_r+0x408>
 1002c10:	dc402617 	ldw	r17,152(sp)
 1002c14:	d8c02017 	ldw	r3,128(sp)
 1002c18:	d8801f17 	ldw	r2,124(sp)
 1002c1c:	da000404 	addi	r8,sp,16
 1002c20:	003ed606 	br	100277c <___vfprintf_internal_r+0x19e0>
 1002c24:	582b883a 	mov	r21,r11
 1002c28:	d8002915 	stw	zero,164(sp)
 1002c2c:	0038bd06 	br	1000f24 <___vfprintf_internal_r+0x188>
 1002c30:	d8802917 	ldw	r2,164(sp)
 1002c34:	103e071e 	bne	r2,zero,1002454 <___vfprintf_internal_r+0x16b8>
 1002c38:	dc002915 	stw	r16,164(sp)
 1002c3c:	003e0506 	br	1002454 <___vfprintf_internal_r+0x16b8>
 1002c40:	d9002917 	ldw	r4,164(sp)
 1002c44:	20c00044 	addi	r3,r4,1
 1002c48:	003e0f06 	br	1002488 <___vfprintf_internal_r+0x16ec>
 1002c4c:	01400184 	movi	r5,6
 1002c50:	d9402915 	stw	r5,164(sp)
 1002c54:	003dff06 	br	1002454 <___vfprintf_internal_r+0x16b8>
 1002c58:	d8802104 	addi	r2,sp,132
 1002c5c:	d8800315 	stw	r2,12(sp)
 1002c60:	d8802504 	addi	r2,sp,148
 1002c64:	d8800215 	stw	r2,8(sp)
 1002c68:	d8802604 	addi	r2,sp,152
 1002c6c:	d8800115 	stw	r2,4(sp)
 1002c70:	d8802917 	ldw	r2,164(sp)
 1002c74:	d9403617 	ldw	r5,216(sp)
 1002c78:	d9002c17 	ldw	r4,176(sp)
 1002c7c:	d8800015 	stw	r2,0(sp)
 1002c80:	01c000c4 	movi	r7,3
 1002c84:	980d883a 	mov	r6,r19
 1002c88:	da003d15 	stw	r8,244(sp)
 1002c8c:	10033c00 	call	10033c0 <_dtoa_r>
 1002c90:	d8c02917 	ldw	r3,164(sp)
 1002c94:	da003d17 	ldw	r8,244(sp)
 1002c98:	1021883a 	mov	r16,r2
 1002c9c:	10f9883a 	add	fp,r2,r3
 1002ca0:	81000007 	ldb	r4,0(r16)
 1002ca4:	00800c04 	movi	r2,48
 1002ca8:	20805e26 	beq	r4,r2,1002e24 <___vfprintf_internal_r+0x2088>
 1002cac:	d8c02617 	ldw	r3,152(sp)
 1002cb0:	e0f9883a 	add	fp,fp,r3
 1002cb4:	003e0a06 	br	10024e0 <___vfprintf_internal_r+0x1744>
 1002cb8:	00c00b44 	movi	r3,45
 1002cbc:	24e0003c 	xorhi	r19,r4,32768
 1002cc0:	d8c02a05 	stb	r3,168(sp)
 1002cc4:	003de906 	br	100246c <___vfprintf_internal_r+0x16d0>
 1002cc8:	d8c03217 	ldw	r3,200(sp)
 1002ccc:	00c07a0e 	bge	zero,r3,1002eb8 <___vfprintf_internal_r+0x211c>
 1002cd0:	00800044 	movi	r2,1
 1002cd4:	d9003317 	ldw	r4,204(sp)
 1002cd8:	1105883a 	add	r2,r2,r4
 1002cdc:	d8802e15 	stw	r2,184(sp)
 1002ce0:	10004e16 	blt	r2,zero,1002e1c <___vfprintf_internal_r+0x2080>
 1002ce4:	044019c4 	movi	r17,103
 1002ce8:	003e2106 	br	1002570 <___vfprintf_internal_r+0x17d4>
 1002cec:	d9002917 	ldw	r4,164(sp)
 1002cf0:	d8802104 	addi	r2,sp,132
 1002cf4:	d8800315 	stw	r2,12(sp)
 1002cf8:	d9000015 	stw	r4,0(sp)
 1002cfc:	d8802504 	addi	r2,sp,148
 1002d00:	d9403617 	ldw	r5,216(sp)
 1002d04:	d9002c17 	ldw	r4,176(sp)
 1002d08:	d8800215 	stw	r2,8(sp)
 1002d0c:	d8802604 	addi	r2,sp,152
 1002d10:	d8800115 	stw	r2,4(sp)
 1002d14:	01c000c4 	movi	r7,3
 1002d18:	980d883a 	mov	r6,r19
 1002d1c:	da003d15 	stw	r8,244(sp)
 1002d20:	10033c00 	call	10033c0 <_dtoa_r>
 1002d24:	d8c02917 	ldw	r3,164(sp)
 1002d28:	da003d17 	ldw	r8,244(sp)
 1002d2c:	1021883a 	mov	r16,r2
 1002d30:	00801184 	movi	r2,70
 1002d34:	80f9883a 	add	fp,r16,r3
 1002d38:	88bfd926 	beq	r17,r2,1002ca0 <___vfprintf_internal_r+0x1f04>
 1002d3c:	003de806 	br	10024e0 <___vfprintf_internal_r+0x1744>
 1002d40:	d9002917 	ldw	r4,164(sp)
 1002d44:	00c04d0e 	bge	zero,r3,1002e7c <___vfprintf_internal_r+0x20e0>
 1002d48:	2000441e 	bne	r4,zero,1002e5c <___vfprintf_internal_r+0x20c0>
 1002d4c:	9480004c 	andi	r18,r18,1
 1002d50:	9000421e 	bne	r18,zero,1002e5c <___vfprintf_internal_r+0x20c0>
 1002d54:	1805883a 	mov	r2,r3
 1002d58:	18007016 	blt	r3,zero,1002f1c <___vfprintf_internal_r+0x2180>
 1002d5c:	d8c03217 	ldw	r3,200(sp)
 1002d60:	d8c02e15 	stw	r3,184(sp)
 1002d64:	003e0206 	br	1002570 <___vfprintf_internal_r+0x17d4>
 1002d68:	df0022c4 	addi	fp,sp,139
 1002d6c:	dc002915 	stw	r16,164(sp)
 1002d70:	4027883a 	mov	r19,r8
 1002d74:	e021883a 	mov	r16,fp
 1002d78:	b009883a 	mov	r4,r22
 1002d7c:	01400284 	movi	r5,10
 1002d80:	100ad4c0 	call	100ad4c <__modsi3>
 1002d84:	10800c04 	addi	r2,r2,48
 1002d88:	843fffc4 	addi	r16,r16,-1
 1002d8c:	b009883a 	mov	r4,r22
 1002d90:	01400284 	movi	r5,10
 1002d94:	80800005 	stb	r2,0(r16)
 1002d98:	100acc80 	call	100acc8 <__divsi3>
 1002d9c:	102d883a 	mov	r22,r2
 1002da0:	00800244 	movi	r2,9
 1002da4:	15bff416 	blt	r2,r22,1002d78 <___vfprintf_internal_r+0x1fdc>
 1002da8:	9811883a 	mov	r8,r19
 1002dac:	b0800c04 	addi	r2,r22,48
 1002db0:	8027883a 	mov	r19,r16
 1002db4:	997fffc4 	addi	r5,r19,-1
 1002db8:	98bfffc5 	stb	r2,-1(r19)
 1002dbc:	dc002917 	ldw	r16,164(sp)
 1002dc0:	2f006a2e 	bgeu	r5,fp,1002f6c <___vfprintf_internal_r+0x21d0>
 1002dc4:	d9c02384 	addi	r7,sp,142
 1002dc8:	3ccfc83a 	sub	r7,r7,r19
 1002dcc:	d9002344 	addi	r4,sp,141
 1002dd0:	e1cf883a 	add	r7,fp,r7
 1002dd4:	00000106 	br	1002ddc <___vfprintf_internal_r+0x2040>
 1002dd8:	28800003 	ldbu	r2,0(r5)
 1002ddc:	20800005 	stb	r2,0(r4)
 1002de0:	21000044 	addi	r4,r4,1
 1002de4:	29400044 	addi	r5,r5,1
 1002de8:	393ffb1e 	bne	r7,r4,1002dd8 <___vfprintf_internal_r+0x203c>
 1002dec:	d8802304 	addi	r2,sp,140
 1002df0:	14c5c83a 	sub	r2,r2,r19
 1002df4:	d8c02344 	addi	r3,sp,141
 1002df8:	1885883a 	add	r2,r3,r2
 1002dfc:	003f7006 	br	1002bc0 <___vfprintf_internal_r+0x1e24>
 1002e00:	0005883a 	mov	r2,zero
 1002e04:	003f0f06 	br	1002a44 <___vfprintf_internal_r+0x1ca8>
 1002e08:	d8c03217 	ldw	r3,200(sp)
 1002e0c:	18c00044 	addi	r3,r3,1
 1002e10:	d8c02e15 	stw	r3,184(sp)
 1002e14:	1805883a 	mov	r2,r3
 1002e18:	183fb20e 	bge	r3,zero,1002ce4 <___vfprintf_internal_r+0x1f48>
 1002e1c:	0005883a 	mov	r2,zero
 1002e20:	003fb006 	br	1002ce4 <___vfprintf_internal_r+0x1f48>
 1002e24:	d9003617 	ldw	r4,216(sp)
 1002e28:	000d883a 	mov	r6,zero
 1002e2c:	000f883a 	mov	r7,zero
 1002e30:	980b883a 	mov	r5,r19
 1002e34:	d8c03c15 	stw	r3,240(sp)
 1002e38:	da003d15 	stw	r8,244(sp)
 1002e3c:	100c0100 	call	100c010 <__eqdf2>
 1002e40:	d8c03c17 	ldw	r3,240(sp)
 1002e44:	da003d17 	ldw	r8,244(sp)
 1002e48:	103f9826 	beq	r2,zero,1002cac <___vfprintf_internal_r+0x1f10>
 1002e4c:	00800044 	movi	r2,1
 1002e50:	10c7c83a 	sub	r3,r2,r3
 1002e54:	d8c02615 	stw	r3,152(sp)
 1002e58:	003f9506 	br	1002cb0 <___vfprintf_internal_r+0x1f14>
 1002e5c:	d9002917 	ldw	r4,164(sp)
 1002e60:	d8c03217 	ldw	r3,200(sp)
 1002e64:	20800044 	addi	r2,r4,1
 1002e68:	1885883a 	add	r2,r3,r2
 1002e6c:	d8802e15 	stw	r2,184(sp)
 1002e70:	103dbf0e 	bge	r2,zero,1002570 <___vfprintf_internal_r+0x17d4>
 1002e74:	0005883a 	mov	r2,zero
 1002e78:	003dbd06 	br	1002570 <___vfprintf_internal_r+0x17d4>
 1002e7c:	2000211e 	bne	r4,zero,1002f04 <___vfprintf_internal_r+0x2168>
 1002e80:	9480004c 	andi	r18,r18,1
 1002e84:	90001f1e 	bne	r18,zero,1002f04 <___vfprintf_internal_r+0x2168>
 1002e88:	00800044 	movi	r2,1
 1002e8c:	d8802e15 	stw	r2,184(sp)
 1002e90:	003db706 	br	1002570 <___vfprintf_internal_r+0x17d4>
 1002e94:	00800b44 	movi	r2,45
 1002e98:	05adc83a 	sub	r22,zero,r22
 1002e9c:	d8802305 	stb	r2,140(sp)
 1002ea0:	003f3f06 	br	1002ba0 <___vfprintf_internal_r+0x1e04>
 1002ea4:	0005883a 	mov	r2,zero
 1002ea8:	003f5206 	br	1002bf4 <___vfprintf_internal_r+0x1e58>
 1002eac:	90a4703a 	and	r18,r18,r2
 1002eb0:	903f4e26 	beq	r18,zero,1002bec <___vfprintf_internal_r+0x1e50>
 1002eb4:	003f4a06 	br	1002be0 <___vfprintf_internal_r+0x1e44>
 1002eb8:	00800084 	movi	r2,2
 1002ebc:	10c5c83a 	sub	r2,r2,r3
 1002ec0:	003f8406 	br	1002cd4 <___vfprintf_internal_r+0x1f38>
 1002ec4:	d8802d17 	ldw	r2,180(sp)
 1002ec8:	d9002d17 	ldw	r4,180(sp)
 1002ecc:	ac400043 	ldbu	r17,1(r21)
 1002ed0:	10800017 	ldw	r2,0(r2)
 1002ed4:	582b883a 	mov	r21,r11
 1002ed8:	d8802915 	stw	r2,164(sp)
 1002edc:	20800104 	addi	r2,r4,4
 1002ee0:	d9002917 	ldw	r4,164(sp)
 1002ee4:	d8802d15 	stw	r2,180(sp)
 1002ee8:	203e7a0e 	bge	r4,zero,10028d4 <___vfprintf_internal_r+0x1b38>
 1002eec:	8c403fcc 	andi	r17,r17,255
 1002ef0:	00bfffc4 	movi	r2,-1
 1002ef4:	8c40201c 	xori	r17,r17,128
 1002ef8:	d8802915 	stw	r2,164(sp)
 1002efc:	8c7fe004 	addi	r17,r17,-128
 1002f00:	00380706 	br	1000f20 <___vfprintf_internal_r+0x184>
 1002f04:	d8c02917 	ldw	r3,164(sp)
 1002f08:	18c00084 	addi	r3,r3,2
 1002f0c:	d8c02e15 	stw	r3,184(sp)
 1002f10:	1805883a 	mov	r2,r3
 1002f14:	183d960e 	bge	r3,zero,1002570 <___vfprintf_internal_r+0x17d4>
 1002f18:	003fd606 	br	1002e74 <___vfprintf_internal_r+0x20d8>
 1002f1c:	0005883a 	mov	r2,zero
 1002f20:	003f8e06 	br	1002d5c <___vfprintf_internal_r+0x1fc0>
 1002f24:	9080004c 	andi	r2,r18,1
 1002f28:	103f811e 	bne	r2,zero,1002d30 <___vfprintf_internal_r+0x1f94>
 1002f2c:	d8802117 	ldw	r2,132(sp)
 1002f30:	1405c83a 	sub	r2,r2,r16
 1002f34:	d8803315 	stw	r2,204(sp)
 1002f38:	b47ef326 	beq	r22,r17,1002b08 <___vfprintf_internal_r+0x1d6c>
 1002f3c:	dd802617 	ldw	r22,152(sp)
 1002f40:	003f1106 	br	1002b88 <___vfprintf_internal_r+0x1dec>
 1002f44:	d9c02785 	stb	r7,158(sp)
 1002f48:	00390406 	br	100135c <___vfprintf_internal_r+0x5c0>
 1002f4c:	d9c02785 	stb	r7,158(sp)
 1002f50:	0038d306 	br	10012a0 <___vfprintf_internal_r+0x504>
 1002f54:	d9c02785 	stb	r7,158(sp)
 1002f58:	003a6106 	br	10018e0 <___vfprintf_internal_r+0xb44>
 1002f5c:	d9c02785 	stb	r7,158(sp)
 1002f60:	003af806 	br	1001b44 <___vfprintf_internal_r+0xda8>
 1002f64:	0005883a 	mov	r2,zero
 1002f68:	003d7e06 	br	1002564 <___vfprintf_internal_r+0x17c8>
 1002f6c:	d8802344 	addi	r2,sp,141
 1002f70:	003f1306 	br	1002bc0 <___vfprintf_internal_r+0x1e24>
 1002f74:	d9c02785 	stb	r7,158(sp)
 1002f78:	00392306 	br	1001408 <___vfprintf_internal_r+0x66c>
 1002f7c:	d9c02785 	stb	r7,158(sp)
 1002f80:	003aa906 	br	1001a28 <___vfprintf_internal_r+0xc8c>
 1002f84:	d9c02785 	stb	r7,158(sp)
 1002f88:	003a3d06 	br	1001880 <___vfprintf_internal_r+0xae4>
 1002f8c:	d9c02785 	stb	r7,158(sp)
 1002f90:	003aca06 	br	1001abc <___vfprintf_internal_r+0xd20>

01002f94 <__vfprintf_internal>:
 1002f94:	00804074 	movhi	r2,257
 1002f98:	1086be04 	addi	r2,r2,6904
 1002f9c:	300f883a 	mov	r7,r6
 1002fa0:	280d883a 	mov	r6,r5
 1002fa4:	200b883a 	mov	r5,r4
 1002fa8:	11000017 	ldw	r4,0(r2)
 1002fac:	1000d9c1 	jmpi	1000d9c <___vfprintf_internal_r>

01002fb0 <__sbprintf>:
 1002fb0:	2880030b 	ldhu	r2,12(r5)
 1002fb4:	2ac01917 	ldw	r11,100(r5)
 1002fb8:	2a80038b 	ldhu	r10,14(r5)
 1002fbc:	2a400717 	ldw	r9,28(r5)
 1002fc0:	2a000917 	ldw	r8,36(r5)
 1002fc4:	defee204 	addi	sp,sp,-1144
 1002fc8:	00c10004 	movi	r3,1024
 1002fcc:	dc011a15 	stw	r16,1128(sp)
 1002fd0:	10bfff4c 	andi	r2,r2,65533
 1002fd4:	2821883a 	mov	r16,r5
 1002fd8:	d8cb883a 	add	r5,sp,r3
 1002fdc:	dc811c15 	stw	r18,1136(sp)
 1002fe0:	dc411b15 	stw	r17,1132(sp)
 1002fe4:	dfc11d15 	stw	ra,1140(sp)
 1002fe8:	2025883a 	mov	r18,r4
 1002fec:	d881030d 	sth	r2,1036(sp)
 1002ff0:	dac11915 	stw	r11,1124(sp)
 1002ff4:	da81038d 	sth	r10,1038(sp)
 1002ff8:	da410715 	stw	r9,1052(sp)
 1002ffc:	da010915 	stw	r8,1060(sp)
 1003000:	dec10015 	stw	sp,1024(sp)
 1003004:	dec10415 	stw	sp,1040(sp)
 1003008:	d8c10215 	stw	r3,1032(sp)
 100300c:	d8c10515 	stw	r3,1044(sp)
 1003010:	d8010615 	stw	zero,1048(sp)
 1003014:	1000d9c0 	call	1000d9c <___vfprintf_internal_r>
 1003018:	1023883a 	mov	r17,r2
 100301c:	10000416 	blt	r2,zero,1003030 <__sbprintf+0x80>
 1003020:	d9410004 	addi	r5,sp,1024
 1003024:	9009883a 	mov	r4,r18
 1003028:	1004c640 	call	1004c64 <_fflush_r>
 100302c:	10000d1e 	bne	r2,zero,1003064 <__sbprintf+0xb4>
 1003030:	d881030b 	ldhu	r2,1036(sp)
 1003034:	1080100c 	andi	r2,r2,64
 1003038:	10000326 	beq	r2,zero,1003048 <__sbprintf+0x98>
 100303c:	8080030b 	ldhu	r2,12(r16)
 1003040:	10801014 	ori	r2,r2,64
 1003044:	8080030d 	sth	r2,12(r16)
 1003048:	8805883a 	mov	r2,r17
 100304c:	dfc11d17 	ldw	ra,1140(sp)
 1003050:	dc811c17 	ldw	r18,1136(sp)
 1003054:	dc411b17 	ldw	r17,1132(sp)
 1003058:	dc011a17 	ldw	r16,1128(sp)
 100305c:	dec11e04 	addi	sp,sp,1144
 1003060:	f800283a 	ret
 1003064:	047fffc4 	movi	r17,-1
 1003068:	003ff106 	br	1003030 <__sbprintf+0x80>

0100306c <__swsetup_r>:
 100306c:	00804074 	movhi	r2,257
 1003070:	defffd04 	addi	sp,sp,-12
 1003074:	1086be04 	addi	r2,r2,6904
 1003078:	dc400115 	stw	r17,4(sp)
 100307c:	2023883a 	mov	r17,r4
 1003080:	11000017 	ldw	r4,0(r2)
 1003084:	dc000015 	stw	r16,0(sp)
 1003088:	dfc00215 	stw	ra,8(sp)
 100308c:	2821883a 	mov	r16,r5
 1003090:	20000226 	beq	r4,zero,100309c <__swsetup_r+0x30>
 1003094:	20800e17 	ldw	r2,56(r4)
 1003098:	10003126 	beq	r2,zero,1003160 <__swsetup_r+0xf4>
 100309c:	8080030b 	ldhu	r2,12(r16)
 10030a0:	10c0020c 	andi	r3,r2,8
 10030a4:	1009883a 	mov	r4,r2
 10030a8:	18000f26 	beq	r3,zero,10030e8 <__swsetup_r+0x7c>
 10030ac:	80c00417 	ldw	r3,16(r16)
 10030b0:	18001526 	beq	r3,zero,1003108 <__swsetup_r+0x9c>
 10030b4:	1100004c 	andi	r4,r2,1
 10030b8:	20001c1e 	bne	r4,zero,100312c <__swsetup_r+0xc0>
 10030bc:	1080008c 	andi	r2,r2,2
 10030c0:	1000291e 	bne	r2,zero,1003168 <__swsetup_r+0xfc>
 10030c4:	80800517 	ldw	r2,20(r16)
 10030c8:	80800215 	stw	r2,8(r16)
 10030cc:	18001c26 	beq	r3,zero,1003140 <__swsetup_r+0xd4>
 10030d0:	0005883a 	mov	r2,zero
 10030d4:	dfc00217 	ldw	ra,8(sp)
 10030d8:	dc400117 	ldw	r17,4(sp)
 10030dc:	dc000017 	ldw	r16,0(sp)
 10030e0:	dec00304 	addi	sp,sp,12
 10030e4:	f800283a 	ret
 10030e8:	2080040c 	andi	r2,r4,16
 10030ec:	10002e26 	beq	r2,zero,10031a8 <__swsetup_r+0x13c>
 10030f0:	2080010c 	andi	r2,r4,4
 10030f4:	10001e1e 	bne	r2,zero,1003170 <__swsetup_r+0x104>
 10030f8:	80c00417 	ldw	r3,16(r16)
 10030fc:	20800214 	ori	r2,r4,8
 1003100:	8080030d 	sth	r2,12(r16)
 1003104:	183feb1e 	bne	r3,zero,10030b4 <__swsetup_r+0x48>
 1003108:	1100a00c 	andi	r4,r2,640
 100310c:	01408004 	movi	r5,512
 1003110:	217fe826 	beq	r4,r5,10030b4 <__swsetup_r+0x48>
 1003114:	800b883a 	mov	r5,r16
 1003118:	8809883a 	mov	r4,r17
 100311c:	1005be40 	call	1005be4 <__smakebuf_r>
 1003120:	8080030b 	ldhu	r2,12(r16)
 1003124:	80c00417 	ldw	r3,16(r16)
 1003128:	003fe206 	br	10030b4 <__swsetup_r+0x48>
 100312c:	80800517 	ldw	r2,20(r16)
 1003130:	80000215 	stw	zero,8(r16)
 1003134:	0085c83a 	sub	r2,zero,r2
 1003138:	80800615 	stw	r2,24(r16)
 100313c:	183fe41e 	bne	r3,zero,10030d0 <__swsetup_r+0x64>
 1003140:	80c0030b 	ldhu	r3,12(r16)
 1003144:	0005883a 	mov	r2,zero
 1003148:	1900200c 	andi	r4,r3,128
 100314c:	203fe126 	beq	r4,zero,10030d4 <__swsetup_r+0x68>
 1003150:	18c01014 	ori	r3,r3,64
 1003154:	80c0030d 	sth	r3,12(r16)
 1003158:	00bfffc4 	movi	r2,-1
 100315c:	003fdd06 	br	10030d4 <__swsetup_r+0x68>
 1003160:	10050400 	call	1005040 <__sinit>
 1003164:	003fcd06 	br	100309c <__swsetup_r+0x30>
 1003168:	0005883a 	mov	r2,zero
 100316c:	003fd606 	br	10030c8 <__swsetup_r+0x5c>
 1003170:	81400c17 	ldw	r5,48(r16)
 1003174:	28000626 	beq	r5,zero,1003190 <__swsetup_r+0x124>
 1003178:	80801004 	addi	r2,r16,64
 100317c:	28800326 	beq	r5,r2,100318c <__swsetup_r+0x120>
 1003180:	8809883a 	mov	r4,r17
 1003184:	10051b40 	call	10051b4 <_free_r>
 1003188:	8100030b 	ldhu	r4,12(r16)
 100318c:	80000c15 	stw	zero,48(r16)
 1003190:	80c00417 	ldw	r3,16(r16)
 1003194:	00bff6c4 	movi	r2,-37
 1003198:	1108703a 	and	r4,r2,r4
 100319c:	80000115 	stw	zero,4(r16)
 10031a0:	80c00015 	stw	r3,0(r16)
 10031a4:	003fd506 	br	10030fc <__swsetup_r+0x90>
 10031a8:	00800244 	movi	r2,9
 10031ac:	88800015 	stw	r2,0(r17)
 10031b0:	20801014 	ori	r2,r4,64
 10031b4:	8080030d 	sth	r2,12(r16)
 10031b8:	00bfffc4 	movi	r2,-1
 10031bc:	003fc506 	br	10030d4 <__swsetup_r+0x68>

010031c0 <quorem>:
 10031c0:	defff704 	addi	sp,sp,-36
 10031c4:	dc800215 	stw	r18,8(sp)
 10031c8:	20800417 	ldw	r2,16(r4)
 10031cc:	2c800417 	ldw	r18,16(r5)
 10031d0:	dfc00815 	stw	ra,32(sp)
 10031d4:	ddc00715 	stw	r23,28(sp)
 10031d8:	dd800615 	stw	r22,24(sp)
 10031dc:	dd400515 	stw	r21,20(sp)
 10031e0:	dd000415 	stw	r20,16(sp)
 10031e4:	dcc00315 	stw	r19,12(sp)
 10031e8:	dc400115 	stw	r17,4(sp)
 10031ec:	dc000015 	stw	r16,0(sp)
 10031f0:	14807116 	blt	r2,r18,10033b8 <quorem+0x1f8>
 10031f4:	94bfffc4 	addi	r18,r18,-1
 10031f8:	94ad883a 	add	r22,r18,r18
 10031fc:	b5ad883a 	add	r22,r22,r22
 1003200:	2c400504 	addi	r17,r5,20
 1003204:	8da9883a 	add	r20,r17,r22
 1003208:	25400504 	addi	r21,r4,20
 100320c:	282f883a 	mov	r23,r5
 1003210:	adad883a 	add	r22,r21,r22
 1003214:	a1400017 	ldw	r5,0(r20)
 1003218:	2021883a 	mov	r16,r4
 100321c:	b1000017 	ldw	r4,0(r22)
 1003220:	29400044 	addi	r5,r5,1
 1003224:	100adc00 	call	100adc0 <__udivsi3>
 1003228:	1027883a 	mov	r19,r2
 100322c:	10002c26 	beq	r2,zero,10032e0 <quorem+0x120>
 1003230:	a813883a 	mov	r9,r21
 1003234:	880b883a 	mov	r5,r17
 1003238:	0009883a 	mov	r4,zero
 100323c:	000d883a 	mov	r6,zero
 1003240:	2a000017 	ldw	r8,0(r5)
 1003244:	49c00017 	ldw	r7,0(r9)
 1003248:	29400104 	addi	r5,r5,4
 100324c:	40bfffcc 	andi	r2,r8,65535
 1003250:	14c5383a 	mul	r2,r2,r19
 1003254:	4010d43a 	srli	r8,r8,16
 1003258:	38ffffcc 	andi	r3,r7,65535
 100325c:	1105883a 	add	r2,r2,r4
 1003260:	1008d43a 	srli	r4,r2,16
 1003264:	44d1383a 	mul	r8,r8,r19
 1003268:	198d883a 	add	r6,r3,r6
 100326c:	10ffffcc 	andi	r3,r2,65535
 1003270:	30c7c83a 	sub	r3,r6,r3
 1003274:	380ed43a 	srli	r7,r7,16
 1003278:	4105883a 	add	r2,r8,r4
 100327c:	180dd43a 	srai	r6,r3,16
 1003280:	113fffcc 	andi	r4,r2,65535
 1003284:	390fc83a 	sub	r7,r7,r4
 1003288:	398d883a 	add	r6,r7,r6
 100328c:	300e943a 	slli	r7,r6,16
 1003290:	18ffffcc 	andi	r3,r3,65535
 1003294:	1008d43a 	srli	r4,r2,16
 1003298:	38ceb03a 	or	r7,r7,r3
 100329c:	49c00015 	stw	r7,0(r9)
 10032a0:	300dd43a 	srai	r6,r6,16
 10032a4:	4a400104 	addi	r9,r9,4
 10032a8:	a17fe52e 	bgeu	r20,r5,1003240 <quorem+0x80>
 10032ac:	b0800017 	ldw	r2,0(r22)
 10032b0:	10000b1e 	bne	r2,zero,10032e0 <quorem+0x120>
 10032b4:	b0bfff04 	addi	r2,r22,-4
 10032b8:	a880082e 	bgeu	r21,r2,10032dc <quorem+0x11c>
 10032bc:	b0ffff17 	ldw	r3,-4(r22)
 10032c0:	18000326 	beq	r3,zero,10032d0 <quorem+0x110>
 10032c4:	00000506 	br	10032dc <quorem+0x11c>
 10032c8:	10c00017 	ldw	r3,0(r2)
 10032cc:	1800031e 	bne	r3,zero,10032dc <quorem+0x11c>
 10032d0:	10bfff04 	addi	r2,r2,-4
 10032d4:	94bfffc4 	addi	r18,r18,-1
 10032d8:	a8bffb36 	bltu	r21,r2,10032c8 <quorem+0x108>
 10032dc:	84800415 	stw	r18,16(r16)
 10032e0:	b80b883a 	mov	r5,r23
 10032e4:	8009883a 	mov	r4,r16
 10032e8:	10073240 	call	1007324 <__mcmp>
 10032ec:	10002616 	blt	r2,zero,1003388 <quorem+0x1c8>
 10032f0:	9cc00044 	addi	r19,r19,1
 10032f4:	a805883a 	mov	r2,r21
 10032f8:	000b883a 	mov	r5,zero
 10032fc:	11000017 	ldw	r4,0(r2)
 1003300:	89800017 	ldw	r6,0(r17)
 1003304:	10800104 	addi	r2,r2,4
 1003308:	20ffffcc 	andi	r3,r4,65535
 100330c:	194b883a 	add	r5,r3,r5
 1003310:	30ffffcc 	andi	r3,r6,65535
 1003314:	28c7c83a 	sub	r3,r5,r3
 1003318:	300cd43a 	srli	r6,r6,16
 100331c:	2008d43a 	srli	r4,r4,16
 1003320:	180bd43a 	srai	r5,r3,16
 1003324:	18ffffcc 	andi	r3,r3,65535
 1003328:	2189c83a 	sub	r4,r4,r6
 100332c:	2149883a 	add	r4,r4,r5
 1003330:	200c943a 	slli	r6,r4,16
 1003334:	8c400104 	addi	r17,r17,4
 1003338:	200bd43a 	srai	r5,r4,16
 100333c:	30c6b03a 	or	r3,r6,r3
 1003340:	10ffff15 	stw	r3,-4(r2)
 1003344:	a47fed2e 	bgeu	r20,r17,10032fc <quorem+0x13c>
 1003348:	9485883a 	add	r2,r18,r18
 100334c:	1085883a 	add	r2,r2,r2
 1003350:	a887883a 	add	r3,r21,r2
 1003354:	18800017 	ldw	r2,0(r3)
 1003358:	10000b1e 	bne	r2,zero,1003388 <quorem+0x1c8>
 100335c:	18bfff04 	addi	r2,r3,-4
 1003360:	a880082e 	bgeu	r21,r2,1003384 <quorem+0x1c4>
 1003364:	18ffff17 	ldw	r3,-4(r3)
 1003368:	18000326 	beq	r3,zero,1003378 <quorem+0x1b8>
 100336c:	00000506 	br	1003384 <quorem+0x1c4>
 1003370:	10c00017 	ldw	r3,0(r2)
 1003374:	1800031e 	bne	r3,zero,1003384 <quorem+0x1c4>
 1003378:	10bfff04 	addi	r2,r2,-4
 100337c:	94bfffc4 	addi	r18,r18,-1
 1003380:	a8bffb36 	bltu	r21,r2,1003370 <quorem+0x1b0>
 1003384:	84800415 	stw	r18,16(r16)
 1003388:	9805883a 	mov	r2,r19
 100338c:	dfc00817 	ldw	ra,32(sp)
 1003390:	ddc00717 	ldw	r23,28(sp)
 1003394:	dd800617 	ldw	r22,24(sp)
 1003398:	dd400517 	ldw	r21,20(sp)
 100339c:	dd000417 	ldw	r20,16(sp)
 10033a0:	dcc00317 	ldw	r19,12(sp)
 10033a4:	dc800217 	ldw	r18,8(sp)
 10033a8:	dc400117 	ldw	r17,4(sp)
 10033ac:	dc000017 	ldw	r16,0(sp)
 10033b0:	dec00904 	addi	sp,sp,36
 10033b4:	f800283a 	ret
 10033b8:	0005883a 	mov	r2,zero
 10033bc:	003ff306 	br	100338c <quorem+0x1cc>

010033c0 <_dtoa_r>:
 10033c0:	20801017 	ldw	r2,64(r4)
 10033c4:	deffde04 	addi	sp,sp,-136
 10033c8:	df002015 	stw	fp,128(sp)
 10033cc:	dcc01b15 	stw	r19,108(sp)
 10033d0:	dc801a15 	stw	r18,104(sp)
 10033d4:	dc401915 	stw	r17,100(sp)
 10033d8:	dc001815 	stw	r16,96(sp)
 10033dc:	dfc02115 	stw	ra,132(sp)
 10033e0:	ddc01f15 	stw	r23,124(sp)
 10033e4:	dd801e15 	stw	r22,120(sp)
 10033e8:	dd401d15 	stw	r21,116(sp)
 10033ec:	dd001c15 	stw	r20,112(sp)
 10033f0:	d9c00315 	stw	r7,12(sp)
 10033f4:	2039883a 	mov	fp,r4
 10033f8:	3023883a 	mov	r17,r6
 10033fc:	2825883a 	mov	r18,r5
 1003400:	dc002417 	ldw	r16,144(sp)
 1003404:	3027883a 	mov	r19,r6
 1003408:	10000826 	beq	r2,zero,100342c <_dtoa_r+0x6c>
 100340c:	21801117 	ldw	r6,68(r4)
 1003410:	00c00044 	movi	r3,1
 1003414:	100b883a 	mov	r5,r2
 1003418:	1986983a 	sll	r3,r3,r6
 100341c:	11800115 	stw	r6,4(r2)
 1003420:	10c00215 	stw	r3,8(r2)
 1003424:	1006b040 	call	1006b04 <_Bfree>
 1003428:	e0001015 	stw	zero,64(fp)
 100342c:	88002e16 	blt	r17,zero,10034e8 <_dtoa_r+0x128>
 1003430:	80000015 	stw	zero,0(r16)
 1003434:	889ffc2c 	andhi	r2,r17,32752
 1003438:	00dffc34 	movhi	r3,32752
 100343c:	10c01c26 	beq	r2,r3,10034b0 <_dtoa_r+0xf0>
 1003440:	000d883a 	mov	r6,zero
 1003444:	000f883a 	mov	r7,zero
 1003448:	9009883a 	mov	r4,r18
 100344c:	980b883a 	mov	r5,r19
 1003450:	100c0100 	call	100c010 <__eqdf2>
 1003454:	10002b1e 	bne	r2,zero,1003504 <_dtoa_r+0x144>
 1003458:	d9c02317 	ldw	r7,140(sp)
 100345c:	00800044 	movi	r2,1
 1003460:	38800015 	stw	r2,0(r7)
 1003464:	d8802517 	ldw	r2,148(sp)
 1003468:	10019e26 	beq	r2,zero,1003ae4 <_dtoa_r+0x724>
 100346c:	d8c02517 	ldw	r3,148(sp)
 1003470:	00804074 	movhi	r2,257
 1003474:	10bf6544 	addi	r2,r2,-619
 1003478:	18800015 	stw	r2,0(r3)
 100347c:	10bfffc4 	addi	r2,r2,-1
 1003480:	dfc02117 	ldw	ra,132(sp)
 1003484:	df002017 	ldw	fp,128(sp)
 1003488:	ddc01f17 	ldw	r23,124(sp)
 100348c:	dd801e17 	ldw	r22,120(sp)
 1003490:	dd401d17 	ldw	r21,116(sp)
 1003494:	dd001c17 	ldw	r20,112(sp)
 1003498:	dcc01b17 	ldw	r19,108(sp)
 100349c:	dc801a17 	ldw	r18,104(sp)
 10034a0:	dc401917 	ldw	r17,100(sp)
 10034a4:	dc001817 	ldw	r16,96(sp)
 10034a8:	dec02204 	addi	sp,sp,136
 10034ac:	f800283a 	ret
 10034b0:	d8c02317 	ldw	r3,140(sp)
 10034b4:	0089c3c4 	movi	r2,9999
 10034b8:	18800015 	stw	r2,0(r3)
 10034bc:	90017726 	beq	r18,zero,1003a9c <_dtoa_r+0x6dc>
 10034c0:	00804074 	movhi	r2,257
 10034c4:	10bf7104 	addi	r2,r2,-572
 10034c8:	d9002517 	ldw	r4,148(sp)
 10034cc:	203fec26 	beq	r4,zero,1003480 <_dtoa_r+0xc0>
 10034d0:	10c000c7 	ldb	r3,3(r2)
 10034d4:	1801781e 	bne	r3,zero,1003ab8 <_dtoa_r+0x6f8>
 10034d8:	10c000c4 	addi	r3,r2,3
 10034dc:	d9802517 	ldw	r6,148(sp)
 10034e0:	30c00015 	stw	r3,0(r6)
 10034e4:	003fe606 	br	1003480 <_dtoa_r+0xc0>
 10034e8:	04e00034 	movhi	r19,32768
 10034ec:	9cffffc4 	addi	r19,r19,-1
 10034f0:	00800044 	movi	r2,1
 10034f4:	8ce6703a 	and	r19,r17,r19
 10034f8:	80800015 	stw	r2,0(r16)
 10034fc:	9823883a 	mov	r17,r19
 1003500:	003fcc06 	br	1003434 <_dtoa_r+0x74>
 1003504:	d8800204 	addi	r2,sp,8
 1003508:	d8800015 	stw	r2,0(sp)
 100350c:	d9c00104 	addi	r7,sp,4
 1003510:	900b883a 	mov	r5,r18
 1003514:	980d883a 	mov	r6,r19
 1003518:	e009883a 	mov	r4,fp
 100351c:	8820d53a 	srli	r16,r17,20
 1003520:	10076f00 	call	10076f0 <__d2b>
 1003524:	d8800915 	stw	r2,36(sp)
 1003528:	8001651e 	bne	r16,zero,1003ac0 <_dtoa_r+0x700>
 100352c:	dd800217 	ldw	r22,8(sp)
 1003530:	dc000117 	ldw	r16,4(sp)
 1003534:	00800804 	movi	r2,32
 1003538:	b421883a 	add	r16,r22,r16
 100353c:	80c10c84 	addi	r3,r16,1074
 1003540:	10c2d10e 	bge	r2,r3,1004088 <_dtoa_r+0xcc8>
 1003544:	00801004 	movi	r2,64
 1003548:	81010484 	addi	r4,r16,1042
 100354c:	10c7c83a 	sub	r3,r2,r3
 1003550:	9108d83a 	srl	r4,r18,r4
 1003554:	88e2983a 	sll	r17,r17,r3
 1003558:	2448b03a 	or	r4,r4,r17
 100355c:	100d3d80 	call	100d3d8 <__floatunsidf>
 1003560:	017f8434 	movhi	r5,65040
 1003564:	01800044 	movi	r6,1
 1003568:	1009883a 	mov	r4,r2
 100356c:	194b883a 	add	r5,r3,r5
 1003570:	843fffc4 	addi	r16,r16,-1
 1003574:	d9801115 	stw	r6,68(sp)
 1003578:	000d883a 	mov	r6,zero
 100357c:	01cffe34 	movhi	r7,16376
 1003580:	100c9800 	call	100c980 <__subdf3>
 1003584:	0198dbf4 	movhi	r6,25455
 1003588:	01cff4f4 	movhi	r7,16339
 100358c:	3190d844 	addi	r6,r6,17249
 1003590:	39e1e9c4 	addi	r7,r7,-30809
 1003594:	1009883a 	mov	r4,r2
 1003598:	180b883a 	mov	r5,r3
 100359c:	100c2680 	call	100c268 <__muldf3>
 10035a0:	01a2d874 	movhi	r6,35681
 10035a4:	01cff1f4 	movhi	r7,16327
 10035a8:	31b22cc4 	addi	r6,r6,-14157
 10035ac:	39e28a04 	addi	r7,r7,-30168
 10035b0:	180b883a 	mov	r5,r3
 10035b4:	1009883a 	mov	r4,r2
 10035b8:	100ae7c0 	call	100ae7c <__adddf3>
 10035bc:	8009883a 	mov	r4,r16
 10035c0:	1029883a 	mov	r20,r2
 10035c4:	1823883a 	mov	r17,r3
 10035c8:	100d2fc0 	call	100d2fc <__floatsidf>
 10035cc:	019427f4 	movhi	r6,20639
 10035d0:	01cff4f4 	movhi	r7,16339
 10035d4:	319e7ec4 	addi	r6,r6,31227
 10035d8:	39d104c4 	addi	r7,r7,17427
 10035dc:	1009883a 	mov	r4,r2
 10035e0:	180b883a 	mov	r5,r3
 10035e4:	100c2680 	call	100c268 <__muldf3>
 10035e8:	100d883a 	mov	r6,r2
 10035ec:	180f883a 	mov	r7,r3
 10035f0:	a009883a 	mov	r4,r20
 10035f4:	880b883a 	mov	r5,r17
 10035f8:	100ae7c0 	call	100ae7c <__adddf3>
 10035fc:	1009883a 	mov	r4,r2
 1003600:	180b883a 	mov	r5,r3
 1003604:	1029883a 	mov	r20,r2
 1003608:	1823883a 	mov	r17,r3
 100360c:	100d27c0 	call	100d27c <__fixdfsi>
 1003610:	000d883a 	mov	r6,zero
 1003614:	000f883a 	mov	r7,zero
 1003618:	a009883a 	mov	r4,r20
 100361c:	880b883a 	mov	r5,r17
 1003620:	d8800515 	stw	r2,20(sp)
 1003624:	100c1740 	call	100c174 <__ledf2>
 1003628:	10028716 	blt	r2,zero,1004048 <_dtoa_r+0xc88>
 100362c:	d8c00517 	ldw	r3,20(sp)
 1003630:	00800584 	movi	r2,22
 1003634:	10c27536 	bltu	r2,r3,100400c <_dtoa_r+0xc4c>
 1003638:	180490fa 	slli	r2,r3,3
 100363c:	00c04074 	movhi	r3,257
 1003640:	18ff8d04 	addi	r3,r3,-460
 1003644:	1885883a 	add	r2,r3,r2
 1003648:	11000017 	ldw	r4,0(r2)
 100364c:	11400117 	ldw	r5,4(r2)
 1003650:	900d883a 	mov	r6,r18
 1003654:	980f883a 	mov	r7,r19
 1003658:	100c0980 	call	100c098 <__gedf2>
 100365c:	00828d0e 	bge	zero,r2,1004094 <_dtoa_r+0xcd4>
 1003660:	d9000517 	ldw	r4,20(sp)
 1003664:	d8000e15 	stw	zero,56(sp)
 1003668:	213fffc4 	addi	r4,r4,-1
 100366c:	d9000515 	stw	r4,20(sp)
 1003670:	b42dc83a 	sub	r22,r22,r16
 1003674:	b5bfffc4 	addi	r22,r22,-1
 1003678:	b0026f16 	blt	r22,zero,1004038 <_dtoa_r+0xc78>
 100367c:	d8000815 	stw	zero,32(sp)
 1003680:	d9c00517 	ldw	r7,20(sp)
 1003684:	38026416 	blt	r7,zero,1004018 <_dtoa_r+0xc58>
 1003688:	b1ed883a 	add	r22,r22,r7
 100368c:	d9c00d15 	stw	r7,52(sp)
 1003690:	d8000a15 	stw	zero,40(sp)
 1003694:	d9800317 	ldw	r6,12(sp)
 1003698:	00800244 	movi	r2,9
 100369c:	11811436 	bltu	r2,r6,1003af0 <_dtoa_r+0x730>
 10036a0:	00800144 	movi	r2,5
 10036a4:	1184e10e 	bge	r2,r6,1004a2c <_dtoa_r+0x166c>
 10036a8:	31bfff04 	addi	r6,r6,-4
 10036ac:	d9800315 	stw	r6,12(sp)
 10036b0:	0023883a 	mov	r17,zero
 10036b4:	d9800317 	ldw	r6,12(sp)
 10036b8:	008000c4 	movi	r2,3
 10036bc:	30836726 	beq	r6,r2,100445c <_dtoa_r+0x109c>
 10036c0:	1183410e 	bge	r2,r6,10043c8 <_dtoa_r+0x1008>
 10036c4:	d9c00317 	ldw	r7,12(sp)
 10036c8:	00800104 	movi	r2,4
 10036cc:	38827c26 	beq	r7,r2,10040c0 <_dtoa_r+0xd00>
 10036d0:	00800144 	movi	r2,5
 10036d4:	3884c41e 	bne	r7,r2,10049e8 <_dtoa_r+0x1628>
 10036d8:	00800044 	movi	r2,1
 10036dc:	d8800b15 	stw	r2,44(sp)
 10036e0:	d8c00517 	ldw	r3,20(sp)
 10036e4:	d9002217 	ldw	r4,136(sp)
 10036e8:	1907883a 	add	r3,r3,r4
 10036ec:	19800044 	addi	r6,r3,1
 10036f0:	d8c00c15 	stw	r3,48(sp)
 10036f4:	d9800615 	stw	r6,24(sp)
 10036f8:	0183a40e 	bge	zero,r6,100458c <_dtoa_r+0x11cc>
 10036fc:	d9800617 	ldw	r6,24(sp)
 1003700:	3021883a 	mov	r16,r6
 1003704:	e0001115 	stw	zero,68(fp)
 1003708:	008005c4 	movi	r2,23
 100370c:	1184c92e 	bgeu	r2,r6,1004a34 <_dtoa_r+0x1674>
 1003710:	00c00044 	movi	r3,1
 1003714:	00800104 	movi	r2,4
 1003718:	1085883a 	add	r2,r2,r2
 100371c:	11000504 	addi	r4,r2,20
 1003720:	180b883a 	mov	r5,r3
 1003724:	18c00044 	addi	r3,r3,1
 1003728:	313ffb2e 	bgeu	r6,r4,1003718 <_dtoa_r+0x358>
 100372c:	e1401115 	stw	r5,68(fp)
 1003730:	e009883a 	mov	r4,fp
 1003734:	1006a5c0 	call	1006a5c <_Balloc>
 1003738:	d8800715 	stw	r2,28(sp)
 100373c:	e0801015 	stw	r2,64(fp)
 1003740:	00800384 	movi	r2,14
 1003744:	1400f736 	bltu	r2,r16,1003b24 <_dtoa_r+0x764>
 1003748:	8800f626 	beq	r17,zero,1003b24 <_dtoa_r+0x764>
 100374c:	d9c00517 	ldw	r7,20(sp)
 1003750:	01c39a0e 	bge	zero,r7,10045bc <_dtoa_r+0x11fc>
 1003754:	388003cc 	andi	r2,r7,15
 1003758:	100490fa 	slli	r2,r2,3
 100375c:	382bd13a 	srai	r21,r7,4
 1003760:	00c04074 	movhi	r3,257
 1003764:	18ff8d04 	addi	r3,r3,-460
 1003768:	1885883a 	add	r2,r3,r2
 100376c:	a8c0040c 	andi	r3,r21,16
 1003770:	12400017 	ldw	r9,0(r2)
 1003774:	12000117 	ldw	r8,4(r2)
 1003778:	18037926 	beq	r3,zero,1004560 <_dtoa_r+0x11a0>
 100377c:	00804074 	movhi	r2,257
 1003780:	10bf8304 	addi	r2,r2,-500
 1003784:	11800817 	ldw	r6,32(r2)
 1003788:	11c00917 	ldw	r7,36(r2)
 100378c:	9009883a 	mov	r4,r18
 1003790:	980b883a 	mov	r5,r19
 1003794:	da001715 	stw	r8,92(sp)
 1003798:	da401615 	stw	r9,88(sp)
 100379c:	100b7280 	call	100b728 <__divdf3>
 10037a0:	da001717 	ldw	r8,92(sp)
 10037a4:	da401617 	ldw	r9,88(sp)
 10037a8:	ad4003cc 	andi	r21,r21,15
 10037ac:	040000c4 	movi	r16,3
 10037b0:	1023883a 	mov	r17,r2
 10037b4:	1829883a 	mov	r20,r3
 10037b8:	a8001126 	beq	r21,zero,1003800 <_dtoa_r+0x440>
 10037bc:	05c04074 	movhi	r23,257
 10037c0:	bdff8304 	addi	r23,r23,-500
 10037c4:	4805883a 	mov	r2,r9
 10037c8:	4007883a 	mov	r3,r8
 10037cc:	a980004c 	andi	r6,r21,1
 10037d0:	1009883a 	mov	r4,r2
 10037d4:	a82bd07a 	srai	r21,r21,1
 10037d8:	180b883a 	mov	r5,r3
 10037dc:	30000426 	beq	r6,zero,10037f0 <_dtoa_r+0x430>
 10037e0:	b9800017 	ldw	r6,0(r23)
 10037e4:	b9c00117 	ldw	r7,4(r23)
 10037e8:	84000044 	addi	r16,r16,1
 10037ec:	100c2680 	call	100c268 <__muldf3>
 10037f0:	bdc00204 	addi	r23,r23,8
 10037f4:	a83ff51e 	bne	r21,zero,10037cc <_dtoa_r+0x40c>
 10037f8:	1013883a 	mov	r9,r2
 10037fc:	1811883a 	mov	r8,r3
 1003800:	480d883a 	mov	r6,r9
 1003804:	400f883a 	mov	r7,r8
 1003808:	8809883a 	mov	r4,r17
 100380c:	a00b883a 	mov	r5,r20
 1003810:	100b7280 	call	100b728 <__divdf3>
 1003814:	d8800f15 	stw	r2,60(sp)
 1003818:	d8c01015 	stw	r3,64(sp)
 100381c:	d8c00e17 	ldw	r3,56(sp)
 1003820:	18000626 	beq	r3,zero,100383c <_dtoa_r+0x47c>
 1003824:	d9000f17 	ldw	r4,60(sp)
 1003828:	d9401017 	ldw	r5,64(sp)
 100382c:	000d883a 	mov	r6,zero
 1003830:	01cffc34 	movhi	r7,16368
 1003834:	100c1740 	call	100c174 <__ledf2>
 1003838:	10040b16 	blt	r2,zero,1004868 <_dtoa_r+0x14a8>
 100383c:	8009883a 	mov	r4,r16
 1003840:	100d2fc0 	call	100d2fc <__floatsidf>
 1003844:	d9800f17 	ldw	r6,60(sp)
 1003848:	d9c01017 	ldw	r7,64(sp)
 100384c:	1009883a 	mov	r4,r2
 1003850:	180b883a 	mov	r5,r3
 1003854:	100c2680 	call	100c268 <__muldf3>
 1003858:	000d883a 	mov	r6,zero
 100385c:	01d00734 	movhi	r7,16412
 1003860:	1009883a 	mov	r4,r2
 1003864:	180b883a 	mov	r5,r3
 1003868:	100ae7c0 	call	100ae7c <__adddf3>
 100386c:	1021883a 	mov	r16,r2
 1003870:	d8800617 	ldw	r2,24(sp)
 1003874:	047f3034 	movhi	r17,64704
 1003878:	1c63883a 	add	r17,r3,r17
 100387c:	10031826 	beq	r2,zero,10044e0 <_dtoa_r+0x1120>
 1003880:	d8c00517 	ldw	r3,20(sp)
 1003884:	db000617 	ldw	r12,24(sp)
 1003888:	d8c01315 	stw	r3,76(sp)
 100388c:	d9000b17 	ldw	r4,44(sp)
 1003890:	20038f26 	beq	r4,zero,10046d0 <_dtoa_r+0x1310>
 1003894:	60bfffc4 	addi	r2,r12,-1
 1003898:	100490fa 	slli	r2,r2,3
 100389c:	00c04074 	movhi	r3,257
 10038a0:	18ff8d04 	addi	r3,r3,-460
 10038a4:	1885883a 	add	r2,r3,r2
 10038a8:	11800017 	ldw	r6,0(r2)
 10038ac:	11c00117 	ldw	r7,4(r2)
 10038b0:	d8800717 	ldw	r2,28(sp)
 10038b4:	0009883a 	mov	r4,zero
 10038b8:	014ff834 	movhi	r5,16352
 10038bc:	db001615 	stw	r12,88(sp)
 10038c0:	15c00044 	addi	r23,r2,1
 10038c4:	100b7280 	call	100b728 <__divdf3>
 10038c8:	800d883a 	mov	r6,r16
 10038cc:	880f883a 	mov	r7,r17
 10038d0:	1009883a 	mov	r4,r2
 10038d4:	180b883a 	mov	r5,r3
 10038d8:	100c9800 	call	100c980 <__subdf3>
 10038dc:	d9401017 	ldw	r5,64(sp)
 10038e0:	d9000f17 	ldw	r4,60(sp)
 10038e4:	102b883a 	mov	r21,r2
 10038e8:	d8c01215 	stw	r3,72(sp)
 10038ec:	100d27c0 	call	100d27c <__fixdfsi>
 10038f0:	1009883a 	mov	r4,r2
 10038f4:	1029883a 	mov	r20,r2
 10038f8:	100d2fc0 	call	100d2fc <__floatsidf>
 10038fc:	d9000f17 	ldw	r4,60(sp)
 1003900:	d9401017 	ldw	r5,64(sp)
 1003904:	100d883a 	mov	r6,r2
 1003908:	180f883a 	mov	r7,r3
 100390c:	100c9800 	call	100c980 <__subdf3>
 1003910:	1823883a 	mov	r17,r3
 1003914:	d8c00717 	ldw	r3,28(sp)
 1003918:	d9401217 	ldw	r5,72(sp)
 100391c:	a2000c04 	addi	r8,r20,48
 1003920:	1021883a 	mov	r16,r2
 1003924:	1a000005 	stb	r8,0(r3)
 1003928:	800d883a 	mov	r6,r16
 100392c:	880f883a 	mov	r7,r17
 1003930:	a809883a 	mov	r4,r21
 1003934:	4029883a 	mov	r20,r8
 1003938:	100c0980 	call	100c098 <__gedf2>
 100393c:	00841d16 	blt	zero,r2,10049b4 <_dtoa_r+0x15f4>
 1003940:	800d883a 	mov	r6,r16
 1003944:	880f883a 	mov	r7,r17
 1003948:	0009883a 	mov	r4,zero
 100394c:	014ffc34 	movhi	r5,16368
 1003950:	100c9800 	call	100c980 <__subdf3>
 1003954:	d9401217 	ldw	r5,72(sp)
 1003958:	100d883a 	mov	r6,r2
 100395c:	180f883a 	mov	r7,r3
 1003960:	a809883a 	mov	r4,r21
 1003964:	100c0980 	call	100c098 <__gedf2>
 1003968:	db001617 	ldw	r12,88(sp)
 100396c:	00840e16 	blt	zero,r2,10049a8 <_dtoa_r+0x15e8>
 1003970:	00800044 	movi	r2,1
 1003974:	13006b0e 	bge	r2,r12,1003b24 <_dtoa_r+0x764>
 1003978:	d9000717 	ldw	r4,28(sp)
 100397c:	dd800f15 	stw	r22,60(sp)
 1003980:	dcc01015 	stw	r19,64(sp)
 1003984:	2319883a 	add	r12,r4,r12
 1003988:	dcc01217 	ldw	r19,72(sp)
 100398c:	602d883a 	mov	r22,r12
 1003990:	dc801215 	stw	r18,72(sp)
 1003994:	b825883a 	mov	r18,r23
 1003998:	00000906 	br	10039c0 <_dtoa_r+0x600>
 100399c:	100c9800 	call	100c980 <__subdf3>
 10039a0:	a80d883a 	mov	r6,r21
 10039a4:	980f883a 	mov	r7,r19
 10039a8:	1009883a 	mov	r4,r2
 10039ac:	180b883a 	mov	r5,r3
 10039b0:	100c1740 	call	100c174 <__ledf2>
 10039b4:	1003e816 	blt	r2,zero,1004958 <_dtoa_r+0x1598>
 10039b8:	b825883a 	mov	r18,r23
 10039bc:	bd83e926 	beq	r23,r22,1004964 <_dtoa_r+0x15a4>
 10039c0:	a809883a 	mov	r4,r21
 10039c4:	980b883a 	mov	r5,r19
 10039c8:	000d883a 	mov	r6,zero
 10039cc:	01d00934 	movhi	r7,16420
 10039d0:	100c2680 	call	100c268 <__muldf3>
 10039d4:	000d883a 	mov	r6,zero
 10039d8:	01d00934 	movhi	r7,16420
 10039dc:	8009883a 	mov	r4,r16
 10039e0:	880b883a 	mov	r5,r17
 10039e4:	102b883a 	mov	r21,r2
 10039e8:	1827883a 	mov	r19,r3
 10039ec:	100c2680 	call	100c268 <__muldf3>
 10039f0:	180b883a 	mov	r5,r3
 10039f4:	1009883a 	mov	r4,r2
 10039f8:	1821883a 	mov	r16,r3
 10039fc:	1023883a 	mov	r17,r2
 1003a00:	100d27c0 	call	100d27c <__fixdfsi>
 1003a04:	1009883a 	mov	r4,r2
 1003a08:	1029883a 	mov	r20,r2
 1003a0c:	100d2fc0 	call	100d2fc <__floatsidf>
 1003a10:	8809883a 	mov	r4,r17
 1003a14:	800b883a 	mov	r5,r16
 1003a18:	100d883a 	mov	r6,r2
 1003a1c:	180f883a 	mov	r7,r3
 1003a20:	100c9800 	call	100c980 <__subdf3>
 1003a24:	a5000c04 	addi	r20,r20,48
 1003a28:	a80d883a 	mov	r6,r21
 1003a2c:	980f883a 	mov	r7,r19
 1003a30:	1009883a 	mov	r4,r2
 1003a34:	180b883a 	mov	r5,r3
 1003a38:	95000005 	stb	r20,0(r18)
 1003a3c:	1021883a 	mov	r16,r2
 1003a40:	1823883a 	mov	r17,r3
 1003a44:	100c1740 	call	100c174 <__ledf2>
 1003a48:	bdc00044 	addi	r23,r23,1
 1003a4c:	800d883a 	mov	r6,r16
 1003a50:	880f883a 	mov	r7,r17
 1003a54:	0009883a 	mov	r4,zero
 1003a58:	014ffc34 	movhi	r5,16368
 1003a5c:	103fcf0e 	bge	r2,zero,100399c <_dtoa_r+0x5dc>
 1003a60:	d8c01317 	ldw	r3,76(sp)
 1003a64:	d8c00515 	stw	r3,20(sp)
 1003a68:	d9400917 	ldw	r5,36(sp)
 1003a6c:	e009883a 	mov	r4,fp
 1003a70:	1006b040 	call	1006b04 <_Bfree>
 1003a74:	d9000517 	ldw	r4,20(sp)
 1003a78:	d9802317 	ldw	r6,140(sp)
 1003a7c:	d9c02517 	ldw	r7,148(sp)
 1003a80:	b8000005 	stb	zero,0(r23)
 1003a84:	20800044 	addi	r2,r4,1
 1003a88:	30800015 	stw	r2,0(r6)
 1003a8c:	3802aa26 	beq	r7,zero,1004538 <_dtoa_r+0x1178>
 1003a90:	3dc00015 	stw	r23,0(r7)
 1003a94:	d8800717 	ldw	r2,28(sp)
 1003a98:	003e7906 	br	1003480 <_dtoa_r+0xc0>
 1003a9c:	00800434 	movhi	r2,16
 1003aa0:	10bfffc4 	addi	r2,r2,-1
 1003aa4:	88a2703a 	and	r17,r17,r2
 1003aa8:	883e851e 	bne	r17,zero,10034c0 <_dtoa_r+0x100>
 1003aac:	00804074 	movhi	r2,257
 1003ab0:	10bf6e04 	addi	r2,r2,-584
 1003ab4:	003e8406 	br	10034c8 <_dtoa_r+0x108>
 1003ab8:	10c00204 	addi	r3,r2,8
 1003abc:	003e8706 	br	10034dc <_dtoa_r+0x11c>
 1003ac0:	01400434 	movhi	r5,16
 1003ac4:	297fffc4 	addi	r5,r5,-1
 1003ac8:	994a703a 	and	r5,r19,r5
 1003acc:	9009883a 	mov	r4,r18
 1003ad0:	843f0044 	addi	r16,r16,-1023
 1003ad4:	294ffc34 	orhi	r5,r5,16368
 1003ad8:	dd800217 	ldw	r22,8(sp)
 1003adc:	d8001115 	stw	zero,68(sp)
 1003ae0:	003ea506 	br	1003578 <_dtoa_r+0x1b8>
 1003ae4:	00804074 	movhi	r2,257
 1003ae8:	10bf6504 	addi	r2,r2,-620
 1003aec:	003e6406 	br	1003480 <_dtoa_r+0xc0>
 1003af0:	e0001115 	stw	zero,68(fp)
 1003af4:	000b883a 	mov	r5,zero
 1003af8:	e009883a 	mov	r4,fp
 1003afc:	1006a5c0 	call	1006a5c <_Balloc>
 1003b00:	01bfffc4 	movi	r6,-1
 1003b04:	01c00044 	movi	r7,1
 1003b08:	d8800715 	stw	r2,28(sp)
 1003b0c:	d9800c15 	stw	r6,48(sp)
 1003b10:	e0801015 	stw	r2,64(fp)
 1003b14:	d8000315 	stw	zero,12(sp)
 1003b18:	d9c00b15 	stw	r7,44(sp)
 1003b1c:	d9800615 	stw	r6,24(sp)
 1003b20:	d8002215 	stw	zero,136(sp)
 1003b24:	d8800117 	ldw	r2,4(sp)
 1003b28:	10008916 	blt	r2,zero,1003d50 <_dtoa_r+0x990>
 1003b2c:	d9000517 	ldw	r4,20(sp)
 1003b30:	00c00384 	movi	r3,14
 1003b34:	19008616 	blt	r3,r4,1003d50 <_dtoa_r+0x990>
 1003b38:	200490fa 	slli	r2,r4,3
 1003b3c:	00c04074 	movhi	r3,257
 1003b40:	d9802217 	ldw	r6,136(sp)
 1003b44:	18ff8d04 	addi	r3,r3,-460
 1003b48:	1885883a 	add	r2,r3,r2
 1003b4c:	14000017 	ldw	r16,0(r2)
 1003b50:	14400117 	ldw	r17,4(r2)
 1003b54:	30016316 	blt	r6,zero,10040e4 <_dtoa_r+0xd24>
 1003b58:	800d883a 	mov	r6,r16
 1003b5c:	880f883a 	mov	r7,r17
 1003b60:	9009883a 	mov	r4,r18
 1003b64:	980b883a 	mov	r5,r19
 1003b68:	100b7280 	call	100b728 <__divdf3>
 1003b6c:	180b883a 	mov	r5,r3
 1003b70:	1009883a 	mov	r4,r2
 1003b74:	100d27c0 	call	100d27c <__fixdfsi>
 1003b78:	1009883a 	mov	r4,r2
 1003b7c:	102b883a 	mov	r21,r2
 1003b80:	100d2fc0 	call	100d2fc <__floatsidf>
 1003b84:	800d883a 	mov	r6,r16
 1003b88:	880f883a 	mov	r7,r17
 1003b8c:	1009883a 	mov	r4,r2
 1003b90:	180b883a 	mov	r5,r3
 1003b94:	100c2680 	call	100c268 <__muldf3>
 1003b98:	100d883a 	mov	r6,r2
 1003b9c:	180f883a 	mov	r7,r3
 1003ba0:	9009883a 	mov	r4,r18
 1003ba4:	980b883a 	mov	r5,r19
 1003ba8:	100c9800 	call	100c980 <__subdf3>
 1003bac:	d9c00717 	ldw	r7,28(sp)
 1003bb0:	1009883a 	mov	r4,r2
 1003bb4:	a8800c04 	addi	r2,r21,48
 1003bb8:	38800005 	stb	r2,0(r7)
 1003bbc:	3dc00044 	addi	r23,r7,1
 1003bc0:	d9c00617 	ldw	r7,24(sp)
 1003bc4:	01800044 	movi	r6,1
 1003bc8:	180b883a 	mov	r5,r3
 1003bcc:	2005883a 	mov	r2,r4
 1003bd0:	39803826 	beq	r7,r6,1003cb4 <_dtoa_r+0x8f4>
 1003bd4:	000d883a 	mov	r6,zero
 1003bd8:	01d00934 	movhi	r7,16420
 1003bdc:	100c2680 	call	100c268 <__muldf3>
 1003be0:	000d883a 	mov	r6,zero
 1003be4:	000f883a 	mov	r7,zero
 1003be8:	1009883a 	mov	r4,r2
 1003bec:	180b883a 	mov	r5,r3
 1003bf0:	1025883a 	mov	r18,r2
 1003bf4:	1827883a 	mov	r19,r3
 1003bf8:	100c0100 	call	100c010 <__eqdf2>
 1003bfc:	103f9a26 	beq	r2,zero,1003a68 <_dtoa_r+0x6a8>
 1003c00:	d9c00617 	ldw	r7,24(sp)
 1003c04:	d8c00717 	ldw	r3,28(sp)
 1003c08:	b829883a 	mov	r20,r23
 1003c0c:	38bfffc4 	addi	r2,r7,-1
 1003c10:	18ad883a 	add	r22,r3,r2
 1003c14:	00000a06 	br	1003c40 <_dtoa_r+0x880>
 1003c18:	100c2680 	call	100c268 <__muldf3>
 1003c1c:	000d883a 	mov	r6,zero
 1003c20:	000f883a 	mov	r7,zero
 1003c24:	1009883a 	mov	r4,r2
 1003c28:	180b883a 	mov	r5,r3
 1003c2c:	1025883a 	mov	r18,r2
 1003c30:	1827883a 	mov	r19,r3
 1003c34:	b829883a 	mov	r20,r23
 1003c38:	100c0100 	call	100c010 <__eqdf2>
 1003c3c:	103f8a26 	beq	r2,zero,1003a68 <_dtoa_r+0x6a8>
 1003c40:	800d883a 	mov	r6,r16
 1003c44:	880f883a 	mov	r7,r17
 1003c48:	9009883a 	mov	r4,r18
 1003c4c:	980b883a 	mov	r5,r19
 1003c50:	100b7280 	call	100b728 <__divdf3>
 1003c54:	180b883a 	mov	r5,r3
 1003c58:	1009883a 	mov	r4,r2
 1003c5c:	100d27c0 	call	100d27c <__fixdfsi>
 1003c60:	1009883a 	mov	r4,r2
 1003c64:	102b883a 	mov	r21,r2
 1003c68:	100d2fc0 	call	100d2fc <__floatsidf>
 1003c6c:	800d883a 	mov	r6,r16
 1003c70:	880f883a 	mov	r7,r17
 1003c74:	1009883a 	mov	r4,r2
 1003c78:	180b883a 	mov	r5,r3
 1003c7c:	100c2680 	call	100c268 <__muldf3>
 1003c80:	100d883a 	mov	r6,r2
 1003c84:	180f883a 	mov	r7,r3
 1003c88:	9009883a 	mov	r4,r18
 1003c8c:	980b883a 	mov	r5,r19
 1003c90:	100c9800 	call	100c980 <__subdf3>
 1003c94:	aa000c04 	addi	r8,r21,48
 1003c98:	a2000005 	stb	r8,0(r20)
 1003c9c:	000d883a 	mov	r6,zero
 1003ca0:	01d00934 	movhi	r7,16420
 1003ca4:	1009883a 	mov	r4,r2
 1003ca8:	180b883a 	mov	r5,r3
 1003cac:	a5c00044 	addi	r23,r20,1
 1003cb0:	b53fd91e 	bne	r22,r20,1003c18 <_dtoa_r+0x858>
 1003cb4:	100d883a 	mov	r6,r2
 1003cb8:	180f883a 	mov	r7,r3
 1003cbc:	1009883a 	mov	r4,r2
 1003cc0:	180b883a 	mov	r5,r3
 1003cc4:	100ae7c0 	call	100ae7c <__adddf3>
 1003cc8:	100d883a 	mov	r6,r2
 1003ccc:	180f883a 	mov	r7,r3
 1003cd0:	8009883a 	mov	r4,r16
 1003cd4:	880b883a 	mov	r5,r17
 1003cd8:	1027883a 	mov	r19,r2
 1003cdc:	1825883a 	mov	r18,r3
 1003ce0:	100c1740 	call	100c174 <__ledf2>
 1003ce4:	10000816 	blt	r2,zero,1003d08 <_dtoa_r+0x948>
 1003ce8:	980d883a 	mov	r6,r19
 1003cec:	900f883a 	mov	r7,r18
 1003cf0:	8009883a 	mov	r4,r16
 1003cf4:	880b883a 	mov	r5,r17
 1003cf8:	100c0100 	call	100c010 <__eqdf2>
 1003cfc:	103f5a1e 	bne	r2,zero,1003a68 <_dtoa_r+0x6a8>
 1003d00:	ad40004c 	andi	r21,r21,1
 1003d04:	a83f5826 	beq	r21,zero,1003a68 <_dtoa_r+0x6a8>
 1003d08:	bd3fffc3 	ldbu	r20,-1(r23)
 1003d0c:	b8bfffc4 	addi	r2,r23,-1
 1003d10:	1007883a 	mov	r3,r2
 1003d14:	01400e44 	movi	r5,57
 1003d18:	d9800717 	ldw	r6,28(sp)
 1003d1c:	00000506 	br	1003d34 <_dtoa_r+0x974>
 1003d20:	18ffffc4 	addi	r3,r3,-1
 1003d24:	11824726 	beq	r2,r6,1004644 <_dtoa_r+0x1284>
 1003d28:	1d000003 	ldbu	r20,0(r3)
 1003d2c:	102f883a 	mov	r23,r2
 1003d30:	10bfffc4 	addi	r2,r2,-1
 1003d34:	a1003fcc 	andi	r4,r20,255
 1003d38:	2100201c 	xori	r4,r4,128
 1003d3c:	213fe004 	addi	r4,r4,-128
 1003d40:	217ff726 	beq	r4,r5,1003d20 <_dtoa_r+0x960>
 1003d44:	a2000044 	addi	r8,r20,1
 1003d48:	12000005 	stb	r8,0(r2)
 1003d4c:	003f4606 	br	1003a68 <_dtoa_r+0x6a8>
 1003d50:	d9000b17 	ldw	r4,44(sp)
 1003d54:	2000c826 	beq	r4,zero,1004078 <_dtoa_r+0xcb8>
 1003d58:	d9800317 	ldw	r6,12(sp)
 1003d5c:	00c00044 	movi	r3,1
 1003d60:	1980f90e 	bge	r3,r6,1004148 <_dtoa_r+0xd88>
 1003d64:	d8800617 	ldw	r2,24(sp)
 1003d68:	d8c00a17 	ldw	r3,40(sp)
 1003d6c:	157fffc4 	addi	r21,r2,-1
 1003d70:	1d41f316 	blt	r3,r21,1004540 <_dtoa_r+0x1180>
 1003d74:	1d6bc83a 	sub	r21,r3,r21
 1003d78:	d9c00617 	ldw	r7,24(sp)
 1003d7c:	3802aa16 	blt	r7,zero,1004828 <_dtoa_r+0x1468>
 1003d80:	dd000817 	ldw	r20,32(sp)
 1003d84:	d8800617 	ldw	r2,24(sp)
 1003d88:	d8c00817 	ldw	r3,32(sp)
 1003d8c:	01400044 	movi	r5,1
 1003d90:	e009883a 	mov	r4,fp
 1003d94:	1887883a 	add	r3,r3,r2
 1003d98:	d8c00815 	stw	r3,32(sp)
 1003d9c:	b0ad883a 	add	r22,r22,r2
 1003da0:	1006e680 	call	1006e68 <__i2b>
 1003da4:	1023883a 	mov	r17,r2
 1003da8:	a0000826 	beq	r20,zero,1003dcc <_dtoa_r+0xa0c>
 1003dac:	0580070e 	bge	zero,r22,1003dcc <_dtoa_r+0xa0c>
 1003db0:	a005883a 	mov	r2,r20
 1003db4:	b500b916 	blt	r22,r20,100409c <_dtoa_r+0xcdc>
 1003db8:	d9000817 	ldw	r4,32(sp)
 1003dbc:	a0a9c83a 	sub	r20,r20,r2
 1003dc0:	b0adc83a 	sub	r22,r22,r2
 1003dc4:	2089c83a 	sub	r4,r4,r2
 1003dc8:	d9000815 	stw	r4,32(sp)
 1003dcc:	d9800a17 	ldw	r6,40(sp)
 1003dd0:	0181810e 	bge	zero,r6,10043d8 <_dtoa_r+0x1018>
 1003dd4:	d9c00b17 	ldw	r7,44(sp)
 1003dd8:	3800b326 	beq	r7,zero,10040a8 <_dtoa_r+0xce8>
 1003ddc:	a800b226 	beq	r21,zero,10040a8 <_dtoa_r+0xce8>
 1003de0:	880b883a 	mov	r5,r17
 1003de4:	a80d883a 	mov	r6,r21
 1003de8:	e009883a 	mov	r4,fp
 1003dec:	100709c0 	call	100709c <__pow5mult>
 1003df0:	d9800917 	ldw	r6,36(sp)
 1003df4:	100b883a 	mov	r5,r2
 1003df8:	e009883a 	mov	r4,fp
 1003dfc:	1023883a 	mov	r17,r2
 1003e00:	1006ea40 	call	1006ea4 <__multiply>
 1003e04:	1021883a 	mov	r16,r2
 1003e08:	d8800a17 	ldw	r2,40(sp)
 1003e0c:	d9400917 	ldw	r5,36(sp)
 1003e10:	e009883a 	mov	r4,fp
 1003e14:	1545c83a 	sub	r2,r2,r21
 1003e18:	d8800a15 	stw	r2,40(sp)
 1003e1c:	1006b040 	call	1006b04 <_Bfree>
 1003e20:	d8c00a17 	ldw	r3,40(sp)
 1003e24:	18009f1e 	bne	r3,zero,10040a4 <_dtoa_r+0xce4>
 1003e28:	05c00044 	movi	r23,1
 1003e2c:	e009883a 	mov	r4,fp
 1003e30:	b80b883a 	mov	r5,r23
 1003e34:	1006e680 	call	1006e68 <__i2b>
 1003e38:	d9000d17 	ldw	r4,52(sp)
 1003e3c:	102b883a 	mov	r21,r2
 1003e40:	2000ce26 	beq	r4,zero,100417c <_dtoa_r+0xdbc>
 1003e44:	200d883a 	mov	r6,r4
 1003e48:	100b883a 	mov	r5,r2
 1003e4c:	e009883a 	mov	r4,fp
 1003e50:	100709c0 	call	100709c <__pow5mult>
 1003e54:	d9800317 	ldw	r6,12(sp)
 1003e58:	102b883a 	mov	r21,r2
 1003e5c:	b981810e 	bge	r23,r6,1004464 <_dtoa_r+0x10a4>
 1003e60:	0027883a 	mov	r19,zero
 1003e64:	a8800417 	ldw	r2,16(r21)
 1003e68:	05c00804 	movi	r23,32
 1003e6c:	10800104 	addi	r2,r2,4
 1003e70:	1085883a 	add	r2,r2,r2
 1003e74:	1085883a 	add	r2,r2,r2
 1003e78:	a885883a 	add	r2,r21,r2
 1003e7c:	11000017 	ldw	r4,0(r2)
 1003e80:	1006d500 	call	1006d50 <__hi0bits>
 1003e84:	b885c83a 	sub	r2,r23,r2
 1003e88:	1585883a 	add	r2,r2,r22
 1003e8c:	108007cc 	andi	r2,r2,31
 1003e90:	1000b326 	beq	r2,zero,1004160 <_dtoa_r+0xda0>
 1003e94:	00c00804 	movi	r3,32
 1003e98:	1887c83a 	sub	r3,r3,r2
 1003e9c:	01000104 	movi	r4,4
 1003ea0:	20c2cd0e 	bge	r4,r3,10049d8 <_dtoa_r+0x1618>
 1003ea4:	00c00704 	movi	r3,28
 1003ea8:	1885c83a 	sub	r2,r3,r2
 1003eac:	d8c00817 	ldw	r3,32(sp)
 1003eb0:	a0a9883a 	add	r20,r20,r2
 1003eb4:	b0ad883a 	add	r22,r22,r2
 1003eb8:	1887883a 	add	r3,r3,r2
 1003ebc:	d8c00815 	stw	r3,32(sp)
 1003ec0:	d9800817 	ldw	r6,32(sp)
 1003ec4:	0180040e 	bge	zero,r6,1003ed8 <_dtoa_r+0xb18>
 1003ec8:	800b883a 	mov	r5,r16
 1003ecc:	e009883a 	mov	r4,fp
 1003ed0:	10071dc0 	call	10071dc <__lshift>
 1003ed4:	1021883a 	mov	r16,r2
 1003ed8:	0580050e 	bge	zero,r22,1003ef0 <_dtoa_r+0xb30>
 1003edc:	a80b883a 	mov	r5,r21
 1003ee0:	b00d883a 	mov	r6,r22
 1003ee4:	e009883a 	mov	r4,fp
 1003ee8:	10071dc0 	call	10071dc <__lshift>
 1003eec:	102b883a 	mov	r21,r2
 1003ef0:	d9c00e17 	ldw	r7,56(sp)
 1003ef4:	3801211e 	bne	r7,zero,100437c <_dtoa_r+0xfbc>
 1003ef8:	d9800617 	ldw	r6,24(sp)
 1003efc:	0181380e 	bge	zero,r6,10043e0 <_dtoa_r+0x1020>
 1003f00:	d8c00b17 	ldw	r3,44(sp)
 1003f04:	1800ab1e 	bne	r3,zero,10041b4 <_dtoa_r+0xdf4>
 1003f08:	dc800717 	ldw	r18,28(sp)
 1003f0c:	dcc00617 	ldw	r19,24(sp)
 1003f10:	9029883a 	mov	r20,r18
 1003f14:	00000206 	br	1003f20 <_dtoa_r+0xb60>
 1003f18:	1006b2c0 	call	1006b2c <__multadd>
 1003f1c:	1021883a 	mov	r16,r2
 1003f20:	a80b883a 	mov	r5,r21
 1003f24:	8009883a 	mov	r4,r16
 1003f28:	10031c00 	call	10031c0 <quorem>
 1003f2c:	10800c04 	addi	r2,r2,48
 1003f30:	90800005 	stb	r2,0(r18)
 1003f34:	94800044 	addi	r18,r18,1
 1003f38:	9507c83a 	sub	r3,r18,r20
 1003f3c:	000f883a 	mov	r7,zero
 1003f40:	01800284 	movi	r6,10
 1003f44:	800b883a 	mov	r5,r16
 1003f48:	e009883a 	mov	r4,fp
 1003f4c:	1cfff216 	blt	r3,r19,1003f18 <_dtoa_r+0xb58>
 1003f50:	1011883a 	mov	r8,r2
 1003f54:	d8800617 	ldw	r2,24(sp)
 1003f58:	0082370e 	bge	zero,r2,1004838 <_dtoa_r+0x1478>
 1003f5c:	d9000717 	ldw	r4,28(sp)
 1003f60:	0025883a 	mov	r18,zero
 1003f64:	20af883a 	add	r23,r4,r2
 1003f68:	01800044 	movi	r6,1
 1003f6c:	800b883a 	mov	r5,r16
 1003f70:	e009883a 	mov	r4,fp
 1003f74:	da001715 	stw	r8,92(sp)
 1003f78:	10071dc0 	call	10071dc <__lshift>
 1003f7c:	a80b883a 	mov	r5,r21
 1003f80:	1009883a 	mov	r4,r2
 1003f84:	d8800915 	stw	r2,36(sp)
 1003f88:	10073240 	call	1007324 <__mcmp>
 1003f8c:	da001717 	ldw	r8,92(sp)
 1003f90:	0081800e 	bge	zero,r2,1004594 <_dtoa_r+0x11d4>
 1003f94:	b93fffc3 	ldbu	r4,-1(r23)
 1003f98:	b8bfffc4 	addi	r2,r23,-1
 1003f9c:	1007883a 	mov	r3,r2
 1003fa0:	01800e44 	movi	r6,57
 1003fa4:	d9c00717 	ldw	r7,28(sp)
 1003fa8:	00000506 	br	1003fc0 <_dtoa_r+0xc00>
 1003fac:	18ffffc4 	addi	r3,r3,-1
 1003fb0:	11c12326 	beq	r2,r7,1004440 <_dtoa_r+0x1080>
 1003fb4:	19000003 	ldbu	r4,0(r3)
 1003fb8:	102f883a 	mov	r23,r2
 1003fbc:	10bfffc4 	addi	r2,r2,-1
 1003fc0:	21403fcc 	andi	r5,r4,255
 1003fc4:	2940201c 	xori	r5,r5,128
 1003fc8:	297fe004 	addi	r5,r5,-128
 1003fcc:	29bff726 	beq	r5,r6,1003fac <_dtoa_r+0xbec>
 1003fd0:	21000044 	addi	r4,r4,1
 1003fd4:	11000005 	stb	r4,0(r2)
 1003fd8:	a80b883a 	mov	r5,r21
 1003fdc:	e009883a 	mov	r4,fp
 1003fe0:	1006b040 	call	1006b04 <_Bfree>
 1003fe4:	883ea026 	beq	r17,zero,1003a68 <_dtoa_r+0x6a8>
 1003fe8:	90000426 	beq	r18,zero,1003ffc <_dtoa_r+0xc3c>
 1003fec:	94400326 	beq	r18,r17,1003ffc <_dtoa_r+0xc3c>
 1003ff0:	900b883a 	mov	r5,r18
 1003ff4:	e009883a 	mov	r4,fp
 1003ff8:	1006b040 	call	1006b04 <_Bfree>
 1003ffc:	880b883a 	mov	r5,r17
 1004000:	e009883a 	mov	r4,fp
 1004004:	1006b040 	call	1006b04 <_Bfree>
 1004008:	003e9706 	br	1003a68 <_dtoa_r+0x6a8>
 100400c:	01800044 	movi	r6,1
 1004010:	d9800e15 	stw	r6,56(sp)
 1004014:	003d9606 	br	1003670 <_dtoa_r+0x2b0>
 1004018:	d8800817 	ldw	r2,32(sp)
 100401c:	d8c00517 	ldw	r3,20(sp)
 1004020:	d8000d15 	stw	zero,52(sp)
 1004024:	10c5c83a 	sub	r2,r2,r3
 1004028:	00c9c83a 	sub	r4,zero,r3
 100402c:	d8800815 	stw	r2,32(sp)
 1004030:	d9000a15 	stw	r4,40(sp)
 1004034:	003d9706 	br	1003694 <_dtoa_r+0x2d4>
 1004038:	05adc83a 	sub	r22,zero,r22
 100403c:	dd800815 	stw	r22,32(sp)
 1004040:	002d883a 	mov	r22,zero
 1004044:	003d8e06 	br	1003680 <_dtoa_r+0x2c0>
 1004048:	d9000517 	ldw	r4,20(sp)
 100404c:	100d2fc0 	call	100d2fc <__floatsidf>
 1004050:	100d883a 	mov	r6,r2
 1004054:	180f883a 	mov	r7,r3
 1004058:	a009883a 	mov	r4,r20
 100405c:	880b883a 	mov	r5,r17
 1004060:	100c0100 	call	100c010 <__eqdf2>
 1004064:	103d7126 	beq	r2,zero,100362c <_dtoa_r+0x26c>
 1004068:	d9c00517 	ldw	r7,20(sp)
 100406c:	39ffffc4 	addi	r7,r7,-1
 1004070:	d9c00515 	stw	r7,20(sp)
 1004074:	003d6d06 	br	100362c <_dtoa_r+0x26c>
 1004078:	dd400a17 	ldw	r21,40(sp)
 100407c:	dd000817 	ldw	r20,32(sp)
 1004080:	0023883a 	mov	r17,zero
 1004084:	003f4806 	br	1003da8 <_dtoa_r+0x9e8>
 1004088:	10e3c83a 	sub	r17,r2,r3
 100408c:	9448983a 	sll	r4,r18,r17
 1004090:	003d3206 	br	100355c <_dtoa_r+0x19c>
 1004094:	d8000e15 	stw	zero,56(sp)
 1004098:	003d7506 	br	1003670 <_dtoa_r+0x2b0>
 100409c:	b005883a 	mov	r2,r22
 10040a0:	003f4506 	br	1003db8 <_dtoa_r+0x9f8>
 10040a4:	dc000915 	stw	r16,36(sp)
 10040a8:	d9800a17 	ldw	r6,40(sp)
 10040ac:	d9400917 	ldw	r5,36(sp)
 10040b0:	e009883a 	mov	r4,fp
 10040b4:	100709c0 	call	100709c <__pow5mult>
 10040b8:	1021883a 	mov	r16,r2
 10040bc:	003f5a06 	br	1003e28 <_dtoa_r+0xa68>
 10040c0:	01c00044 	movi	r7,1
 10040c4:	d9c00b15 	stw	r7,44(sp)
 10040c8:	d8802217 	ldw	r2,136(sp)
 10040cc:	0081280e 	bge	zero,r2,1004570 <_dtoa_r+0x11b0>
 10040d0:	100d883a 	mov	r6,r2
 10040d4:	1021883a 	mov	r16,r2
 10040d8:	d8800c15 	stw	r2,48(sp)
 10040dc:	d8800615 	stw	r2,24(sp)
 10040e0:	003d8806 	br	1003704 <_dtoa_r+0x344>
 10040e4:	d8800617 	ldw	r2,24(sp)
 10040e8:	00be9b16 	blt	zero,r2,1003b58 <_dtoa_r+0x798>
 10040ec:	10010f1e 	bne	r2,zero,100452c <_dtoa_r+0x116c>
 10040f0:	880b883a 	mov	r5,r17
 10040f4:	000d883a 	mov	r6,zero
 10040f8:	01d00534 	movhi	r7,16404
 10040fc:	8009883a 	mov	r4,r16
 1004100:	100c2680 	call	100c268 <__muldf3>
 1004104:	900d883a 	mov	r6,r18
 1004108:	980f883a 	mov	r7,r19
 100410c:	1009883a 	mov	r4,r2
 1004110:	180b883a 	mov	r5,r3
 1004114:	100c0980 	call	100c098 <__gedf2>
 1004118:	002b883a 	mov	r21,zero
 100411c:	0023883a 	mov	r17,zero
 1004120:	1000bf16 	blt	r2,zero,1004420 <_dtoa_r+0x1060>
 1004124:	d9802217 	ldw	r6,136(sp)
 1004128:	ddc00717 	ldw	r23,28(sp)
 100412c:	018c303a 	nor	r6,zero,r6
 1004130:	d9800515 	stw	r6,20(sp)
 1004134:	a80b883a 	mov	r5,r21
 1004138:	e009883a 	mov	r4,fp
 100413c:	1006b040 	call	1006b04 <_Bfree>
 1004140:	883e4926 	beq	r17,zero,1003a68 <_dtoa_r+0x6a8>
 1004144:	003fad06 	br	1003ffc <_dtoa_r+0xc3c>
 1004148:	d9c01117 	ldw	r7,68(sp)
 100414c:	3801bc26 	beq	r7,zero,1004840 <_dtoa_r+0x1480>
 1004150:	10810cc4 	addi	r2,r2,1075
 1004154:	dd400a17 	ldw	r21,40(sp)
 1004158:	dd000817 	ldw	r20,32(sp)
 100415c:	003f0a06 	br	1003d88 <_dtoa_r+0x9c8>
 1004160:	00800704 	movi	r2,28
 1004164:	d9000817 	ldw	r4,32(sp)
 1004168:	a0a9883a 	add	r20,r20,r2
 100416c:	b0ad883a 	add	r22,r22,r2
 1004170:	2089883a 	add	r4,r4,r2
 1004174:	d9000815 	stw	r4,32(sp)
 1004178:	003f5106 	br	1003ec0 <_dtoa_r+0xb00>
 100417c:	d8c00317 	ldw	r3,12(sp)
 1004180:	b8c1fc0e 	bge	r23,r3,1004974 <_dtoa_r+0x15b4>
 1004184:	0027883a 	mov	r19,zero
 1004188:	b805883a 	mov	r2,r23
 100418c:	003f3e06 	br	1003e88 <_dtoa_r+0xac8>
 1004190:	880b883a 	mov	r5,r17
 1004194:	e009883a 	mov	r4,fp
 1004198:	000f883a 	mov	r7,zero
 100419c:	01800284 	movi	r6,10
 10041a0:	1006b2c0 	call	1006b2c <__multadd>
 10041a4:	d9000c17 	ldw	r4,48(sp)
 10041a8:	1023883a 	mov	r17,r2
 10041ac:	0102040e 	bge	zero,r4,10049c0 <_dtoa_r+0x1600>
 10041b0:	d9000615 	stw	r4,24(sp)
 10041b4:	0500050e 	bge	zero,r20,10041cc <_dtoa_r+0xe0c>
 10041b8:	880b883a 	mov	r5,r17
 10041bc:	a00d883a 	mov	r6,r20
 10041c0:	e009883a 	mov	r4,fp
 10041c4:	10071dc0 	call	10071dc <__lshift>
 10041c8:	1023883a 	mov	r17,r2
 10041cc:	9801241e 	bne	r19,zero,1004660 <_dtoa_r+0x12a0>
 10041d0:	8829883a 	mov	r20,r17
 10041d4:	d9000617 	ldw	r4,24(sp)
 10041d8:	dcc00717 	ldw	r19,28(sp)
 10041dc:	9480004c 	andi	r18,r18,1
 10041e0:	20bfffc4 	addi	r2,r4,-1
 10041e4:	9885883a 	add	r2,r19,r2
 10041e8:	d8800415 	stw	r2,16(sp)
 10041ec:	dc800615 	stw	r18,24(sp)
 10041f0:	a80b883a 	mov	r5,r21
 10041f4:	8009883a 	mov	r4,r16
 10041f8:	10031c00 	call	10031c0 <quorem>
 10041fc:	880b883a 	mov	r5,r17
 1004200:	8009883a 	mov	r4,r16
 1004204:	102f883a 	mov	r23,r2
 1004208:	10073240 	call	1007324 <__mcmp>
 100420c:	a80b883a 	mov	r5,r21
 1004210:	a00d883a 	mov	r6,r20
 1004214:	e009883a 	mov	r4,fp
 1004218:	102d883a 	mov	r22,r2
 100421c:	10073840 	call	1007384 <__mdiff>
 1004220:	1007883a 	mov	r3,r2
 1004224:	10800317 	ldw	r2,12(r2)
 1004228:	bc800c04 	addi	r18,r23,48
 100422c:	180b883a 	mov	r5,r3
 1004230:	10004e1e 	bne	r2,zero,100436c <_dtoa_r+0xfac>
 1004234:	8009883a 	mov	r4,r16
 1004238:	d8c01615 	stw	r3,88(sp)
 100423c:	10073240 	call	1007324 <__mcmp>
 1004240:	d8c01617 	ldw	r3,88(sp)
 1004244:	e009883a 	mov	r4,fp
 1004248:	d8801615 	stw	r2,88(sp)
 100424c:	180b883a 	mov	r5,r3
 1004250:	1006b040 	call	1006b04 <_Bfree>
 1004254:	d8801617 	ldw	r2,88(sp)
 1004258:	1000041e 	bne	r2,zero,100426c <_dtoa_r+0xeac>
 100425c:	d9800317 	ldw	r6,12(sp)
 1004260:	3000021e 	bne	r6,zero,100426c <_dtoa_r+0xeac>
 1004264:	d8c00617 	ldw	r3,24(sp)
 1004268:	18003726 	beq	r3,zero,1004348 <_dtoa_r+0xf88>
 100426c:	b0002016 	blt	r22,zero,10042f0 <_dtoa_r+0xf30>
 1004270:	b000041e 	bne	r22,zero,1004284 <_dtoa_r+0xec4>
 1004274:	d9000317 	ldw	r4,12(sp)
 1004278:	2000021e 	bne	r4,zero,1004284 <_dtoa_r+0xec4>
 100427c:	d8c00617 	ldw	r3,24(sp)
 1004280:	18001b26 	beq	r3,zero,10042f0 <_dtoa_r+0xf30>
 1004284:	00810716 	blt	zero,r2,10046a4 <_dtoa_r+0x12e4>
 1004288:	d8c00417 	ldw	r3,16(sp)
 100428c:	9d800044 	addi	r22,r19,1
 1004290:	9c800005 	stb	r18,0(r19)
 1004294:	b02f883a 	mov	r23,r22
 1004298:	98c10626 	beq	r19,r3,10046b4 <_dtoa_r+0x12f4>
 100429c:	800b883a 	mov	r5,r16
 10042a0:	000f883a 	mov	r7,zero
 10042a4:	01800284 	movi	r6,10
 10042a8:	e009883a 	mov	r4,fp
 10042ac:	1006b2c0 	call	1006b2c <__multadd>
 10042b0:	1021883a 	mov	r16,r2
 10042b4:	000f883a 	mov	r7,zero
 10042b8:	01800284 	movi	r6,10
 10042bc:	880b883a 	mov	r5,r17
 10042c0:	e009883a 	mov	r4,fp
 10042c4:	8d002526 	beq	r17,r20,100435c <_dtoa_r+0xf9c>
 10042c8:	1006b2c0 	call	1006b2c <__multadd>
 10042cc:	a00b883a 	mov	r5,r20
 10042d0:	000f883a 	mov	r7,zero
 10042d4:	01800284 	movi	r6,10
 10042d8:	e009883a 	mov	r4,fp
 10042dc:	1023883a 	mov	r17,r2
 10042e0:	1006b2c0 	call	1006b2c <__multadd>
 10042e4:	1029883a 	mov	r20,r2
 10042e8:	b027883a 	mov	r19,r22
 10042ec:	003fc006 	br	10041f0 <_dtoa_r+0xe30>
 10042f0:	9011883a 	mov	r8,r18
 10042f4:	00800e0e 	bge	zero,r2,1004330 <_dtoa_r+0xf70>
 10042f8:	800b883a 	mov	r5,r16
 10042fc:	01800044 	movi	r6,1
 1004300:	e009883a 	mov	r4,fp
 1004304:	da001715 	stw	r8,92(sp)
 1004308:	10071dc0 	call	10071dc <__lshift>
 100430c:	a80b883a 	mov	r5,r21
 1004310:	1009883a 	mov	r4,r2
 1004314:	1021883a 	mov	r16,r2
 1004318:	10073240 	call	1007324 <__mcmp>
 100431c:	da001717 	ldw	r8,92(sp)
 1004320:	0081960e 	bge	zero,r2,100497c <_dtoa_r+0x15bc>
 1004324:	00800e44 	movi	r2,57
 1004328:	40817026 	beq	r8,r2,10048ec <_dtoa_r+0x152c>
 100432c:	ba000c44 	addi	r8,r23,49
 1004330:	8825883a 	mov	r18,r17
 1004334:	9dc00044 	addi	r23,r19,1
 1004338:	9a000005 	stb	r8,0(r19)
 100433c:	a023883a 	mov	r17,r20
 1004340:	dc000915 	stw	r16,36(sp)
 1004344:	003f2406 	br	1003fd8 <_dtoa_r+0xc18>
 1004348:	00800e44 	movi	r2,57
 100434c:	9011883a 	mov	r8,r18
 1004350:	90816626 	beq	r18,r2,10048ec <_dtoa_r+0x152c>
 1004354:	05bff516 	blt	zero,r22,100432c <_dtoa_r+0xf6c>
 1004358:	003ff506 	br	1004330 <_dtoa_r+0xf70>
 100435c:	1006b2c0 	call	1006b2c <__multadd>
 1004360:	1023883a 	mov	r17,r2
 1004364:	1029883a 	mov	r20,r2
 1004368:	003fdf06 	br	10042e8 <_dtoa_r+0xf28>
 100436c:	e009883a 	mov	r4,fp
 1004370:	1006b040 	call	1006b04 <_Bfree>
 1004374:	00800044 	movi	r2,1
 1004378:	003fbc06 	br	100426c <_dtoa_r+0xeac>
 100437c:	a80b883a 	mov	r5,r21
 1004380:	8009883a 	mov	r4,r16
 1004384:	10073240 	call	1007324 <__mcmp>
 1004388:	103edb0e 	bge	r2,zero,1003ef8 <_dtoa_r+0xb38>
 100438c:	800b883a 	mov	r5,r16
 1004390:	000f883a 	mov	r7,zero
 1004394:	01800284 	movi	r6,10
 1004398:	e009883a 	mov	r4,fp
 100439c:	1006b2c0 	call	1006b2c <__multadd>
 10043a0:	1021883a 	mov	r16,r2
 10043a4:	d8800517 	ldw	r2,20(sp)
 10043a8:	d8c00b17 	ldw	r3,44(sp)
 10043ac:	10bfffc4 	addi	r2,r2,-1
 10043b0:	d8800515 	stw	r2,20(sp)
 10043b4:	183f761e 	bne	r3,zero,1004190 <_dtoa_r+0xdd0>
 10043b8:	d9000c17 	ldw	r4,48(sp)
 10043bc:	0101730e 	bge	zero,r4,100498c <_dtoa_r+0x15cc>
 10043c0:	d9000615 	stw	r4,24(sp)
 10043c4:	003ed006 	br	1003f08 <_dtoa_r+0xb48>
 10043c8:	00800084 	movi	r2,2
 10043cc:	3081861e 	bne	r6,r2,10049e8 <_dtoa_r+0x1628>
 10043d0:	d8000b15 	stw	zero,44(sp)
 10043d4:	003f3c06 	br	10040c8 <_dtoa_r+0xd08>
 10043d8:	dc000917 	ldw	r16,36(sp)
 10043dc:	003e9206 	br	1003e28 <_dtoa_r+0xa68>
 10043e0:	d9c00317 	ldw	r7,12(sp)
 10043e4:	00800084 	movi	r2,2
 10043e8:	11fec50e 	bge	r2,r7,1003f00 <_dtoa_r+0xb40>
 10043ec:	d9000617 	ldw	r4,24(sp)
 10043f0:	20013c1e 	bne	r4,zero,10048e4 <_dtoa_r+0x1524>
 10043f4:	a80b883a 	mov	r5,r21
 10043f8:	000f883a 	mov	r7,zero
 10043fc:	01800144 	movi	r6,5
 1004400:	e009883a 	mov	r4,fp
 1004404:	1006b2c0 	call	1006b2c <__multadd>
 1004408:	100b883a 	mov	r5,r2
 100440c:	8009883a 	mov	r4,r16
 1004410:	102b883a 	mov	r21,r2
 1004414:	10073240 	call	1007324 <__mcmp>
 1004418:	dc000915 	stw	r16,36(sp)
 100441c:	00bf410e 	bge	zero,r2,1004124 <_dtoa_r+0xd64>
 1004420:	d9c00717 	ldw	r7,28(sp)
 1004424:	00800c44 	movi	r2,49
 1004428:	38800005 	stb	r2,0(r7)
 100442c:	d8800517 	ldw	r2,20(sp)
 1004430:	3dc00044 	addi	r23,r7,1
 1004434:	10800044 	addi	r2,r2,1
 1004438:	d8800515 	stw	r2,20(sp)
 100443c:	003f3d06 	br	1004134 <_dtoa_r+0xd74>
 1004440:	d9800517 	ldw	r6,20(sp)
 1004444:	d9c00717 	ldw	r7,28(sp)
 1004448:	00800c44 	movi	r2,49
 100444c:	31800044 	addi	r6,r6,1
 1004450:	d9800515 	stw	r6,20(sp)
 1004454:	38800005 	stb	r2,0(r7)
 1004458:	003edf06 	br	1003fd8 <_dtoa_r+0xc18>
 100445c:	d8000b15 	stw	zero,44(sp)
 1004460:	003c9f06 	br	10036e0 <_dtoa_r+0x320>
 1004464:	903e7e1e 	bne	r18,zero,1003e60 <_dtoa_r+0xaa0>
 1004468:	00800434 	movhi	r2,16
 100446c:	10bfffc4 	addi	r2,r2,-1
 1004470:	9884703a 	and	r2,r19,r2
 1004474:	1000ea1e 	bne	r2,zero,1004820 <_dtoa_r+0x1460>
 1004478:	9cdffc2c 	andhi	r19,r19,32752
 100447c:	9800e826 	beq	r19,zero,1004820 <_dtoa_r+0x1460>
 1004480:	d9c00817 	ldw	r7,32(sp)
 1004484:	b5800044 	addi	r22,r22,1
 1004488:	04c00044 	movi	r19,1
 100448c:	39c00044 	addi	r7,r7,1
 1004490:	d9c00815 	stw	r7,32(sp)
 1004494:	d8800d17 	ldw	r2,52(sp)
 1004498:	103e721e 	bne	r2,zero,1003e64 <_dtoa_r+0xaa4>
 100449c:	00800044 	movi	r2,1
 10044a0:	003e7906 	br	1003e88 <_dtoa_r+0xac8>
 10044a4:	8009883a 	mov	r4,r16
 10044a8:	100d2fc0 	call	100d2fc <__floatsidf>
 10044ac:	d9800f17 	ldw	r6,60(sp)
 10044b0:	d9c01017 	ldw	r7,64(sp)
 10044b4:	1009883a 	mov	r4,r2
 10044b8:	180b883a 	mov	r5,r3
 10044bc:	100c2680 	call	100c268 <__muldf3>
 10044c0:	000d883a 	mov	r6,zero
 10044c4:	01d00734 	movhi	r7,16412
 10044c8:	1009883a 	mov	r4,r2
 10044cc:	180b883a 	mov	r5,r3
 10044d0:	100ae7c0 	call	100ae7c <__adddf3>
 10044d4:	047f3034 	movhi	r17,64704
 10044d8:	1021883a 	mov	r16,r2
 10044dc:	1c63883a 	add	r17,r3,r17
 10044e0:	d9000f17 	ldw	r4,60(sp)
 10044e4:	d9401017 	ldw	r5,64(sp)
 10044e8:	000d883a 	mov	r6,zero
 10044ec:	01d00534 	movhi	r7,16404
 10044f0:	100c9800 	call	100c980 <__subdf3>
 10044f4:	800d883a 	mov	r6,r16
 10044f8:	880f883a 	mov	r7,r17
 10044fc:	1009883a 	mov	r4,r2
 1004500:	180b883a 	mov	r5,r3
 1004504:	102b883a 	mov	r21,r2
 1004508:	1829883a 	mov	r20,r3
 100450c:	100c0980 	call	100c098 <__gedf2>
 1004510:	00806c16 	blt	zero,r2,10046c4 <_dtoa_r+0x1304>
 1004514:	89e0003c 	xorhi	r7,r17,32768
 1004518:	800d883a 	mov	r6,r16
 100451c:	a809883a 	mov	r4,r21
 1004520:	a00b883a 	mov	r5,r20
 1004524:	100c1740 	call	100c174 <__ledf2>
 1004528:	103d7e0e 	bge	r2,zero,1003b24 <_dtoa_r+0x764>
 100452c:	002b883a 	mov	r21,zero
 1004530:	0023883a 	mov	r17,zero
 1004534:	003efb06 	br	1004124 <_dtoa_r+0xd64>
 1004538:	d8800717 	ldw	r2,28(sp)
 100453c:	003bd006 	br	1003480 <_dtoa_r+0xc0>
 1004540:	d9000a17 	ldw	r4,40(sp)
 1004544:	d9800d17 	ldw	r6,52(sp)
 1004548:	dd400a15 	stw	r21,40(sp)
 100454c:	a905c83a 	sub	r2,r21,r4
 1004550:	308d883a 	add	r6,r6,r2
 1004554:	d9800d15 	stw	r6,52(sp)
 1004558:	002b883a 	mov	r21,zero
 100455c:	003e0606 	br	1003d78 <_dtoa_r+0x9b8>
 1004560:	9023883a 	mov	r17,r18
 1004564:	9829883a 	mov	r20,r19
 1004568:	04000084 	movi	r16,2
 100456c:	003c9206 	br	10037b8 <_dtoa_r+0x3f8>
 1004570:	04000044 	movi	r16,1
 1004574:	dc000c15 	stw	r16,48(sp)
 1004578:	dc000615 	stw	r16,24(sp)
 100457c:	dc002215 	stw	r16,136(sp)
 1004580:	e0001115 	stw	zero,68(fp)
 1004584:	000b883a 	mov	r5,zero
 1004588:	003c6906 	br	1003730 <_dtoa_r+0x370>
 100458c:	3021883a 	mov	r16,r6
 1004590:	003ffb06 	br	1004580 <_dtoa_r+0x11c0>
 1004594:	1000021e 	bne	r2,zero,10045a0 <_dtoa_r+0x11e0>
 1004598:	4200004c 	andi	r8,r8,1
 100459c:	403e7d1e 	bne	r8,zero,1003f94 <_dtoa_r+0xbd4>
 10045a0:	01000c04 	movi	r4,48
 10045a4:	00000106 	br	10045ac <_dtoa_r+0x11ec>
 10045a8:	102f883a 	mov	r23,r2
 10045ac:	b8bfffc4 	addi	r2,r23,-1
 10045b0:	10c00007 	ldb	r3,0(r2)
 10045b4:	193ffc26 	beq	r3,r4,10045a8 <_dtoa_r+0x11e8>
 10045b8:	003e8706 	br	1003fd8 <_dtoa_r+0xc18>
 10045bc:	d8800517 	ldw	r2,20(sp)
 10045c0:	00a3c83a 	sub	r17,zero,r2
 10045c4:	8800a426 	beq	r17,zero,1004858 <_dtoa_r+0x1498>
 10045c8:	888003cc 	andi	r2,r17,15
 10045cc:	100490fa 	slli	r2,r2,3
 10045d0:	00c04074 	movhi	r3,257
 10045d4:	18ff8d04 	addi	r3,r3,-460
 10045d8:	1885883a 	add	r2,r3,r2
 10045dc:	11800017 	ldw	r6,0(r2)
 10045e0:	11c00117 	ldw	r7,4(r2)
 10045e4:	9009883a 	mov	r4,r18
 10045e8:	980b883a 	mov	r5,r19
 10045ec:	8823d13a 	srai	r17,r17,4
 10045f0:	100c2680 	call	100c268 <__muldf3>
 10045f4:	d8800f15 	stw	r2,60(sp)
 10045f8:	d8c01015 	stw	r3,64(sp)
 10045fc:	8800e826 	beq	r17,zero,10049a0 <_dtoa_r+0x15e0>
 1004600:	05004074 	movhi	r20,257
 1004604:	a53f8304 	addi	r20,r20,-500
 1004608:	04000084 	movi	r16,2
 100460c:	8980004c 	andi	r6,r17,1
 1004610:	1009883a 	mov	r4,r2
 1004614:	8823d07a 	srai	r17,r17,1
 1004618:	180b883a 	mov	r5,r3
 100461c:	30000426 	beq	r6,zero,1004630 <_dtoa_r+0x1270>
 1004620:	a1800017 	ldw	r6,0(r20)
 1004624:	a1c00117 	ldw	r7,4(r20)
 1004628:	84000044 	addi	r16,r16,1
 100462c:	100c2680 	call	100c268 <__muldf3>
 1004630:	a5000204 	addi	r20,r20,8
 1004634:	883ff51e 	bne	r17,zero,100460c <_dtoa_r+0x124c>
 1004638:	d8800f15 	stw	r2,60(sp)
 100463c:	d8c01015 	stw	r3,64(sp)
 1004640:	003c7606 	br	100381c <_dtoa_r+0x45c>
 1004644:	00c00c04 	movi	r3,48
 1004648:	10c00005 	stb	r3,0(r2)
 100464c:	d8c00517 	ldw	r3,20(sp)
 1004650:	bd3fffc3 	ldbu	r20,-1(r23)
 1004654:	18c00044 	addi	r3,r3,1
 1004658:	d8c00515 	stw	r3,20(sp)
 100465c:	003db906 	br	1003d44 <_dtoa_r+0x984>
 1004660:	89400117 	ldw	r5,4(r17)
 1004664:	e009883a 	mov	r4,fp
 1004668:	1006a5c0 	call	1006a5c <_Balloc>
 100466c:	89800417 	ldw	r6,16(r17)
 1004670:	89400304 	addi	r5,r17,12
 1004674:	11000304 	addi	r4,r2,12
 1004678:	31800084 	addi	r6,r6,2
 100467c:	318d883a 	add	r6,r6,r6
 1004680:	318d883a 	add	r6,r6,r6
 1004684:	1027883a 	mov	r19,r2
 1004688:	10066900 	call	1006690 <memcpy>
 100468c:	01800044 	movi	r6,1
 1004690:	980b883a 	mov	r5,r19
 1004694:	e009883a 	mov	r4,fp
 1004698:	10071dc0 	call	10071dc <__lshift>
 100469c:	1029883a 	mov	r20,r2
 10046a0:	003ecc06 	br	10041d4 <_dtoa_r+0xe14>
 10046a4:	00800e44 	movi	r2,57
 10046a8:	90809026 	beq	r18,r2,10048ec <_dtoa_r+0x152c>
 10046ac:	92000044 	addi	r8,r18,1
 10046b0:	003f1f06 	br	1004330 <_dtoa_r+0xf70>
 10046b4:	9011883a 	mov	r8,r18
 10046b8:	8825883a 	mov	r18,r17
 10046bc:	a023883a 	mov	r17,r20
 10046c0:	003e2906 	br	1003f68 <_dtoa_r+0xba8>
 10046c4:	002b883a 	mov	r21,zero
 10046c8:	0023883a 	mov	r17,zero
 10046cc:	003f5406 	br	1004420 <_dtoa_r+0x1060>
 10046d0:	61bfffc4 	addi	r6,r12,-1
 10046d4:	300490fa 	slli	r2,r6,3
 10046d8:	00c04074 	movhi	r3,257
 10046dc:	18ff8d04 	addi	r3,r3,-460
 10046e0:	1885883a 	add	r2,r3,r2
 10046e4:	11000017 	ldw	r4,0(r2)
 10046e8:	11400117 	ldw	r5,4(r2)
 10046ec:	d8800717 	ldw	r2,28(sp)
 10046f0:	880f883a 	mov	r7,r17
 10046f4:	d9801215 	stw	r6,72(sp)
 10046f8:	800d883a 	mov	r6,r16
 10046fc:	db001615 	stw	r12,88(sp)
 1004700:	15c00044 	addi	r23,r2,1
 1004704:	100c2680 	call	100c268 <__muldf3>
 1004708:	d9401017 	ldw	r5,64(sp)
 100470c:	d9000f17 	ldw	r4,60(sp)
 1004710:	d8c01515 	stw	r3,84(sp)
 1004714:	d8801415 	stw	r2,80(sp)
 1004718:	100d27c0 	call	100d27c <__fixdfsi>
 100471c:	1009883a 	mov	r4,r2
 1004720:	1021883a 	mov	r16,r2
 1004724:	100d2fc0 	call	100d2fc <__floatsidf>
 1004728:	d9000f17 	ldw	r4,60(sp)
 100472c:	d9401017 	ldw	r5,64(sp)
 1004730:	100d883a 	mov	r6,r2
 1004734:	180f883a 	mov	r7,r3
 1004738:	100c9800 	call	100c980 <__subdf3>
 100473c:	1829883a 	mov	r20,r3
 1004740:	d8c00717 	ldw	r3,28(sp)
 1004744:	84000c04 	addi	r16,r16,48
 1004748:	1023883a 	mov	r17,r2
 100474c:	1c000005 	stb	r16,0(r3)
 1004750:	db001617 	ldw	r12,88(sp)
 1004754:	00800044 	movi	r2,1
 1004758:	60802226 	beq	r12,r2,10047e4 <_dtoa_r+0x1424>
 100475c:	d9c00717 	ldw	r7,28(sp)
 1004760:	8805883a 	mov	r2,r17
 1004764:	b82b883a 	mov	r21,r23
 1004768:	3b19883a 	add	r12,r7,r12
 100476c:	6023883a 	mov	r17,r12
 1004770:	a007883a 	mov	r3,r20
 1004774:	dc800f15 	stw	r18,60(sp)
 1004778:	000d883a 	mov	r6,zero
 100477c:	01d00934 	movhi	r7,16420
 1004780:	1009883a 	mov	r4,r2
 1004784:	180b883a 	mov	r5,r3
 1004788:	100c2680 	call	100c268 <__muldf3>
 100478c:	180b883a 	mov	r5,r3
 1004790:	1009883a 	mov	r4,r2
 1004794:	1829883a 	mov	r20,r3
 1004798:	1025883a 	mov	r18,r2
 100479c:	100d27c0 	call	100d27c <__fixdfsi>
 10047a0:	1009883a 	mov	r4,r2
 10047a4:	1021883a 	mov	r16,r2
 10047a8:	100d2fc0 	call	100d2fc <__floatsidf>
 10047ac:	100d883a 	mov	r6,r2
 10047b0:	180f883a 	mov	r7,r3
 10047b4:	9009883a 	mov	r4,r18
 10047b8:	a00b883a 	mov	r5,r20
 10047bc:	84000c04 	addi	r16,r16,48
 10047c0:	100c9800 	call	100c980 <__subdf3>
 10047c4:	ad400044 	addi	r21,r21,1
 10047c8:	ac3fffc5 	stb	r16,-1(r21)
 10047cc:	ac7fea1e 	bne	r21,r17,1004778 <_dtoa_r+0x13b8>
 10047d0:	1023883a 	mov	r17,r2
 10047d4:	d8801217 	ldw	r2,72(sp)
 10047d8:	dc800f17 	ldw	r18,60(sp)
 10047dc:	1829883a 	mov	r20,r3
 10047e0:	b8af883a 	add	r23,r23,r2
 10047e4:	d9001417 	ldw	r4,80(sp)
 10047e8:	d9401517 	ldw	r5,84(sp)
 10047ec:	000d883a 	mov	r6,zero
 10047f0:	01cff834 	movhi	r7,16352
 10047f4:	100ae7c0 	call	100ae7c <__adddf3>
 10047f8:	880d883a 	mov	r6,r17
 10047fc:	a00f883a 	mov	r7,r20
 1004800:	1009883a 	mov	r4,r2
 1004804:	180b883a 	mov	r5,r3
 1004808:	100c1740 	call	100c174 <__ledf2>
 100480c:	10003e0e 	bge	r2,zero,1004908 <_dtoa_r+0x1548>
 1004810:	d9001317 	ldw	r4,76(sp)
 1004814:	bd3fffc3 	ldbu	r20,-1(r23)
 1004818:	d9000515 	stw	r4,20(sp)
 100481c:	003d3b06 	br	1003d0c <_dtoa_r+0x94c>
 1004820:	0027883a 	mov	r19,zero
 1004824:	003f1b06 	br	1004494 <_dtoa_r+0x10d4>
 1004828:	d8800817 	ldw	r2,32(sp)
 100482c:	11e9c83a 	sub	r20,r2,r7
 1004830:	0005883a 	mov	r2,zero
 1004834:	003d5406 	br	1003d88 <_dtoa_r+0x9c8>
 1004838:	00800044 	movi	r2,1
 100483c:	003dc706 	br	1003f5c <_dtoa_r+0xb9c>
 1004840:	d8c00217 	ldw	r3,8(sp)
 1004844:	00800d84 	movi	r2,54
 1004848:	dd400a17 	ldw	r21,40(sp)
 100484c:	10c5c83a 	sub	r2,r2,r3
 1004850:	dd000817 	ldw	r20,32(sp)
 1004854:	003d4c06 	br	1003d88 <_dtoa_r+0x9c8>
 1004858:	dc800f15 	stw	r18,60(sp)
 100485c:	dcc01015 	stw	r19,64(sp)
 1004860:	04000084 	movi	r16,2
 1004864:	003bed06 	br	100381c <_dtoa_r+0x45c>
 1004868:	d9000617 	ldw	r4,24(sp)
 100486c:	203f0d26 	beq	r4,zero,10044a4 <_dtoa_r+0x10e4>
 1004870:	d9800c17 	ldw	r6,48(sp)
 1004874:	01bcab0e 	bge	zero,r6,1003b24 <_dtoa_r+0x764>
 1004878:	d9401017 	ldw	r5,64(sp)
 100487c:	d9000f17 	ldw	r4,60(sp)
 1004880:	000d883a 	mov	r6,zero
 1004884:	01d00934 	movhi	r7,16420
 1004888:	100c2680 	call	100c268 <__muldf3>
 100488c:	81000044 	addi	r4,r16,1
 1004890:	d8800f15 	stw	r2,60(sp)
 1004894:	d8c01015 	stw	r3,64(sp)
 1004898:	100d2fc0 	call	100d2fc <__floatsidf>
 100489c:	d9800f17 	ldw	r6,60(sp)
 10048a0:	d9c01017 	ldw	r7,64(sp)
 10048a4:	1009883a 	mov	r4,r2
 10048a8:	180b883a 	mov	r5,r3
 10048ac:	100c2680 	call	100c268 <__muldf3>
 10048b0:	01d00734 	movhi	r7,16412
 10048b4:	000d883a 	mov	r6,zero
 10048b8:	1009883a 	mov	r4,r2
 10048bc:	180b883a 	mov	r5,r3
 10048c0:	100ae7c0 	call	100ae7c <__adddf3>
 10048c4:	d9c00517 	ldw	r7,20(sp)
 10048c8:	047f3034 	movhi	r17,64704
 10048cc:	1021883a 	mov	r16,r2
 10048d0:	39ffffc4 	addi	r7,r7,-1
 10048d4:	d9c01315 	stw	r7,76(sp)
 10048d8:	1c63883a 	add	r17,r3,r17
 10048dc:	db000c17 	ldw	r12,48(sp)
 10048e0:	003bea06 	br	100388c <_dtoa_r+0x4cc>
 10048e4:	dc000915 	stw	r16,36(sp)
 10048e8:	003e0e06 	br	1004124 <_dtoa_r+0xd64>
 10048ec:	01000e44 	movi	r4,57
 10048f0:	8825883a 	mov	r18,r17
 10048f4:	9dc00044 	addi	r23,r19,1
 10048f8:	99000005 	stb	r4,0(r19)
 10048fc:	a023883a 	mov	r17,r20
 1004900:	dc000915 	stw	r16,36(sp)
 1004904:	003da406 	br	1003f98 <_dtoa_r+0xbd8>
 1004908:	d9801417 	ldw	r6,80(sp)
 100490c:	d9c01517 	ldw	r7,84(sp)
 1004910:	0009883a 	mov	r4,zero
 1004914:	014ff834 	movhi	r5,16352
 1004918:	100c9800 	call	100c980 <__subdf3>
 100491c:	880d883a 	mov	r6,r17
 1004920:	a00f883a 	mov	r7,r20
 1004924:	1009883a 	mov	r4,r2
 1004928:	180b883a 	mov	r5,r3
 100492c:	100c0980 	call	100c098 <__gedf2>
 1004930:	00bc7c0e 	bge	zero,r2,1003b24 <_dtoa_r+0x764>
 1004934:	01000c04 	movi	r4,48
 1004938:	00000106 	br	1004940 <_dtoa_r+0x1580>
 100493c:	102f883a 	mov	r23,r2
 1004940:	b8bfffc4 	addi	r2,r23,-1
 1004944:	10c00007 	ldb	r3,0(r2)
 1004948:	193ffc26 	beq	r3,r4,100493c <_dtoa_r+0x157c>
 100494c:	d9801317 	ldw	r6,76(sp)
 1004950:	d9800515 	stw	r6,20(sp)
 1004954:	003c4406 	br	1003a68 <_dtoa_r+0x6a8>
 1004958:	d9801317 	ldw	r6,76(sp)
 100495c:	d9800515 	stw	r6,20(sp)
 1004960:	003cea06 	br	1003d0c <_dtoa_r+0x94c>
 1004964:	dd800f17 	ldw	r22,60(sp)
 1004968:	dcc01017 	ldw	r19,64(sp)
 100496c:	dc801217 	ldw	r18,72(sp)
 1004970:	003c6c06 	br	1003b24 <_dtoa_r+0x764>
 1004974:	903e031e 	bne	r18,zero,1004184 <_dtoa_r+0xdc4>
 1004978:	003ebb06 	br	1004468 <_dtoa_r+0x10a8>
 100497c:	103e6c1e 	bne	r2,zero,1004330 <_dtoa_r+0xf70>
 1004980:	4080004c 	andi	r2,r8,1
 1004984:	103e6a26 	beq	r2,zero,1004330 <_dtoa_r+0xf70>
 1004988:	003e6606 	br	1004324 <_dtoa_r+0xf64>
 100498c:	d8c00317 	ldw	r3,12(sp)
 1004990:	00800084 	movi	r2,2
 1004994:	10c02916 	blt	r2,r3,1004a3c <_dtoa_r+0x167c>
 1004998:	d9000c17 	ldw	r4,48(sp)
 100499c:	003e8806 	br	10043c0 <_dtoa_r+0x1000>
 10049a0:	04000084 	movi	r16,2
 10049a4:	003b9d06 	br	100381c <_dtoa_r+0x45c>
 10049a8:	d9001317 	ldw	r4,76(sp)
 10049ac:	d9000515 	stw	r4,20(sp)
 10049b0:	003cd606 	br	1003d0c <_dtoa_r+0x94c>
 10049b4:	d8801317 	ldw	r2,76(sp)
 10049b8:	d8800515 	stw	r2,20(sp)
 10049bc:	003c2a06 	br	1003a68 <_dtoa_r+0x6a8>
 10049c0:	d9800317 	ldw	r6,12(sp)
 10049c4:	00800084 	movi	r2,2
 10049c8:	11801516 	blt	r2,r6,1004a20 <_dtoa_r+0x1660>
 10049cc:	d9c00c17 	ldw	r7,48(sp)
 10049d0:	d9c00615 	stw	r7,24(sp)
 10049d4:	003df706 	br	10041b4 <_dtoa_r+0xdf4>
 10049d8:	193d3926 	beq	r3,r4,1003ec0 <_dtoa_r+0xb00>
 10049dc:	00c00f04 	movi	r3,60
 10049e0:	1885c83a 	sub	r2,r3,r2
 10049e4:	003ddf06 	br	1004164 <_dtoa_r+0xda4>
 10049e8:	e009883a 	mov	r4,fp
 10049ec:	e0001115 	stw	zero,68(fp)
 10049f0:	000b883a 	mov	r5,zero
 10049f4:	1006a5c0 	call	1006a5c <_Balloc>
 10049f8:	d8800715 	stw	r2,28(sp)
 10049fc:	d8c00717 	ldw	r3,28(sp)
 1004a00:	00bfffc4 	movi	r2,-1
 1004a04:	01000044 	movi	r4,1
 1004a08:	d8800c15 	stw	r2,48(sp)
 1004a0c:	e0c01015 	stw	r3,64(fp)
 1004a10:	d9000b15 	stw	r4,44(sp)
 1004a14:	d8800615 	stw	r2,24(sp)
 1004a18:	d8002215 	stw	zero,136(sp)
 1004a1c:	003c4106 	br	1003b24 <_dtoa_r+0x764>
 1004a20:	d8c00c17 	ldw	r3,48(sp)
 1004a24:	d8c00615 	stw	r3,24(sp)
 1004a28:	003e7006 	br	10043ec <_dtoa_r+0x102c>
 1004a2c:	04400044 	movi	r17,1
 1004a30:	003b2006 	br	10036b4 <_dtoa_r+0x2f4>
 1004a34:	000b883a 	mov	r5,zero
 1004a38:	003b3d06 	br	1003730 <_dtoa_r+0x370>
 1004a3c:	d8800c17 	ldw	r2,48(sp)
 1004a40:	d8800615 	stw	r2,24(sp)
 1004a44:	003e6906 	br	10043ec <_dtoa_r+0x102c>

01004a48 <__sflush_r>:
 1004a48:	2880030b 	ldhu	r2,12(r5)
 1004a4c:	defffb04 	addi	sp,sp,-20
 1004a50:	dcc00315 	stw	r19,12(sp)
 1004a54:	dc400115 	stw	r17,4(sp)
 1004a58:	dfc00415 	stw	ra,16(sp)
 1004a5c:	dc800215 	stw	r18,8(sp)
 1004a60:	dc000015 	stw	r16,0(sp)
 1004a64:	10c0020c 	andi	r3,r2,8
 1004a68:	2823883a 	mov	r17,r5
 1004a6c:	2027883a 	mov	r19,r4
 1004a70:	1800311e 	bne	r3,zero,1004b38 <__sflush_r+0xf0>
 1004a74:	28c00117 	ldw	r3,4(r5)
 1004a78:	10820014 	ori	r2,r2,2048
 1004a7c:	2880030d 	sth	r2,12(r5)
 1004a80:	00c04b0e 	bge	zero,r3,1004bb0 <__sflush_r+0x168>
 1004a84:	8a000a17 	ldw	r8,40(r17)
 1004a88:	40002326 	beq	r8,zero,1004b18 <__sflush_r+0xd0>
 1004a8c:	9c000017 	ldw	r16,0(r19)
 1004a90:	10c4000c 	andi	r3,r2,4096
 1004a94:	98000015 	stw	zero,0(r19)
 1004a98:	18004826 	beq	r3,zero,1004bbc <__sflush_r+0x174>
 1004a9c:	89801417 	ldw	r6,80(r17)
 1004aa0:	10c0010c 	andi	r3,r2,4
 1004aa4:	18000626 	beq	r3,zero,1004ac0 <__sflush_r+0x78>
 1004aa8:	88c00117 	ldw	r3,4(r17)
 1004aac:	88800c17 	ldw	r2,48(r17)
 1004ab0:	30cdc83a 	sub	r6,r6,r3
 1004ab4:	10000226 	beq	r2,zero,1004ac0 <__sflush_r+0x78>
 1004ab8:	88800f17 	ldw	r2,60(r17)
 1004abc:	308dc83a 	sub	r6,r6,r2
 1004ac0:	89400717 	ldw	r5,28(r17)
 1004ac4:	000f883a 	mov	r7,zero
 1004ac8:	9809883a 	mov	r4,r19
 1004acc:	403ee83a 	callr	r8
 1004ad0:	00ffffc4 	movi	r3,-1
 1004ad4:	10c04426 	beq	r2,r3,1004be8 <__sflush_r+0x1a0>
 1004ad8:	88c0030b 	ldhu	r3,12(r17)
 1004adc:	89000417 	ldw	r4,16(r17)
 1004ae0:	88000115 	stw	zero,4(r17)
 1004ae4:	197dffcc 	andi	r5,r3,63487
 1004ae8:	8940030d 	sth	r5,12(r17)
 1004aec:	89000015 	stw	r4,0(r17)
 1004af0:	18c4000c 	andi	r3,r3,4096
 1004af4:	18002c1e 	bne	r3,zero,1004ba8 <__sflush_r+0x160>
 1004af8:	89400c17 	ldw	r5,48(r17)
 1004afc:	9c000015 	stw	r16,0(r19)
 1004b00:	28000526 	beq	r5,zero,1004b18 <__sflush_r+0xd0>
 1004b04:	88801004 	addi	r2,r17,64
 1004b08:	28800226 	beq	r5,r2,1004b14 <__sflush_r+0xcc>
 1004b0c:	9809883a 	mov	r4,r19
 1004b10:	10051b40 	call	10051b4 <_free_r>
 1004b14:	88000c15 	stw	zero,48(r17)
 1004b18:	0005883a 	mov	r2,zero
 1004b1c:	dfc00417 	ldw	ra,16(sp)
 1004b20:	dcc00317 	ldw	r19,12(sp)
 1004b24:	dc800217 	ldw	r18,8(sp)
 1004b28:	dc400117 	ldw	r17,4(sp)
 1004b2c:	dc000017 	ldw	r16,0(sp)
 1004b30:	dec00504 	addi	sp,sp,20
 1004b34:	f800283a 	ret
 1004b38:	2c800417 	ldw	r18,16(r5)
 1004b3c:	903ff626 	beq	r18,zero,1004b18 <__sflush_r+0xd0>
 1004b40:	2c000017 	ldw	r16,0(r5)
 1004b44:	108000cc 	andi	r2,r2,3
 1004b48:	2c800015 	stw	r18,0(r5)
 1004b4c:	84a1c83a 	sub	r16,r16,r18
 1004b50:	1000131e 	bne	r2,zero,1004ba0 <__sflush_r+0x158>
 1004b54:	28800517 	ldw	r2,20(r5)
 1004b58:	88800215 	stw	r2,8(r17)
 1004b5c:	04000316 	blt	zero,r16,1004b6c <__sflush_r+0x124>
 1004b60:	003fed06 	br	1004b18 <__sflush_r+0xd0>
 1004b64:	90a5883a 	add	r18,r18,r2
 1004b68:	043feb0e 	bge	zero,r16,1004b18 <__sflush_r+0xd0>
 1004b6c:	88800917 	ldw	r2,36(r17)
 1004b70:	89400717 	ldw	r5,28(r17)
 1004b74:	800f883a 	mov	r7,r16
 1004b78:	900d883a 	mov	r6,r18
 1004b7c:	9809883a 	mov	r4,r19
 1004b80:	103ee83a 	callr	r2
 1004b84:	80a1c83a 	sub	r16,r16,r2
 1004b88:	00bff616 	blt	zero,r2,1004b64 <__sflush_r+0x11c>
 1004b8c:	88c0030b 	ldhu	r3,12(r17)
 1004b90:	00bfffc4 	movi	r2,-1
 1004b94:	18c01014 	ori	r3,r3,64
 1004b98:	88c0030d 	sth	r3,12(r17)
 1004b9c:	003fdf06 	br	1004b1c <__sflush_r+0xd4>
 1004ba0:	0005883a 	mov	r2,zero
 1004ba4:	003fec06 	br	1004b58 <__sflush_r+0x110>
 1004ba8:	88801415 	stw	r2,80(r17)
 1004bac:	003fd206 	br	1004af8 <__sflush_r+0xb0>
 1004bb0:	28c00f17 	ldw	r3,60(r5)
 1004bb4:	00ffb316 	blt	zero,r3,1004a84 <__sflush_r+0x3c>
 1004bb8:	003fd706 	br	1004b18 <__sflush_r+0xd0>
 1004bbc:	89400717 	ldw	r5,28(r17)
 1004bc0:	000d883a 	mov	r6,zero
 1004bc4:	01c00044 	movi	r7,1
 1004bc8:	9809883a 	mov	r4,r19
 1004bcc:	403ee83a 	callr	r8
 1004bd0:	100d883a 	mov	r6,r2
 1004bd4:	00bfffc4 	movi	r2,-1
 1004bd8:	30801426 	beq	r6,r2,1004c2c <__sflush_r+0x1e4>
 1004bdc:	8880030b 	ldhu	r2,12(r17)
 1004be0:	8a000a17 	ldw	r8,40(r17)
 1004be4:	003fae06 	br	1004aa0 <__sflush_r+0x58>
 1004be8:	98c00017 	ldw	r3,0(r19)
 1004bec:	183fba26 	beq	r3,zero,1004ad8 <__sflush_r+0x90>
 1004bf0:	01000744 	movi	r4,29
 1004bf4:	19000626 	beq	r3,r4,1004c10 <__sflush_r+0x1c8>
 1004bf8:	01000584 	movi	r4,22
 1004bfc:	19000426 	beq	r3,r4,1004c10 <__sflush_r+0x1c8>
 1004c00:	88c0030b 	ldhu	r3,12(r17)
 1004c04:	18c01014 	ori	r3,r3,64
 1004c08:	88c0030d 	sth	r3,12(r17)
 1004c0c:	003fc306 	br	1004b1c <__sflush_r+0xd4>
 1004c10:	8880030b 	ldhu	r2,12(r17)
 1004c14:	88c00417 	ldw	r3,16(r17)
 1004c18:	88000115 	stw	zero,4(r17)
 1004c1c:	10bdffcc 	andi	r2,r2,63487
 1004c20:	8880030d 	sth	r2,12(r17)
 1004c24:	88c00015 	stw	r3,0(r17)
 1004c28:	003fb306 	br	1004af8 <__sflush_r+0xb0>
 1004c2c:	98800017 	ldw	r2,0(r19)
 1004c30:	103fea26 	beq	r2,zero,1004bdc <__sflush_r+0x194>
 1004c34:	00c00744 	movi	r3,29
 1004c38:	10c00226 	beq	r2,r3,1004c44 <__sflush_r+0x1fc>
 1004c3c:	00c00584 	movi	r3,22
 1004c40:	10c0031e 	bne	r2,r3,1004c50 <__sflush_r+0x208>
 1004c44:	9c000015 	stw	r16,0(r19)
 1004c48:	0005883a 	mov	r2,zero
 1004c4c:	003fb306 	br	1004b1c <__sflush_r+0xd4>
 1004c50:	88c0030b 	ldhu	r3,12(r17)
 1004c54:	3005883a 	mov	r2,r6
 1004c58:	18c01014 	ori	r3,r3,64
 1004c5c:	88c0030d 	sth	r3,12(r17)
 1004c60:	003fae06 	br	1004b1c <__sflush_r+0xd4>

01004c64 <_fflush_r>:
 1004c64:	defffd04 	addi	sp,sp,-12
 1004c68:	dc000115 	stw	r16,4(sp)
 1004c6c:	dfc00215 	stw	ra,8(sp)
 1004c70:	2021883a 	mov	r16,r4
 1004c74:	20000226 	beq	r4,zero,1004c80 <_fflush_r+0x1c>
 1004c78:	20800e17 	ldw	r2,56(r4)
 1004c7c:	10000c26 	beq	r2,zero,1004cb0 <_fflush_r+0x4c>
 1004c80:	2880030f 	ldh	r2,12(r5)
 1004c84:	1000051e 	bne	r2,zero,1004c9c <_fflush_r+0x38>
 1004c88:	0005883a 	mov	r2,zero
 1004c8c:	dfc00217 	ldw	ra,8(sp)
 1004c90:	dc000117 	ldw	r16,4(sp)
 1004c94:	dec00304 	addi	sp,sp,12
 1004c98:	f800283a 	ret
 1004c9c:	8009883a 	mov	r4,r16
 1004ca0:	dfc00217 	ldw	ra,8(sp)
 1004ca4:	dc000117 	ldw	r16,4(sp)
 1004ca8:	dec00304 	addi	sp,sp,12
 1004cac:	1004a481 	jmpi	1004a48 <__sflush_r>
 1004cb0:	d9400015 	stw	r5,0(sp)
 1004cb4:	10050400 	call	1005040 <__sinit>
 1004cb8:	d9400017 	ldw	r5,0(sp)
 1004cbc:	003ff006 	br	1004c80 <_fflush_r+0x1c>

01004cc0 <fflush>:
 1004cc0:	20000526 	beq	r4,zero,1004cd8 <fflush+0x18>
 1004cc4:	00804074 	movhi	r2,257
 1004cc8:	1086be04 	addi	r2,r2,6904
 1004ccc:	200b883a 	mov	r5,r4
 1004cd0:	11000017 	ldw	r4,0(r2)
 1004cd4:	1004c641 	jmpi	1004c64 <_fflush_r>
 1004cd8:	00804074 	movhi	r2,257
 1004cdc:	1086bd04 	addi	r2,r2,6900
 1004ce0:	11000017 	ldw	r4,0(r2)
 1004ce4:	01404034 	movhi	r5,256
 1004ce8:	29531904 	addi	r5,r5,19556
 1004cec:	1005a441 	jmpi	1005a44 <_fwalk_reent>

01004cf0 <__fp_unlock>:
 1004cf0:	0005883a 	mov	r2,zero
 1004cf4:	f800283a 	ret

01004cf8 <_cleanup_r>:
 1004cf8:	01404074 	movhi	r5,257
 1004cfc:	29669704 	addi	r5,r5,-26020
 1004d00:	1005a441 	jmpi	1005a44 <_fwalk_reent>

01004d04 <__sinit.part.1>:
 1004d04:	defff704 	addi	sp,sp,-36
 1004d08:	00c04034 	movhi	r3,256
 1004d0c:	dfc00815 	stw	ra,32(sp)
 1004d10:	ddc00715 	stw	r23,28(sp)
 1004d14:	dd800615 	stw	r22,24(sp)
 1004d18:	dd400515 	stw	r21,20(sp)
 1004d1c:	dd000415 	stw	r20,16(sp)
 1004d20:	dcc00315 	stw	r19,12(sp)
 1004d24:	dc800215 	stw	r18,8(sp)
 1004d28:	dc400115 	stw	r17,4(sp)
 1004d2c:	dc000015 	stw	r16,0(sp)
 1004d30:	18d33e04 	addi	r3,r3,19704
 1004d34:	24000117 	ldw	r16,4(r4)
 1004d38:	20c00f15 	stw	r3,60(r4)
 1004d3c:	2080bb04 	addi	r2,r4,748
 1004d40:	00c000c4 	movi	r3,3
 1004d44:	20c0b915 	stw	r3,740(r4)
 1004d48:	2080ba15 	stw	r2,744(r4)
 1004d4c:	2000b815 	stw	zero,736(r4)
 1004d50:	05c00204 	movi	r23,8
 1004d54:	00800104 	movi	r2,4
 1004d58:	2025883a 	mov	r18,r4
 1004d5c:	b80d883a 	mov	r6,r23
 1004d60:	81001704 	addi	r4,r16,92
 1004d64:	000b883a 	mov	r5,zero
 1004d68:	80000015 	stw	zero,0(r16)
 1004d6c:	80000115 	stw	zero,4(r16)
 1004d70:	80000215 	stw	zero,8(r16)
 1004d74:	8080030d 	sth	r2,12(r16)
 1004d78:	80001915 	stw	zero,100(r16)
 1004d7c:	8000038d 	sth	zero,14(r16)
 1004d80:	80000415 	stw	zero,16(r16)
 1004d84:	80000515 	stw	zero,20(r16)
 1004d88:	80000615 	stw	zero,24(r16)
 1004d8c:	10069340 	call	1006934 <memset>
 1004d90:	05804074 	movhi	r22,257
 1004d94:	94400217 	ldw	r17,8(r18)
 1004d98:	05404074 	movhi	r21,257
 1004d9c:	05004074 	movhi	r20,257
 1004da0:	04c04074 	movhi	r19,257
 1004da4:	b5a02104 	addi	r22,r22,-32636
 1004da8:	ad603804 	addi	r21,r21,-32544
 1004dac:	a5205704 	addi	r20,r20,-32420
 1004db0:	9ce06e04 	addi	r19,r19,-32328
 1004db4:	85800815 	stw	r22,32(r16)
 1004db8:	85400915 	stw	r21,36(r16)
 1004dbc:	85000a15 	stw	r20,40(r16)
 1004dc0:	84c00b15 	stw	r19,44(r16)
 1004dc4:	84000715 	stw	r16,28(r16)
 1004dc8:	00800284 	movi	r2,10
 1004dcc:	8880030d 	sth	r2,12(r17)
 1004dd0:	00800044 	movi	r2,1
 1004dd4:	b80d883a 	mov	r6,r23
 1004dd8:	89001704 	addi	r4,r17,92
 1004ddc:	000b883a 	mov	r5,zero
 1004de0:	88000015 	stw	zero,0(r17)
 1004de4:	88000115 	stw	zero,4(r17)
 1004de8:	88000215 	stw	zero,8(r17)
 1004dec:	88001915 	stw	zero,100(r17)
 1004df0:	8880038d 	sth	r2,14(r17)
 1004df4:	88000415 	stw	zero,16(r17)
 1004df8:	88000515 	stw	zero,20(r17)
 1004dfc:	88000615 	stw	zero,24(r17)
 1004e00:	10069340 	call	1006934 <memset>
 1004e04:	94000317 	ldw	r16,12(r18)
 1004e08:	00800484 	movi	r2,18
 1004e0c:	8c400715 	stw	r17,28(r17)
 1004e10:	8d800815 	stw	r22,32(r17)
 1004e14:	8d400915 	stw	r21,36(r17)
 1004e18:	8d000a15 	stw	r20,40(r17)
 1004e1c:	8cc00b15 	stw	r19,44(r17)
 1004e20:	8080030d 	sth	r2,12(r16)
 1004e24:	00800084 	movi	r2,2
 1004e28:	80000015 	stw	zero,0(r16)
 1004e2c:	80000115 	stw	zero,4(r16)
 1004e30:	80000215 	stw	zero,8(r16)
 1004e34:	80001915 	stw	zero,100(r16)
 1004e38:	8080038d 	sth	r2,14(r16)
 1004e3c:	80000415 	stw	zero,16(r16)
 1004e40:	80000515 	stw	zero,20(r16)
 1004e44:	80000615 	stw	zero,24(r16)
 1004e48:	b80d883a 	mov	r6,r23
 1004e4c:	000b883a 	mov	r5,zero
 1004e50:	81001704 	addi	r4,r16,92
 1004e54:	10069340 	call	1006934 <memset>
 1004e58:	00800044 	movi	r2,1
 1004e5c:	84000715 	stw	r16,28(r16)
 1004e60:	85800815 	stw	r22,32(r16)
 1004e64:	85400915 	stw	r21,36(r16)
 1004e68:	85000a15 	stw	r20,40(r16)
 1004e6c:	84c00b15 	stw	r19,44(r16)
 1004e70:	90800e15 	stw	r2,56(r18)
 1004e74:	dfc00817 	ldw	ra,32(sp)
 1004e78:	ddc00717 	ldw	r23,28(sp)
 1004e7c:	dd800617 	ldw	r22,24(sp)
 1004e80:	dd400517 	ldw	r21,20(sp)
 1004e84:	dd000417 	ldw	r20,16(sp)
 1004e88:	dcc00317 	ldw	r19,12(sp)
 1004e8c:	dc800217 	ldw	r18,8(sp)
 1004e90:	dc400117 	ldw	r17,4(sp)
 1004e94:	dc000017 	ldw	r16,0(sp)
 1004e98:	dec00904 	addi	sp,sp,36
 1004e9c:	f800283a 	ret

01004ea0 <__fp_lock>:
 1004ea0:	0005883a 	mov	r2,zero
 1004ea4:	f800283a 	ret

01004ea8 <__sfmoreglue>:
 1004ea8:	defffc04 	addi	sp,sp,-16
 1004eac:	dc400115 	stw	r17,4(sp)
 1004eb0:	2c7fffc4 	addi	r17,r5,-1
 1004eb4:	8c401a24 	muli	r17,r17,104
 1004eb8:	dc800215 	stw	r18,8(sp)
 1004ebc:	2825883a 	mov	r18,r5
 1004ec0:	89401d04 	addi	r5,r17,116
 1004ec4:	dc000015 	stw	r16,0(sp)
 1004ec8:	dfc00315 	stw	ra,12(sp)
 1004ecc:	1005da00 	call	1005da0 <_malloc_r>
 1004ed0:	1021883a 	mov	r16,r2
 1004ed4:	10000726 	beq	r2,zero,1004ef4 <__sfmoreglue+0x4c>
 1004ed8:	11000304 	addi	r4,r2,12
 1004edc:	10000015 	stw	zero,0(r2)
 1004ee0:	14800115 	stw	r18,4(r2)
 1004ee4:	11000215 	stw	r4,8(r2)
 1004ee8:	89801a04 	addi	r6,r17,104
 1004eec:	000b883a 	mov	r5,zero
 1004ef0:	10069340 	call	1006934 <memset>
 1004ef4:	8005883a 	mov	r2,r16
 1004ef8:	dfc00317 	ldw	ra,12(sp)
 1004efc:	dc800217 	ldw	r18,8(sp)
 1004f00:	dc400117 	ldw	r17,4(sp)
 1004f04:	dc000017 	ldw	r16,0(sp)
 1004f08:	dec00404 	addi	sp,sp,16
 1004f0c:	f800283a 	ret

01004f10 <__sfp>:
 1004f10:	defffb04 	addi	sp,sp,-20
 1004f14:	dc000015 	stw	r16,0(sp)
 1004f18:	04004074 	movhi	r16,257
 1004f1c:	8406bd04 	addi	r16,r16,6900
 1004f20:	dcc00315 	stw	r19,12(sp)
 1004f24:	2027883a 	mov	r19,r4
 1004f28:	81000017 	ldw	r4,0(r16)
 1004f2c:	dfc00415 	stw	ra,16(sp)
 1004f30:	dc800215 	stw	r18,8(sp)
 1004f34:	20800e17 	ldw	r2,56(r4)
 1004f38:	dc400115 	stw	r17,4(sp)
 1004f3c:	1000021e 	bne	r2,zero,1004f48 <__sfp+0x38>
 1004f40:	1004d040 	call	1004d04 <__sinit.part.1>
 1004f44:	81000017 	ldw	r4,0(r16)
 1004f48:	2480b804 	addi	r18,r4,736
 1004f4c:	047fffc4 	movi	r17,-1
 1004f50:	91000117 	ldw	r4,4(r18)
 1004f54:	94000217 	ldw	r16,8(r18)
 1004f58:	213fffc4 	addi	r4,r4,-1
 1004f5c:	20000a16 	blt	r4,zero,1004f88 <__sfp+0x78>
 1004f60:	8080030f 	ldh	r2,12(r16)
 1004f64:	10000c26 	beq	r2,zero,1004f98 <__sfp+0x88>
 1004f68:	80c01d04 	addi	r3,r16,116
 1004f6c:	00000206 	br	1004f78 <__sfp+0x68>
 1004f70:	18bfe60f 	ldh	r2,-104(r3)
 1004f74:	10000826 	beq	r2,zero,1004f98 <__sfp+0x88>
 1004f78:	213fffc4 	addi	r4,r4,-1
 1004f7c:	1c3ffd04 	addi	r16,r3,-12
 1004f80:	18c01a04 	addi	r3,r3,104
 1004f84:	247ffa1e 	bne	r4,r17,1004f70 <__sfp+0x60>
 1004f88:	90800017 	ldw	r2,0(r18)
 1004f8c:	10001d26 	beq	r2,zero,1005004 <__sfp+0xf4>
 1004f90:	1025883a 	mov	r18,r2
 1004f94:	003fee06 	br	1004f50 <__sfp+0x40>
 1004f98:	00bfffc4 	movi	r2,-1
 1004f9c:	8080038d 	sth	r2,14(r16)
 1004fa0:	00800044 	movi	r2,1
 1004fa4:	8080030d 	sth	r2,12(r16)
 1004fa8:	80001915 	stw	zero,100(r16)
 1004fac:	80000015 	stw	zero,0(r16)
 1004fb0:	80000215 	stw	zero,8(r16)
 1004fb4:	80000115 	stw	zero,4(r16)
 1004fb8:	80000415 	stw	zero,16(r16)
 1004fbc:	80000515 	stw	zero,20(r16)
 1004fc0:	80000615 	stw	zero,24(r16)
 1004fc4:	01800204 	movi	r6,8
 1004fc8:	000b883a 	mov	r5,zero
 1004fcc:	81001704 	addi	r4,r16,92
 1004fd0:	10069340 	call	1006934 <memset>
 1004fd4:	8005883a 	mov	r2,r16
 1004fd8:	80000c15 	stw	zero,48(r16)
 1004fdc:	80000d15 	stw	zero,52(r16)
 1004fe0:	80001115 	stw	zero,68(r16)
 1004fe4:	80001215 	stw	zero,72(r16)
 1004fe8:	dfc00417 	ldw	ra,16(sp)
 1004fec:	dcc00317 	ldw	r19,12(sp)
 1004ff0:	dc800217 	ldw	r18,8(sp)
 1004ff4:	dc400117 	ldw	r17,4(sp)
 1004ff8:	dc000017 	ldw	r16,0(sp)
 1004ffc:	dec00504 	addi	sp,sp,20
 1005000:	f800283a 	ret
 1005004:	01400104 	movi	r5,4
 1005008:	9809883a 	mov	r4,r19
 100500c:	1004ea80 	call	1004ea8 <__sfmoreglue>
 1005010:	90800015 	stw	r2,0(r18)
 1005014:	103fde1e 	bne	r2,zero,1004f90 <__sfp+0x80>
 1005018:	00800304 	movi	r2,12
 100501c:	98800015 	stw	r2,0(r19)
 1005020:	0005883a 	mov	r2,zero
 1005024:	003ff006 	br	1004fe8 <__sfp+0xd8>

01005028 <_cleanup>:
 1005028:	00804074 	movhi	r2,257
 100502c:	1086bd04 	addi	r2,r2,6900
 1005030:	11000017 	ldw	r4,0(r2)
 1005034:	01404074 	movhi	r5,257
 1005038:	29669704 	addi	r5,r5,-26020
 100503c:	1005a441 	jmpi	1005a44 <_fwalk_reent>

01005040 <__sinit>:
 1005040:	20800e17 	ldw	r2,56(r4)
 1005044:	10000126 	beq	r2,zero,100504c <__sinit+0xc>
 1005048:	f800283a 	ret
 100504c:	1004d041 	jmpi	1004d04 <__sinit.part.1>

01005050 <__sfp_lock_acquire>:
 1005050:	f800283a 	ret

01005054 <__sfp_lock_release>:
 1005054:	f800283a 	ret

01005058 <__sinit_lock_acquire>:
 1005058:	f800283a 	ret

0100505c <__sinit_lock_release>:
 100505c:	f800283a 	ret

01005060 <__fp_lock_all>:
 1005060:	00804074 	movhi	r2,257
 1005064:	1086be04 	addi	r2,r2,6904
 1005068:	11000017 	ldw	r4,0(r2)
 100506c:	01404034 	movhi	r5,256
 1005070:	2953a804 	addi	r5,r5,20128
 1005074:	10059801 	jmpi	1005980 <_fwalk>

01005078 <__fp_unlock_all>:
 1005078:	00804074 	movhi	r2,257
 100507c:	1086be04 	addi	r2,r2,6904
 1005080:	11000017 	ldw	r4,0(r2)
 1005084:	01404034 	movhi	r5,256
 1005088:	29533c04 	addi	r5,r5,19696
 100508c:	10059801 	jmpi	1005980 <_fwalk>

01005090 <_malloc_trim_r>:
 1005090:	defffb04 	addi	sp,sp,-20
 1005094:	dcc00315 	stw	r19,12(sp)
 1005098:	04c04074 	movhi	r19,257
 100509c:	dc800215 	stw	r18,8(sp)
 10050a0:	dc400115 	stw	r17,4(sp)
 10050a4:	dc000015 	stw	r16,0(sp)
 10050a8:	dfc00415 	stw	ra,16(sp)
 10050ac:	2821883a 	mov	r16,r5
 10050b0:	9cc13904 	addi	r19,r19,1252
 10050b4:	2025883a 	mov	r18,r4
 10050b8:	100dbe00 	call	100dbe0 <__malloc_lock>
 10050bc:	98800217 	ldw	r2,8(r19)
 10050c0:	14400117 	ldw	r17,4(r2)
 10050c4:	00bfff04 	movi	r2,-4
 10050c8:	88a2703a 	and	r17,r17,r2
 10050cc:	8c21c83a 	sub	r16,r17,r16
 10050d0:	8403fbc4 	addi	r16,r16,4079
 10050d4:	8020d33a 	srli	r16,r16,12
 10050d8:	0083ffc4 	movi	r2,4095
 10050dc:	843fffc4 	addi	r16,r16,-1
 10050e0:	8020933a 	slli	r16,r16,12
 10050e4:	1400060e 	bge	r2,r16,1005100 <_malloc_trim_r+0x70>
 10050e8:	000b883a 	mov	r5,zero
 10050ec:	9009883a 	mov	r4,r18
 10050f0:	10080300 	call	1008030 <_sbrk_r>
 10050f4:	98c00217 	ldw	r3,8(r19)
 10050f8:	1c47883a 	add	r3,r3,r17
 10050fc:	10c00a26 	beq	r2,r3,1005128 <_malloc_trim_r+0x98>
 1005100:	9009883a 	mov	r4,r18
 1005104:	100dc040 	call	100dc04 <__malloc_unlock>
 1005108:	0005883a 	mov	r2,zero
 100510c:	dfc00417 	ldw	ra,16(sp)
 1005110:	dcc00317 	ldw	r19,12(sp)
 1005114:	dc800217 	ldw	r18,8(sp)
 1005118:	dc400117 	ldw	r17,4(sp)
 100511c:	dc000017 	ldw	r16,0(sp)
 1005120:	dec00504 	addi	sp,sp,20
 1005124:	f800283a 	ret
 1005128:	040bc83a 	sub	r5,zero,r16
 100512c:	9009883a 	mov	r4,r18
 1005130:	10080300 	call	1008030 <_sbrk_r>
 1005134:	00ffffc4 	movi	r3,-1
 1005138:	10c00d26 	beq	r2,r3,1005170 <_malloc_trim_r+0xe0>
 100513c:	00c04074 	movhi	r3,257
 1005140:	18cd9704 	addi	r3,r3,13916
 1005144:	18800017 	ldw	r2,0(r3)
 1005148:	99000217 	ldw	r4,8(r19)
 100514c:	8c23c83a 	sub	r17,r17,r16
 1005150:	8c400054 	ori	r17,r17,1
 1005154:	1421c83a 	sub	r16,r2,r16
 1005158:	24400115 	stw	r17,4(r4)
 100515c:	9009883a 	mov	r4,r18
 1005160:	1c000015 	stw	r16,0(r3)
 1005164:	100dc040 	call	100dc04 <__malloc_unlock>
 1005168:	00800044 	movi	r2,1
 100516c:	003fe706 	br	100510c <_malloc_trim_r+0x7c>
 1005170:	000b883a 	mov	r5,zero
 1005174:	9009883a 	mov	r4,r18
 1005178:	10080300 	call	1008030 <_sbrk_r>
 100517c:	99000217 	ldw	r4,8(r19)
 1005180:	014003c4 	movi	r5,15
 1005184:	1107c83a 	sub	r3,r2,r4
 1005188:	28ffdd0e 	bge	r5,r3,1005100 <_malloc_trim_r+0x70>
 100518c:	01404074 	movhi	r5,257
 1005190:	2946c004 	addi	r5,r5,6912
 1005194:	29400017 	ldw	r5,0(r5)
 1005198:	18c00054 	ori	r3,r3,1
 100519c:	20c00115 	stw	r3,4(r4)
 10051a0:	00c04074 	movhi	r3,257
 10051a4:	1145c83a 	sub	r2,r2,r5
 10051a8:	18cd9704 	addi	r3,r3,13916
 10051ac:	18800015 	stw	r2,0(r3)
 10051b0:	003fd306 	br	1005100 <_malloc_trim_r+0x70>

010051b4 <_free_r>:
 10051b4:	28004126 	beq	r5,zero,10052bc <_free_r+0x108>
 10051b8:	defffd04 	addi	sp,sp,-12
 10051bc:	dc400115 	stw	r17,4(sp)
 10051c0:	dc000015 	stw	r16,0(sp)
 10051c4:	2023883a 	mov	r17,r4
 10051c8:	2821883a 	mov	r16,r5
 10051cc:	dfc00215 	stw	ra,8(sp)
 10051d0:	100dbe00 	call	100dbe0 <__malloc_lock>
 10051d4:	81ffff17 	ldw	r7,-4(r16)
 10051d8:	00bfff84 	movi	r2,-2
 10051dc:	01004074 	movhi	r4,257
 10051e0:	81bffe04 	addi	r6,r16,-8
 10051e4:	3884703a 	and	r2,r7,r2
 10051e8:	21013904 	addi	r4,r4,1252
 10051ec:	308b883a 	add	r5,r6,r2
 10051f0:	2a400117 	ldw	r9,4(r5)
 10051f4:	22000217 	ldw	r8,8(r4)
 10051f8:	00ffff04 	movi	r3,-4
 10051fc:	48c6703a 	and	r3,r9,r3
 1005200:	2a005726 	beq	r5,r8,1005360 <_free_r+0x1ac>
 1005204:	28c00115 	stw	r3,4(r5)
 1005208:	39c0004c 	andi	r7,r7,1
 100520c:	3800091e 	bne	r7,zero,1005234 <_free_r+0x80>
 1005210:	823ffe17 	ldw	r8,-8(r16)
 1005214:	22400204 	addi	r9,r4,8
 1005218:	320dc83a 	sub	r6,r6,r8
 100521c:	31c00217 	ldw	r7,8(r6)
 1005220:	1205883a 	add	r2,r2,r8
 1005224:	3a406526 	beq	r7,r9,10053bc <_free_r+0x208>
 1005228:	32000317 	ldw	r8,12(r6)
 100522c:	3a000315 	stw	r8,12(r7)
 1005230:	41c00215 	stw	r7,8(r8)
 1005234:	28cf883a 	add	r7,r5,r3
 1005238:	39c00117 	ldw	r7,4(r7)
 100523c:	39c0004c 	andi	r7,r7,1
 1005240:	38003a26 	beq	r7,zero,100532c <_free_r+0x178>
 1005244:	10c00054 	ori	r3,r2,1
 1005248:	30c00115 	stw	r3,4(r6)
 100524c:	3087883a 	add	r3,r6,r2
 1005250:	18800015 	stw	r2,0(r3)
 1005254:	00c07fc4 	movi	r3,511
 1005258:	18801936 	bltu	r3,r2,10052c0 <_free_r+0x10c>
 100525c:	1004d0fa 	srli	r2,r2,3
 1005260:	01c00044 	movi	r7,1
 1005264:	21400117 	ldw	r5,4(r4)
 1005268:	10c00044 	addi	r3,r2,1
 100526c:	18c7883a 	add	r3,r3,r3
 1005270:	1005d0ba 	srai	r2,r2,2
 1005274:	18c7883a 	add	r3,r3,r3
 1005278:	18c7883a 	add	r3,r3,r3
 100527c:	1907883a 	add	r3,r3,r4
 1005280:	3884983a 	sll	r2,r7,r2
 1005284:	19c00017 	ldw	r7,0(r3)
 1005288:	1a3ffe04 	addi	r8,r3,-8
 100528c:	1144b03a 	or	r2,r2,r5
 1005290:	32000315 	stw	r8,12(r6)
 1005294:	31c00215 	stw	r7,8(r6)
 1005298:	20800115 	stw	r2,4(r4)
 100529c:	19800015 	stw	r6,0(r3)
 10052a0:	39800315 	stw	r6,12(r7)
 10052a4:	8809883a 	mov	r4,r17
 10052a8:	dfc00217 	ldw	ra,8(sp)
 10052ac:	dc400117 	ldw	r17,4(sp)
 10052b0:	dc000017 	ldw	r16,0(sp)
 10052b4:	dec00304 	addi	sp,sp,12
 10052b8:	100dc041 	jmpi	100dc04 <__malloc_unlock>
 10052bc:	f800283a 	ret
 10052c0:	100ad27a 	srli	r5,r2,9
 10052c4:	00c00104 	movi	r3,4
 10052c8:	19404a36 	bltu	r3,r5,10053f4 <_free_r+0x240>
 10052cc:	100ad1ba 	srli	r5,r2,6
 10052d0:	28c00e44 	addi	r3,r5,57
 10052d4:	18c7883a 	add	r3,r3,r3
 10052d8:	29400e04 	addi	r5,r5,56
 10052dc:	18c7883a 	add	r3,r3,r3
 10052e0:	18c7883a 	add	r3,r3,r3
 10052e4:	1909883a 	add	r4,r3,r4
 10052e8:	20c00017 	ldw	r3,0(r4)
 10052ec:	01c04074 	movhi	r7,257
 10052f0:	213ffe04 	addi	r4,r4,-8
 10052f4:	39c13904 	addi	r7,r7,1252
 10052f8:	20c04426 	beq	r4,r3,100540c <_free_r+0x258>
 10052fc:	01ffff04 	movi	r7,-4
 1005300:	19400117 	ldw	r5,4(r3)
 1005304:	29ca703a 	and	r5,r5,r7
 1005308:	1140022e 	bgeu	r2,r5,1005314 <_free_r+0x160>
 100530c:	18c00217 	ldw	r3,8(r3)
 1005310:	20fffb1e 	bne	r4,r3,1005300 <_free_r+0x14c>
 1005314:	19000317 	ldw	r4,12(r3)
 1005318:	31000315 	stw	r4,12(r6)
 100531c:	30c00215 	stw	r3,8(r6)
 1005320:	21800215 	stw	r6,8(r4)
 1005324:	19800315 	stw	r6,12(r3)
 1005328:	003fde06 	br	10052a4 <_free_r+0xf0>
 100532c:	29c00217 	ldw	r7,8(r5)
 1005330:	10c5883a 	add	r2,r2,r3
 1005334:	00c04074 	movhi	r3,257
 1005338:	18c13b04 	addi	r3,r3,1260
 100533c:	38c03b26 	beq	r7,r3,100542c <_free_r+0x278>
 1005340:	2a000317 	ldw	r8,12(r5)
 1005344:	11400054 	ori	r5,r2,1
 1005348:	3087883a 	add	r3,r6,r2
 100534c:	3a000315 	stw	r8,12(r7)
 1005350:	41c00215 	stw	r7,8(r8)
 1005354:	31400115 	stw	r5,4(r6)
 1005358:	18800015 	stw	r2,0(r3)
 100535c:	003fbd06 	br	1005254 <_free_r+0xa0>
 1005360:	39c0004c 	andi	r7,r7,1
 1005364:	10c5883a 	add	r2,r2,r3
 1005368:	3800071e 	bne	r7,zero,1005388 <_free_r+0x1d4>
 100536c:	81fffe17 	ldw	r7,-8(r16)
 1005370:	31cdc83a 	sub	r6,r6,r7
 1005374:	30c00317 	ldw	r3,12(r6)
 1005378:	31400217 	ldw	r5,8(r6)
 100537c:	11c5883a 	add	r2,r2,r7
 1005380:	28c00315 	stw	r3,12(r5)
 1005384:	19400215 	stw	r5,8(r3)
 1005388:	10c00054 	ori	r3,r2,1
 100538c:	30c00115 	stw	r3,4(r6)
 1005390:	00c04074 	movhi	r3,257
 1005394:	18c6c104 	addi	r3,r3,6916
 1005398:	18c00017 	ldw	r3,0(r3)
 100539c:	21800215 	stw	r6,8(r4)
 10053a0:	10ffc036 	bltu	r2,r3,10052a4 <_free_r+0xf0>
 10053a4:	00804074 	movhi	r2,257
 10053a8:	108d8e04 	addi	r2,r2,13880
 10053ac:	11400017 	ldw	r5,0(r2)
 10053b0:	8809883a 	mov	r4,r17
 10053b4:	10050900 	call	1005090 <_malloc_trim_r>
 10053b8:	003fba06 	br	10052a4 <_free_r+0xf0>
 10053bc:	28c9883a 	add	r4,r5,r3
 10053c0:	21000117 	ldw	r4,4(r4)
 10053c4:	2100004c 	andi	r4,r4,1
 10053c8:	2000391e 	bne	r4,zero,10054b0 <_free_r+0x2fc>
 10053cc:	29c00217 	ldw	r7,8(r5)
 10053d0:	29000317 	ldw	r4,12(r5)
 10053d4:	1885883a 	add	r2,r3,r2
 10053d8:	10c00054 	ori	r3,r2,1
 10053dc:	39000315 	stw	r4,12(r7)
 10053e0:	21c00215 	stw	r7,8(r4)
 10053e4:	30c00115 	stw	r3,4(r6)
 10053e8:	308d883a 	add	r6,r6,r2
 10053ec:	30800015 	stw	r2,0(r6)
 10053f0:	003fac06 	br	10052a4 <_free_r+0xf0>
 10053f4:	00c00504 	movi	r3,20
 10053f8:	19401536 	bltu	r3,r5,1005450 <_free_r+0x29c>
 10053fc:	28c01704 	addi	r3,r5,92
 1005400:	18c7883a 	add	r3,r3,r3
 1005404:	294016c4 	addi	r5,r5,91
 1005408:	003fb406 	br	10052dc <_free_r+0x128>
 100540c:	280bd0ba 	srai	r5,r5,2
 1005410:	00c00044 	movi	r3,1
 1005414:	38800117 	ldw	r2,4(r7)
 1005418:	194a983a 	sll	r5,r3,r5
 100541c:	2007883a 	mov	r3,r4
 1005420:	2884b03a 	or	r2,r5,r2
 1005424:	38800115 	stw	r2,4(r7)
 1005428:	003fbb06 	br	1005318 <_free_r+0x164>
 100542c:	21800515 	stw	r6,20(r4)
 1005430:	21800415 	stw	r6,16(r4)
 1005434:	10c00054 	ori	r3,r2,1
 1005438:	31c00315 	stw	r7,12(r6)
 100543c:	31c00215 	stw	r7,8(r6)
 1005440:	30c00115 	stw	r3,4(r6)
 1005444:	308d883a 	add	r6,r6,r2
 1005448:	30800015 	stw	r2,0(r6)
 100544c:	003f9506 	br	10052a4 <_free_r+0xf0>
 1005450:	00c01504 	movi	r3,84
 1005454:	19400536 	bltu	r3,r5,100546c <_free_r+0x2b8>
 1005458:	100ad33a 	srli	r5,r2,12
 100545c:	28c01bc4 	addi	r3,r5,111
 1005460:	18c7883a 	add	r3,r3,r3
 1005464:	29401b84 	addi	r5,r5,110
 1005468:	003f9c06 	br	10052dc <_free_r+0x128>
 100546c:	00c05504 	movi	r3,340
 1005470:	19400536 	bltu	r3,r5,1005488 <_free_r+0x2d4>
 1005474:	100ad3fa 	srli	r5,r2,15
 1005478:	28c01e04 	addi	r3,r5,120
 100547c:	18c7883a 	add	r3,r3,r3
 1005480:	29401dc4 	addi	r5,r5,119
 1005484:	003f9506 	br	10052dc <_free_r+0x128>
 1005488:	00c15504 	movi	r3,1364
 100548c:	19400536 	bltu	r3,r5,10054a4 <_free_r+0x2f0>
 1005490:	100ad4ba 	srli	r5,r2,18
 1005494:	28c01f44 	addi	r3,r5,125
 1005498:	18c7883a 	add	r3,r3,r3
 100549c:	29401f04 	addi	r5,r5,124
 10054a0:	003f8e06 	br	10052dc <_free_r+0x128>
 10054a4:	00c03f84 	movi	r3,254
 10054a8:	01401f84 	movi	r5,126
 10054ac:	003f8b06 	br	10052dc <_free_r+0x128>
 10054b0:	10c00054 	ori	r3,r2,1
 10054b4:	30c00115 	stw	r3,4(r6)
 10054b8:	308d883a 	add	r6,r6,r2
 10054bc:	30800015 	stw	r2,0(r6)
 10054c0:	003f7806 	br	10052a4 <_free_r+0xf0>

010054c4 <__sfvwrite_r>:
 10054c4:	30800217 	ldw	r2,8(r6)
 10054c8:	10006726 	beq	r2,zero,1005668 <__sfvwrite_r+0x1a4>
 10054cc:	28c0030b 	ldhu	r3,12(r5)
 10054d0:	defff404 	addi	sp,sp,-48
 10054d4:	dd400715 	stw	r21,28(sp)
 10054d8:	dd000615 	stw	r20,24(sp)
 10054dc:	dc000215 	stw	r16,8(sp)
 10054e0:	dfc00b15 	stw	ra,44(sp)
 10054e4:	df000a15 	stw	fp,40(sp)
 10054e8:	ddc00915 	stw	r23,36(sp)
 10054ec:	dd800815 	stw	r22,32(sp)
 10054f0:	dcc00515 	stw	r19,20(sp)
 10054f4:	dc800415 	stw	r18,16(sp)
 10054f8:	dc400315 	stw	r17,12(sp)
 10054fc:	1880020c 	andi	r2,r3,8
 1005500:	2821883a 	mov	r16,r5
 1005504:	202b883a 	mov	r21,r4
 1005508:	3029883a 	mov	r20,r6
 100550c:	10002726 	beq	r2,zero,10055ac <__sfvwrite_r+0xe8>
 1005510:	28800417 	ldw	r2,16(r5)
 1005514:	10002526 	beq	r2,zero,10055ac <__sfvwrite_r+0xe8>
 1005518:	1880008c 	andi	r2,r3,2
 100551c:	a4400017 	ldw	r17,0(r20)
 1005520:	10002a26 	beq	r2,zero,10055cc <__sfvwrite_r+0x108>
 1005524:	05a00034 	movhi	r22,32768
 1005528:	0027883a 	mov	r19,zero
 100552c:	0025883a 	mov	r18,zero
 1005530:	b5bf0004 	addi	r22,r22,-1024
 1005534:	980d883a 	mov	r6,r19
 1005538:	a809883a 	mov	r4,r21
 100553c:	90004626 	beq	r18,zero,1005658 <__sfvwrite_r+0x194>
 1005540:	900f883a 	mov	r7,r18
 1005544:	b480022e 	bgeu	r22,r18,1005550 <__sfvwrite_r+0x8c>
 1005548:	01e00034 	movhi	r7,32768
 100554c:	39ff0004 	addi	r7,r7,-1024
 1005550:	80800917 	ldw	r2,36(r16)
 1005554:	81400717 	ldw	r5,28(r16)
 1005558:	103ee83a 	callr	r2
 100555c:	0080570e 	bge	zero,r2,10056bc <__sfvwrite_r+0x1f8>
 1005560:	a0c00217 	ldw	r3,8(r20)
 1005564:	98a7883a 	add	r19,r19,r2
 1005568:	90a5c83a 	sub	r18,r18,r2
 100556c:	1885c83a 	sub	r2,r3,r2
 1005570:	a0800215 	stw	r2,8(r20)
 1005574:	103fef1e 	bne	r2,zero,1005534 <__sfvwrite_r+0x70>
 1005578:	0005883a 	mov	r2,zero
 100557c:	dfc00b17 	ldw	ra,44(sp)
 1005580:	df000a17 	ldw	fp,40(sp)
 1005584:	ddc00917 	ldw	r23,36(sp)
 1005588:	dd800817 	ldw	r22,32(sp)
 100558c:	dd400717 	ldw	r21,28(sp)
 1005590:	dd000617 	ldw	r20,24(sp)
 1005594:	dcc00517 	ldw	r19,20(sp)
 1005598:	dc800417 	ldw	r18,16(sp)
 100559c:	dc400317 	ldw	r17,12(sp)
 10055a0:	dc000217 	ldw	r16,8(sp)
 10055a4:	dec00c04 	addi	sp,sp,48
 10055a8:	f800283a 	ret
 10055ac:	800b883a 	mov	r5,r16
 10055b0:	a809883a 	mov	r4,r21
 10055b4:	100306c0 	call	100306c <__swsetup_r>
 10055b8:	1000eb1e 	bne	r2,zero,1005968 <__sfvwrite_r+0x4a4>
 10055bc:	80c0030b 	ldhu	r3,12(r16)
 10055c0:	a4400017 	ldw	r17,0(r20)
 10055c4:	1880008c 	andi	r2,r3,2
 10055c8:	103fd61e 	bne	r2,zero,1005524 <__sfvwrite_r+0x60>
 10055cc:	1880004c 	andi	r2,r3,1
 10055d0:	10003f1e 	bne	r2,zero,10056d0 <__sfvwrite_r+0x20c>
 10055d4:	0039883a 	mov	fp,zero
 10055d8:	0025883a 	mov	r18,zero
 10055dc:	90001a26 	beq	r18,zero,1005648 <__sfvwrite_r+0x184>
 10055e0:	1880800c 	andi	r2,r3,512
 10055e4:	84c00217 	ldw	r19,8(r16)
 10055e8:	10002126 	beq	r2,zero,1005670 <__sfvwrite_r+0x1ac>
 10055ec:	982f883a 	mov	r23,r19
 10055f0:	94c09336 	bltu	r18,r19,1005840 <__sfvwrite_r+0x37c>
 10055f4:	1881200c 	andi	r2,r3,1152
 10055f8:	10009e1e 	bne	r2,zero,1005874 <__sfvwrite_r+0x3b0>
 10055fc:	81000017 	ldw	r4,0(r16)
 1005600:	b80d883a 	mov	r6,r23
 1005604:	e00b883a 	mov	r5,fp
 1005608:	10067d80 	call	10067d8 <memmove>
 100560c:	80c00217 	ldw	r3,8(r16)
 1005610:	81000017 	ldw	r4,0(r16)
 1005614:	9005883a 	mov	r2,r18
 1005618:	1ce7c83a 	sub	r19,r3,r19
 100561c:	25cf883a 	add	r7,r4,r23
 1005620:	84c00215 	stw	r19,8(r16)
 1005624:	81c00015 	stw	r7,0(r16)
 1005628:	a0c00217 	ldw	r3,8(r20)
 100562c:	e0b9883a 	add	fp,fp,r2
 1005630:	90a5c83a 	sub	r18,r18,r2
 1005634:	18a7c83a 	sub	r19,r3,r2
 1005638:	a4c00215 	stw	r19,8(r20)
 100563c:	983fce26 	beq	r19,zero,1005578 <__sfvwrite_r+0xb4>
 1005640:	80c0030b 	ldhu	r3,12(r16)
 1005644:	903fe61e 	bne	r18,zero,10055e0 <__sfvwrite_r+0x11c>
 1005648:	8f000017 	ldw	fp,0(r17)
 100564c:	8c800117 	ldw	r18,4(r17)
 1005650:	8c400204 	addi	r17,r17,8
 1005654:	003fe106 	br	10055dc <__sfvwrite_r+0x118>
 1005658:	8cc00017 	ldw	r19,0(r17)
 100565c:	8c800117 	ldw	r18,4(r17)
 1005660:	8c400204 	addi	r17,r17,8
 1005664:	003fb306 	br	1005534 <__sfvwrite_r+0x70>
 1005668:	0005883a 	mov	r2,zero
 100566c:	f800283a 	ret
 1005670:	81000017 	ldw	r4,0(r16)
 1005674:	80800417 	ldw	r2,16(r16)
 1005678:	11005736 	bltu	r2,r4,10057d8 <__sfvwrite_r+0x314>
 100567c:	85c00517 	ldw	r23,20(r16)
 1005680:	95c05536 	bltu	r18,r23,10057d8 <__sfvwrite_r+0x314>
 1005684:	00a00034 	movhi	r2,32768
 1005688:	10bfffc4 	addi	r2,r2,-1
 100568c:	9009883a 	mov	r4,r18
 1005690:	1480012e 	bgeu	r2,r18,1005698 <__sfvwrite_r+0x1d4>
 1005694:	1009883a 	mov	r4,r2
 1005698:	b80b883a 	mov	r5,r23
 100569c:	100acc80 	call	100acc8 <__divsi3>
 10056a0:	15cf383a 	mul	r7,r2,r23
 10056a4:	81400717 	ldw	r5,28(r16)
 10056a8:	80800917 	ldw	r2,36(r16)
 10056ac:	e00d883a 	mov	r6,fp
 10056b0:	a809883a 	mov	r4,r21
 10056b4:	103ee83a 	callr	r2
 10056b8:	00bfdb16 	blt	zero,r2,1005628 <__sfvwrite_r+0x164>
 10056bc:	8080030b 	ldhu	r2,12(r16)
 10056c0:	10801014 	ori	r2,r2,64
 10056c4:	8080030d 	sth	r2,12(r16)
 10056c8:	00bfffc4 	movi	r2,-1
 10056cc:	003fab06 	br	100557c <__sfvwrite_r+0xb8>
 10056d0:	0027883a 	mov	r19,zero
 10056d4:	0011883a 	mov	r8,zero
 10056d8:	0039883a 	mov	fp,zero
 10056dc:	0025883a 	mov	r18,zero
 10056e0:	90001f26 	beq	r18,zero,1005760 <__sfvwrite_r+0x29c>
 10056e4:	40005a26 	beq	r8,zero,1005850 <__sfvwrite_r+0x38c>
 10056e8:	982d883a 	mov	r22,r19
 10056ec:	94c0012e 	bgeu	r18,r19,10056f4 <__sfvwrite_r+0x230>
 10056f0:	902d883a 	mov	r22,r18
 10056f4:	81000017 	ldw	r4,0(r16)
 10056f8:	80800417 	ldw	r2,16(r16)
 10056fc:	b02f883a 	mov	r23,r22
 1005700:	81c00517 	ldw	r7,20(r16)
 1005704:	1100032e 	bgeu	r2,r4,1005714 <__sfvwrite_r+0x250>
 1005708:	80c00217 	ldw	r3,8(r16)
 100570c:	38c7883a 	add	r3,r7,r3
 1005710:	1d801816 	blt	r3,r22,1005774 <__sfvwrite_r+0x2b0>
 1005714:	b1c03e16 	blt	r22,r7,1005810 <__sfvwrite_r+0x34c>
 1005718:	80800917 	ldw	r2,36(r16)
 100571c:	81400717 	ldw	r5,28(r16)
 1005720:	e00d883a 	mov	r6,fp
 1005724:	da000115 	stw	r8,4(sp)
 1005728:	a809883a 	mov	r4,r21
 100572c:	103ee83a 	callr	r2
 1005730:	102f883a 	mov	r23,r2
 1005734:	da000117 	ldw	r8,4(sp)
 1005738:	00bfe00e 	bge	zero,r2,10056bc <__sfvwrite_r+0x1f8>
 100573c:	9de7c83a 	sub	r19,r19,r23
 1005740:	98001f26 	beq	r19,zero,10057c0 <__sfvwrite_r+0x2fc>
 1005744:	a0800217 	ldw	r2,8(r20)
 1005748:	e5f9883a 	add	fp,fp,r23
 100574c:	95e5c83a 	sub	r18,r18,r23
 1005750:	15efc83a 	sub	r23,r2,r23
 1005754:	a5c00215 	stw	r23,8(r20)
 1005758:	b83f8726 	beq	r23,zero,1005578 <__sfvwrite_r+0xb4>
 100575c:	903fe11e 	bne	r18,zero,10056e4 <__sfvwrite_r+0x220>
 1005760:	8f000017 	ldw	fp,0(r17)
 1005764:	8c800117 	ldw	r18,4(r17)
 1005768:	0011883a 	mov	r8,zero
 100576c:	8c400204 	addi	r17,r17,8
 1005770:	003fdb06 	br	10056e0 <__sfvwrite_r+0x21c>
 1005774:	180d883a 	mov	r6,r3
 1005778:	e00b883a 	mov	r5,fp
 100577c:	da000115 	stw	r8,4(sp)
 1005780:	d8c00015 	stw	r3,0(sp)
 1005784:	10067d80 	call	10067d8 <memmove>
 1005788:	d8c00017 	ldw	r3,0(sp)
 100578c:	80800017 	ldw	r2,0(r16)
 1005790:	800b883a 	mov	r5,r16
 1005794:	a809883a 	mov	r4,r21
 1005798:	10c5883a 	add	r2,r2,r3
 100579c:	80800015 	stw	r2,0(r16)
 10057a0:	d8c00015 	stw	r3,0(sp)
 10057a4:	1004c640 	call	1004c64 <_fflush_r>
 10057a8:	d8c00017 	ldw	r3,0(sp)
 10057ac:	da000117 	ldw	r8,4(sp)
 10057b0:	103fc21e 	bne	r2,zero,10056bc <__sfvwrite_r+0x1f8>
 10057b4:	182f883a 	mov	r23,r3
 10057b8:	9de7c83a 	sub	r19,r19,r23
 10057bc:	983fe11e 	bne	r19,zero,1005744 <__sfvwrite_r+0x280>
 10057c0:	800b883a 	mov	r5,r16
 10057c4:	a809883a 	mov	r4,r21
 10057c8:	1004c640 	call	1004c64 <_fflush_r>
 10057cc:	103fbb1e 	bne	r2,zero,10056bc <__sfvwrite_r+0x1f8>
 10057d0:	0011883a 	mov	r8,zero
 10057d4:	003fdb06 	br	1005744 <__sfvwrite_r+0x280>
 10057d8:	94c0012e 	bgeu	r18,r19,10057e0 <__sfvwrite_r+0x31c>
 10057dc:	9027883a 	mov	r19,r18
 10057e0:	980d883a 	mov	r6,r19
 10057e4:	e00b883a 	mov	r5,fp
 10057e8:	10067d80 	call	10067d8 <memmove>
 10057ec:	80800217 	ldw	r2,8(r16)
 10057f0:	80c00017 	ldw	r3,0(r16)
 10057f4:	14c5c83a 	sub	r2,r2,r19
 10057f8:	1cc7883a 	add	r3,r3,r19
 10057fc:	80800215 	stw	r2,8(r16)
 1005800:	80c00015 	stw	r3,0(r16)
 1005804:	10004326 	beq	r2,zero,1005914 <__sfvwrite_r+0x450>
 1005808:	9805883a 	mov	r2,r19
 100580c:	003f8606 	br	1005628 <__sfvwrite_r+0x164>
 1005810:	b00d883a 	mov	r6,r22
 1005814:	e00b883a 	mov	r5,fp
 1005818:	da000115 	stw	r8,4(sp)
 100581c:	10067d80 	call	10067d8 <memmove>
 1005820:	80800217 	ldw	r2,8(r16)
 1005824:	80c00017 	ldw	r3,0(r16)
 1005828:	da000117 	ldw	r8,4(sp)
 100582c:	1585c83a 	sub	r2,r2,r22
 1005830:	1dad883a 	add	r22,r3,r22
 1005834:	80800215 	stw	r2,8(r16)
 1005838:	85800015 	stw	r22,0(r16)
 100583c:	003fbf06 	br	100573c <__sfvwrite_r+0x278>
 1005840:	81000017 	ldw	r4,0(r16)
 1005844:	9027883a 	mov	r19,r18
 1005848:	902f883a 	mov	r23,r18
 100584c:	003f6c06 	br	1005600 <__sfvwrite_r+0x13c>
 1005850:	900d883a 	mov	r6,r18
 1005854:	01400284 	movi	r5,10
 1005858:	e009883a 	mov	r4,fp
 100585c:	10065ac0 	call	10065ac <memchr>
 1005860:	10003e26 	beq	r2,zero,100595c <__sfvwrite_r+0x498>
 1005864:	10800044 	addi	r2,r2,1
 1005868:	1727c83a 	sub	r19,r2,fp
 100586c:	02000044 	movi	r8,1
 1005870:	003f9d06 	br	10056e8 <__sfvwrite_r+0x224>
 1005874:	80800517 	ldw	r2,20(r16)
 1005878:	81400417 	ldw	r5,16(r16)
 100587c:	81c00017 	ldw	r7,0(r16)
 1005880:	10a7883a 	add	r19,r2,r2
 1005884:	9885883a 	add	r2,r19,r2
 1005888:	1026d7fa 	srli	r19,r2,31
 100588c:	396dc83a 	sub	r22,r7,r5
 1005890:	b1000044 	addi	r4,r22,1
 1005894:	9885883a 	add	r2,r19,r2
 1005898:	1027d07a 	srai	r19,r2,1
 100589c:	2485883a 	add	r2,r4,r18
 10058a0:	980d883a 	mov	r6,r19
 10058a4:	9880022e 	bgeu	r19,r2,10058b0 <__sfvwrite_r+0x3ec>
 10058a8:	1027883a 	mov	r19,r2
 10058ac:	100d883a 	mov	r6,r2
 10058b0:	18c1000c 	andi	r3,r3,1024
 10058b4:	18001c26 	beq	r3,zero,1005928 <__sfvwrite_r+0x464>
 10058b8:	300b883a 	mov	r5,r6
 10058bc:	a809883a 	mov	r4,r21
 10058c0:	1005da00 	call	1005da0 <_malloc_r>
 10058c4:	102f883a 	mov	r23,r2
 10058c8:	10002926 	beq	r2,zero,1005970 <__sfvwrite_r+0x4ac>
 10058cc:	81400417 	ldw	r5,16(r16)
 10058d0:	b00d883a 	mov	r6,r22
 10058d4:	1009883a 	mov	r4,r2
 10058d8:	10066900 	call	1006690 <memcpy>
 10058dc:	8080030b 	ldhu	r2,12(r16)
 10058e0:	00fedfc4 	movi	r3,-1153
 10058e4:	10c4703a 	and	r2,r2,r3
 10058e8:	10802014 	ori	r2,r2,128
 10058ec:	8080030d 	sth	r2,12(r16)
 10058f0:	bd89883a 	add	r4,r23,r22
 10058f4:	9d8fc83a 	sub	r7,r19,r22
 10058f8:	85c00415 	stw	r23,16(r16)
 10058fc:	84c00515 	stw	r19,20(r16)
 1005900:	81000015 	stw	r4,0(r16)
 1005904:	9027883a 	mov	r19,r18
 1005908:	81c00215 	stw	r7,8(r16)
 100590c:	902f883a 	mov	r23,r18
 1005910:	003f3b06 	br	1005600 <__sfvwrite_r+0x13c>
 1005914:	800b883a 	mov	r5,r16
 1005918:	a809883a 	mov	r4,r21
 100591c:	1004c640 	call	1004c64 <_fflush_r>
 1005920:	103fb926 	beq	r2,zero,1005808 <__sfvwrite_r+0x344>
 1005924:	003f6506 	br	10056bc <__sfvwrite_r+0x1f8>
 1005928:	a809883a 	mov	r4,r21
 100592c:	1007a580 	call	1007a58 <_realloc_r>
 1005930:	102f883a 	mov	r23,r2
 1005934:	103fee1e 	bne	r2,zero,10058f0 <__sfvwrite_r+0x42c>
 1005938:	81400417 	ldw	r5,16(r16)
 100593c:	a809883a 	mov	r4,r21
 1005940:	10051b40 	call	10051b4 <_free_r>
 1005944:	8080030b 	ldhu	r2,12(r16)
 1005948:	00ffdfc4 	movi	r3,-129
 100594c:	1884703a 	and	r2,r3,r2
 1005950:	00c00304 	movi	r3,12
 1005954:	a8c00015 	stw	r3,0(r21)
 1005958:	003f5906 	br	10056c0 <__sfvwrite_r+0x1fc>
 100595c:	94c00044 	addi	r19,r18,1
 1005960:	02000044 	movi	r8,1
 1005964:	003f6006 	br	10056e8 <__sfvwrite_r+0x224>
 1005968:	00bfffc4 	movi	r2,-1
 100596c:	003f0306 	br	100557c <__sfvwrite_r+0xb8>
 1005970:	00800304 	movi	r2,12
 1005974:	a8800015 	stw	r2,0(r21)
 1005978:	8080030b 	ldhu	r2,12(r16)
 100597c:	003f5006 	br	10056c0 <__sfvwrite_r+0x1fc>

01005980 <_fwalk>:
 1005980:	defff704 	addi	sp,sp,-36
 1005984:	dd000415 	stw	r20,16(sp)
 1005988:	dfc00815 	stw	ra,32(sp)
 100598c:	ddc00715 	stw	r23,28(sp)
 1005990:	dd800615 	stw	r22,24(sp)
 1005994:	dd400515 	stw	r21,20(sp)
 1005998:	dcc00315 	stw	r19,12(sp)
 100599c:	dc800215 	stw	r18,8(sp)
 10059a0:	dc400115 	stw	r17,4(sp)
 10059a4:	dc000015 	stw	r16,0(sp)
 10059a8:	2500b804 	addi	r20,r4,736
 10059ac:	a0002326 	beq	r20,zero,1005a3c <_fwalk+0xbc>
 10059b0:	282b883a 	mov	r21,r5
 10059b4:	002f883a 	mov	r23,zero
 10059b8:	05800044 	movi	r22,1
 10059bc:	04ffffc4 	movi	r19,-1
 10059c0:	a4400117 	ldw	r17,4(r20)
 10059c4:	a4800217 	ldw	r18,8(r20)
 10059c8:	8c7fffc4 	addi	r17,r17,-1
 10059cc:	88000d16 	blt	r17,zero,1005a04 <_fwalk+0x84>
 10059d0:	94000304 	addi	r16,r18,12
 10059d4:	94800384 	addi	r18,r18,14
 10059d8:	8080000b 	ldhu	r2,0(r16)
 10059dc:	8c7fffc4 	addi	r17,r17,-1
 10059e0:	813ffd04 	addi	r4,r16,-12
 10059e4:	b080042e 	bgeu	r22,r2,10059f8 <_fwalk+0x78>
 10059e8:	9080000f 	ldh	r2,0(r18)
 10059ec:	14c00226 	beq	r2,r19,10059f8 <_fwalk+0x78>
 10059f0:	a83ee83a 	callr	r21
 10059f4:	b8aeb03a 	or	r23,r23,r2
 10059f8:	84001a04 	addi	r16,r16,104
 10059fc:	94801a04 	addi	r18,r18,104
 1005a00:	8cfff51e 	bne	r17,r19,10059d8 <_fwalk+0x58>
 1005a04:	a5000017 	ldw	r20,0(r20)
 1005a08:	a03fed1e 	bne	r20,zero,10059c0 <_fwalk+0x40>
 1005a0c:	b805883a 	mov	r2,r23
 1005a10:	dfc00817 	ldw	ra,32(sp)
 1005a14:	ddc00717 	ldw	r23,28(sp)
 1005a18:	dd800617 	ldw	r22,24(sp)
 1005a1c:	dd400517 	ldw	r21,20(sp)
 1005a20:	dd000417 	ldw	r20,16(sp)
 1005a24:	dcc00317 	ldw	r19,12(sp)
 1005a28:	dc800217 	ldw	r18,8(sp)
 1005a2c:	dc400117 	ldw	r17,4(sp)
 1005a30:	dc000017 	ldw	r16,0(sp)
 1005a34:	dec00904 	addi	sp,sp,36
 1005a38:	f800283a 	ret
 1005a3c:	002f883a 	mov	r23,zero
 1005a40:	003ff206 	br	1005a0c <_fwalk+0x8c>

01005a44 <_fwalk_reent>:
 1005a44:	defff704 	addi	sp,sp,-36
 1005a48:	dd000415 	stw	r20,16(sp)
 1005a4c:	dfc00815 	stw	ra,32(sp)
 1005a50:	ddc00715 	stw	r23,28(sp)
 1005a54:	dd800615 	stw	r22,24(sp)
 1005a58:	dd400515 	stw	r21,20(sp)
 1005a5c:	dcc00315 	stw	r19,12(sp)
 1005a60:	dc800215 	stw	r18,8(sp)
 1005a64:	dc400115 	stw	r17,4(sp)
 1005a68:	dc000015 	stw	r16,0(sp)
 1005a6c:	2500b804 	addi	r20,r4,736
 1005a70:	a0002326 	beq	r20,zero,1005b00 <_fwalk_reent+0xbc>
 1005a74:	282b883a 	mov	r21,r5
 1005a78:	2027883a 	mov	r19,r4
 1005a7c:	002f883a 	mov	r23,zero
 1005a80:	05800044 	movi	r22,1
 1005a84:	04bfffc4 	movi	r18,-1
 1005a88:	a4400117 	ldw	r17,4(r20)
 1005a8c:	a4000217 	ldw	r16,8(r20)
 1005a90:	8c7fffc4 	addi	r17,r17,-1
 1005a94:	88000c16 	blt	r17,zero,1005ac8 <_fwalk_reent+0x84>
 1005a98:	84000304 	addi	r16,r16,12
 1005a9c:	8080000b 	ldhu	r2,0(r16)
 1005aa0:	8c7fffc4 	addi	r17,r17,-1
 1005aa4:	817ffd04 	addi	r5,r16,-12
 1005aa8:	b080052e 	bgeu	r22,r2,1005ac0 <_fwalk_reent+0x7c>
 1005aac:	8080008f 	ldh	r2,2(r16)
 1005ab0:	9809883a 	mov	r4,r19
 1005ab4:	14800226 	beq	r2,r18,1005ac0 <_fwalk_reent+0x7c>
 1005ab8:	a83ee83a 	callr	r21
 1005abc:	b8aeb03a 	or	r23,r23,r2
 1005ac0:	84001a04 	addi	r16,r16,104
 1005ac4:	8cbff51e 	bne	r17,r18,1005a9c <_fwalk_reent+0x58>
 1005ac8:	a5000017 	ldw	r20,0(r20)
 1005acc:	a03fee1e 	bne	r20,zero,1005a88 <_fwalk_reent+0x44>
 1005ad0:	b805883a 	mov	r2,r23
 1005ad4:	dfc00817 	ldw	ra,32(sp)
 1005ad8:	ddc00717 	ldw	r23,28(sp)
 1005adc:	dd800617 	ldw	r22,24(sp)
 1005ae0:	dd400517 	ldw	r21,20(sp)
 1005ae4:	dd000417 	ldw	r20,16(sp)
 1005ae8:	dcc00317 	ldw	r19,12(sp)
 1005aec:	dc800217 	ldw	r18,8(sp)
 1005af0:	dc400117 	ldw	r17,4(sp)
 1005af4:	dc000017 	ldw	r16,0(sp)
 1005af8:	dec00904 	addi	sp,sp,36
 1005afc:	f800283a 	ret
 1005b00:	002f883a 	mov	r23,zero
 1005b04:	003ff206 	br	1005ad0 <_fwalk_reent+0x8c>

01005b08 <_setlocale_r>:
 1005b08:	30001b26 	beq	r6,zero,1005b78 <_setlocale_r+0x70>
 1005b0c:	01404074 	movhi	r5,257
 1005b10:	defffe04 	addi	sp,sp,-8
 1005b14:	297f7304 	addi	r5,r5,-564
 1005b18:	3009883a 	mov	r4,r6
 1005b1c:	dc000015 	stw	r16,0(sp)
 1005b20:	dfc00115 	stw	ra,4(sp)
 1005b24:	3021883a 	mov	r16,r6
 1005b28:	10081c00 	call	10081c0 <strcmp>
 1005b2c:	1000061e 	bne	r2,zero,1005b48 <_setlocale_r+0x40>
 1005b30:	00804074 	movhi	r2,257
 1005b34:	10bf7204 	addi	r2,r2,-568
 1005b38:	dfc00117 	ldw	ra,4(sp)
 1005b3c:	dc000017 	ldw	r16,0(sp)
 1005b40:	dec00204 	addi	sp,sp,8
 1005b44:	f800283a 	ret
 1005b48:	01404074 	movhi	r5,257
 1005b4c:	297f7204 	addi	r5,r5,-568
 1005b50:	8009883a 	mov	r4,r16
 1005b54:	10081c00 	call	10081c0 <strcmp>
 1005b58:	103ff526 	beq	r2,zero,1005b30 <_setlocale_r+0x28>
 1005b5c:	01404074 	movhi	r5,257
 1005b60:	297f5d04 	addi	r5,r5,-652
 1005b64:	8009883a 	mov	r4,r16
 1005b68:	10081c00 	call	10081c0 <strcmp>
 1005b6c:	103ff026 	beq	r2,zero,1005b30 <_setlocale_r+0x28>
 1005b70:	0005883a 	mov	r2,zero
 1005b74:	003ff006 	br	1005b38 <_setlocale_r+0x30>
 1005b78:	00804074 	movhi	r2,257
 1005b7c:	10bf7204 	addi	r2,r2,-568
 1005b80:	f800283a 	ret

01005b84 <__locale_charset>:
 1005b84:	00804074 	movhi	r2,257
 1005b88:	10812304 	addi	r2,r2,1164
 1005b8c:	f800283a 	ret

01005b90 <__locale_mb_cur_max>:
 1005b90:	00804074 	movhi	r2,257
 1005b94:	1086bf04 	addi	r2,r2,6908
 1005b98:	10800017 	ldw	r2,0(r2)
 1005b9c:	f800283a 	ret

01005ba0 <__locale_msgcharset>:
 1005ba0:	00804074 	movhi	r2,257
 1005ba4:	10811b04 	addi	r2,r2,1132
 1005ba8:	f800283a 	ret

01005bac <__locale_cjk_lang>:
 1005bac:	0005883a 	mov	r2,zero
 1005bb0:	f800283a 	ret

01005bb4 <_localeconv_r>:
 1005bb4:	00804074 	movhi	r2,257
 1005bb8:	10812b04 	addi	r2,r2,1196
 1005bbc:	f800283a 	ret

01005bc0 <setlocale>:
 1005bc0:	00804074 	movhi	r2,257
 1005bc4:	1086be04 	addi	r2,r2,6904
 1005bc8:	280d883a 	mov	r6,r5
 1005bcc:	200b883a 	mov	r5,r4
 1005bd0:	11000017 	ldw	r4,0(r2)
 1005bd4:	1005b081 	jmpi	1005b08 <_setlocale_r>

01005bd8 <localeconv>:
 1005bd8:	00804074 	movhi	r2,257
 1005bdc:	10812b04 	addi	r2,r2,1196
 1005be0:	f800283a 	ret

01005be4 <__smakebuf_r>:
 1005be4:	2880030b 	ldhu	r2,12(r5)
 1005be8:	10c0008c 	andi	r3,r2,2
 1005bec:	1800411e 	bne	r3,zero,1005cf4 <__smakebuf_r+0x110>
 1005bf0:	deffec04 	addi	sp,sp,-80
 1005bf4:	dc000f15 	stw	r16,60(sp)
 1005bf8:	2821883a 	mov	r16,r5
 1005bfc:	2940038f 	ldh	r5,14(r5)
 1005c00:	dc401015 	stw	r17,64(sp)
 1005c04:	dfc01315 	stw	ra,76(sp)
 1005c08:	dcc01215 	stw	r19,72(sp)
 1005c0c:	dc801115 	stw	r18,68(sp)
 1005c10:	2023883a 	mov	r17,r4
 1005c14:	28001c16 	blt	r5,zero,1005c88 <__smakebuf_r+0xa4>
 1005c18:	d80d883a 	mov	r6,sp
 1005c1c:	1009d680 	call	1009d68 <_fstat_r>
 1005c20:	10001816 	blt	r2,zero,1005c84 <__smakebuf_r+0xa0>
 1005c24:	d8800117 	ldw	r2,4(sp)
 1005c28:	00e00014 	movui	r3,32768
 1005c2c:	10bc000c 	andi	r2,r2,61440
 1005c30:	14c80020 	cmpeqi	r19,r2,8192
 1005c34:	10c03726 	beq	r2,r3,1005d14 <__smakebuf_r+0x130>
 1005c38:	80c0030b 	ldhu	r3,12(r16)
 1005c3c:	18c20014 	ori	r3,r3,2048
 1005c40:	80c0030d 	sth	r3,12(r16)
 1005c44:	00c80004 	movi	r3,8192
 1005c48:	10c0521e 	bne	r2,r3,1005d94 <__smakebuf_r+0x1b0>
 1005c4c:	8140038f 	ldh	r5,14(r16)
 1005c50:	8809883a 	mov	r4,r17
 1005c54:	1009dc40 	call	1009dc4 <_isatty_r>
 1005c58:	10004c26 	beq	r2,zero,1005d8c <__smakebuf_r+0x1a8>
 1005c5c:	8080030b 	ldhu	r2,12(r16)
 1005c60:	80c010c4 	addi	r3,r16,67
 1005c64:	80c00015 	stw	r3,0(r16)
 1005c68:	10800054 	ori	r2,r2,1
 1005c6c:	8080030d 	sth	r2,12(r16)
 1005c70:	00800044 	movi	r2,1
 1005c74:	80c00415 	stw	r3,16(r16)
 1005c78:	80800515 	stw	r2,20(r16)
 1005c7c:	04810004 	movi	r18,1024
 1005c80:	00000706 	br	1005ca0 <__smakebuf_r+0xbc>
 1005c84:	8080030b 	ldhu	r2,12(r16)
 1005c88:	10c0200c 	andi	r3,r2,128
 1005c8c:	18001f1e 	bne	r3,zero,1005d0c <__smakebuf_r+0x128>
 1005c90:	04810004 	movi	r18,1024
 1005c94:	10820014 	ori	r2,r2,2048
 1005c98:	8080030d 	sth	r2,12(r16)
 1005c9c:	0027883a 	mov	r19,zero
 1005ca0:	900b883a 	mov	r5,r18
 1005ca4:	8809883a 	mov	r4,r17
 1005ca8:	1005da00 	call	1005da0 <_malloc_r>
 1005cac:	10002c26 	beq	r2,zero,1005d60 <__smakebuf_r+0x17c>
 1005cb0:	80c0030b 	ldhu	r3,12(r16)
 1005cb4:	01004034 	movhi	r4,256
 1005cb8:	21133e04 	addi	r4,r4,19704
 1005cbc:	89000f15 	stw	r4,60(r17)
 1005cc0:	18c02014 	ori	r3,r3,128
 1005cc4:	80c0030d 	sth	r3,12(r16)
 1005cc8:	80800015 	stw	r2,0(r16)
 1005ccc:	80800415 	stw	r2,16(r16)
 1005cd0:	84800515 	stw	r18,20(r16)
 1005cd4:	98001a1e 	bne	r19,zero,1005d40 <__smakebuf_r+0x15c>
 1005cd8:	dfc01317 	ldw	ra,76(sp)
 1005cdc:	dcc01217 	ldw	r19,72(sp)
 1005ce0:	dc801117 	ldw	r18,68(sp)
 1005ce4:	dc401017 	ldw	r17,64(sp)
 1005ce8:	dc000f17 	ldw	r16,60(sp)
 1005cec:	dec01404 	addi	sp,sp,80
 1005cf0:	f800283a 	ret
 1005cf4:	288010c4 	addi	r2,r5,67
 1005cf8:	28800015 	stw	r2,0(r5)
 1005cfc:	28800415 	stw	r2,16(r5)
 1005d00:	00800044 	movi	r2,1
 1005d04:	28800515 	stw	r2,20(r5)
 1005d08:	f800283a 	ret
 1005d0c:	04801004 	movi	r18,64
 1005d10:	003fe006 	br	1005c94 <__smakebuf_r+0xb0>
 1005d14:	81000a17 	ldw	r4,40(r16)
 1005d18:	00c04074 	movhi	r3,257
 1005d1c:	18e05704 	addi	r3,r3,-32420
 1005d20:	20ffc51e 	bne	r4,r3,1005c38 <__smakebuf_r+0x54>
 1005d24:	8080030b 	ldhu	r2,12(r16)
 1005d28:	04810004 	movi	r18,1024
 1005d2c:	84801315 	stw	r18,76(r16)
 1005d30:	1484b03a 	or	r2,r2,r18
 1005d34:	8080030d 	sth	r2,12(r16)
 1005d38:	0027883a 	mov	r19,zero
 1005d3c:	003fd806 	br	1005ca0 <__smakebuf_r+0xbc>
 1005d40:	8140038f 	ldh	r5,14(r16)
 1005d44:	8809883a 	mov	r4,r17
 1005d48:	1009dc40 	call	1009dc4 <_isatty_r>
 1005d4c:	103fe226 	beq	r2,zero,1005cd8 <__smakebuf_r+0xf4>
 1005d50:	8080030b 	ldhu	r2,12(r16)
 1005d54:	10800054 	ori	r2,r2,1
 1005d58:	8080030d 	sth	r2,12(r16)
 1005d5c:	003fde06 	br	1005cd8 <__smakebuf_r+0xf4>
 1005d60:	8080030b 	ldhu	r2,12(r16)
 1005d64:	10c0800c 	andi	r3,r2,512
 1005d68:	183fdb1e 	bne	r3,zero,1005cd8 <__smakebuf_r+0xf4>
 1005d6c:	10800094 	ori	r2,r2,2
 1005d70:	80c010c4 	addi	r3,r16,67
 1005d74:	8080030d 	sth	r2,12(r16)
 1005d78:	00800044 	movi	r2,1
 1005d7c:	80c00015 	stw	r3,0(r16)
 1005d80:	80c00415 	stw	r3,16(r16)
 1005d84:	80800515 	stw	r2,20(r16)
 1005d88:	003fd306 	br	1005cd8 <__smakebuf_r+0xf4>
 1005d8c:	04810004 	movi	r18,1024
 1005d90:	003fc306 	br	1005ca0 <__smakebuf_r+0xbc>
 1005d94:	0027883a 	mov	r19,zero
 1005d98:	04810004 	movi	r18,1024
 1005d9c:	003fc006 	br	1005ca0 <__smakebuf_r+0xbc>

01005da0 <_malloc_r>:
 1005da0:	defff504 	addi	sp,sp,-44
 1005da4:	dc800315 	stw	r18,12(sp)
 1005da8:	dfc00a15 	stw	ra,40(sp)
 1005dac:	df000915 	stw	fp,36(sp)
 1005db0:	ddc00815 	stw	r23,32(sp)
 1005db4:	dd800715 	stw	r22,28(sp)
 1005db8:	dd400615 	stw	r21,24(sp)
 1005dbc:	dd000515 	stw	r20,20(sp)
 1005dc0:	dcc00415 	stw	r19,16(sp)
 1005dc4:	dc400215 	stw	r17,8(sp)
 1005dc8:	dc000115 	stw	r16,4(sp)
 1005dcc:	288002c4 	addi	r2,r5,11
 1005dd0:	00c00584 	movi	r3,22
 1005dd4:	2025883a 	mov	r18,r4
 1005dd8:	18807f2e 	bgeu	r3,r2,1005fd8 <_malloc_r+0x238>
 1005ddc:	047ffe04 	movi	r17,-8
 1005de0:	1462703a 	and	r17,r2,r17
 1005de4:	8800a316 	blt	r17,zero,1006074 <_malloc_r+0x2d4>
 1005de8:	8940a236 	bltu	r17,r5,1006074 <_malloc_r+0x2d4>
 1005dec:	100dbe00 	call	100dbe0 <__malloc_lock>
 1005df0:	00807dc4 	movi	r2,503
 1005df4:	1441e92e 	bgeu	r2,r17,100659c <_malloc_r+0x7fc>
 1005df8:	8804d27a 	srli	r2,r17,9
 1005dfc:	1000a126 	beq	r2,zero,1006084 <_malloc_r+0x2e4>
 1005e00:	00c00104 	movi	r3,4
 1005e04:	18811e36 	bltu	r3,r2,1006280 <_malloc_r+0x4e0>
 1005e08:	8804d1ba 	srli	r2,r17,6
 1005e0c:	12000e44 	addi	r8,r2,57
 1005e10:	11c00e04 	addi	r7,r2,56
 1005e14:	4209883a 	add	r4,r8,r8
 1005e18:	04c04074 	movhi	r19,257
 1005e1c:	2109883a 	add	r4,r4,r4
 1005e20:	9cc13904 	addi	r19,r19,1252
 1005e24:	2109883a 	add	r4,r4,r4
 1005e28:	9909883a 	add	r4,r19,r4
 1005e2c:	24000117 	ldw	r16,4(r4)
 1005e30:	213ffe04 	addi	r4,r4,-8
 1005e34:	24009726 	beq	r4,r16,1006094 <_malloc_r+0x2f4>
 1005e38:	80800117 	ldw	r2,4(r16)
 1005e3c:	01bfff04 	movi	r6,-4
 1005e40:	014003c4 	movi	r5,15
 1005e44:	1184703a 	and	r2,r2,r6
 1005e48:	1447c83a 	sub	r3,r2,r17
 1005e4c:	28c00716 	blt	r5,r3,1005e6c <_malloc_r+0xcc>
 1005e50:	1800920e 	bge	r3,zero,100609c <_malloc_r+0x2fc>
 1005e54:	84000317 	ldw	r16,12(r16)
 1005e58:	24008e26 	beq	r4,r16,1006094 <_malloc_r+0x2f4>
 1005e5c:	80800117 	ldw	r2,4(r16)
 1005e60:	1184703a 	and	r2,r2,r6
 1005e64:	1447c83a 	sub	r3,r2,r17
 1005e68:	28fff90e 	bge	r5,r3,1005e50 <_malloc_r+0xb0>
 1005e6c:	3809883a 	mov	r4,r7
 1005e70:	01804074 	movhi	r6,257
 1005e74:	9c000417 	ldw	r16,16(r19)
 1005e78:	31813904 	addi	r6,r6,1252
 1005e7c:	32000204 	addi	r8,r6,8
 1005e80:	82013426 	beq	r16,r8,1006354 <_malloc_r+0x5b4>
 1005e84:	80c00117 	ldw	r3,4(r16)
 1005e88:	00bfff04 	movi	r2,-4
 1005e8c:	188e703a 	and	r7,r3,r2
 1005e90:	3c45c83a 	sub	r2,r7,r17
 1005e94:	00c003c4 	movi	r3,15
 1005e98:	18811f16 	blt	r3,r2,1006318 <_malloc_r+0x578>
 1005e9c:	32000515 	stw	r8,20(r6)
 1005ea0:	32000415 	stw	r8,16(r6)
 1005ea4:	10007f0e 	bge	r2,zero,10060a4 <_malloc_r+0x304>
 1005ea8:	00807fc4 	movi	r2,511
 1005eac:	11c0fd36 	bltu	r2,r7,10062a4 <_malloc_r+0x504>
 1005eb0:	3806d0fa 	srli	r3,r7,3
 1005eb4:	01c00044 	movi	r7,1
 1005eb8:	30800117 	ldw	r2,4(r6)
 1005ebc:	19400044 	addi	r5,r3,1
 1005ec0:	294b883a 	add	r5,r5,r5
 1005ec4:	1807d0ba 	srai	r3,r3,2
 1005ec8:	294b883a 	add	r5,r5,r5
 1005ecc:	294b883a 	add	r5,r5,r5
 1005ed0:	298b883a 	add	r5,r5,r6
 1005ed4:	38c6983a 	sll	r3,r7,r3
 1005ed8:	29c00017 	ldw	r7,0(r5)
 1005edc:	2a7ffe04 	addi	r9,r5,-8
 1005ee0:	1886b03a 	or	r3,r3,r2
 1005ee4:	82400315 	stw	r9,12(r16)
 1005ee8:	81c00215 	stw	r7,8(r16)
 1005eec:	30c00115 	stw	r3,4(r6)
 1005ef0:	2c000015 	stw	r16,0(r5)
 1005ef4:	3c000315 	stw	r16,12(r7)
 1005ef8:	2005d0ba 	srai	r2,r4,2
 1005efc:	01400044 	movi	r5,1
 1005f00:	288a983a 	sll	r5,r5,r2
 1005f04:	19406f36 	bltu	r3,r5,10060c4 <_malloc_r+0x324>
 1005f08:	28c4703a 	and	r2,r5,r3
 1005f0c:	10000a1e 	bne	r2,zero,1005f38 <_malloc_r+0x198>
 1005f10:	00bfff04 	movi	r2,-4
 1005f14:	294b883a 	add	r5,r5,r5
 1005f18:	2088703a 	and	r4,r4,r2
 1005f1c:	28c4703a 	and	r2,r5,r3
 1005f20:	21000104 	addi	r4,r4,4
 1005f24:	1000041e 	bne	r2,zero,1005f38 <_malloc_r+0x198>
 1005f28:	294b883a 	add	r5,r5,r5
 1005f2c:	28c4703a 	and	r2,r5,r3
 1005f30:	21000104 	addi	r4,r4,4
 1005f34:	103ffc26 	beq	r2,zero,1005f28 <_malloc_r+0x188>
 1005f38:	02bfff04 	movi	r10,-4
 1005f3c:	024003c4 	movi	r9,15
 1005f40:	21800044 	addi	r6,r4,1
 1005f44:	318d883a 	add	r6,r6,r6
 1005f48:	318d883a 	add	r6,r6,r6
 1005f4c:	318d883a 	add	r6,r6,r6
 1005f50:	998d883a 	add	r6,r19,r6
 1005f54:	333ffe04 	addi	r12,r6,-8
 1005f58:	2017883a 	mov	r11,r4
 1005f5c:	31800104 	addi	r6,r6,4
 1005f60:	34000017 	ldw	r16,0(r6)
 1005f64:	31fffd04 	addi	r7,r6,-12
 1005f68:	81c0041e 	bne	r16,r7,1005f7c <_malloc_r+0x1dc>
 1005f6c:	0000fb06 	br	100635c <_malloc_r+0x5bc>
 1005f70:	1801030e 	bge	r3,zero,1006380 <_malloc_r+0x5e0>
 1005f74:	84000317 	ldw	r16,12(r16)
 1005f78:	81c0f826 	beq	r16,r7,100635c <_malloc_r+0x5bc>
 1005f7c:	80800117 	ldw	r2,4(r16)
 1005f80:	1284703a 	and	r2,r2,r10
 1005f84:	1447c83a 	sub	r3,r2,r17
 1005f88:	48fff90e 	bge	r9,r3,1005f70 <_malloc_r+0x1d0>
 1005f8c:	80800317 	ldw	r2,12(r16)
 1005f90:	81000217 	ldw	r4,8(r16)
 1005f94:	89400054 	ori	r5,r17,1
 1005f98:	81400115 	stw	r5,4(r16)
 1005f9c:	20800315 	stw	r2,12(r4)
 1005fa0:	11000215 	stw	r4,8(r2)
 1005fa4:	8463883a 	add	r17,r16,r17
 1005fa8:	9c400515 	stw	r17,20(r19)
 1005fac:	9c400415 	stw	r17,16(r19)
 1005fb0:	18800054 	ori	r2,r3,1
 1005fb4:	88800115 	stw	r2,4(r17)
 1005fb8:	8a000315 	stw	r8,12(r17)
 1005fbc:	8a000215 	stw	r8,8(r17)
 1005fc0:	88e3883a 	add	r17,r17,r3
 1005fc4:	88c00015 	stw	r3,0(r17)
 1005fc8:	9009883a 	mov	r4,r18
 1005fcc:	100dc040 	call	100dc04 <__malloc_unlock>
 1005fd0:	80800204 	addi	r2,r16,8
 1005fd4:	00001b06 	br	1006044 <_malloc_r+0x2a4>
 1005fd8:	04400404 	movi	r17,16
 1005fdc:	89402536 	bltu	r17,r5,1006074 <_malloc_r+0x2d4>
 1005fe0:	100dbe00 	call	100dbe0 <__malloc_lock>
 1005fe4:	00800184 	movi	r2,6
 1005fe8:	01000084 	movi	r4,2
 1005fec:	04c04074 	movhi	r19,257
 1005ff0:	1085883a 	add	r2,r2,r2
 1005ff4:	9cc13904 	addi	r19,r19,1252
 1005ff8:	1085883a 	add	r2,r2,r2
 1005ffc:	9885883a 	add	r2,r19,r2
 1006000:	14000117 	ldw	r16,4(r2)
 1006004:	10fffe04 	addi	r3,r2,-8
 1006008:	80c0d926 	beq	r16,r3,1006370 <_malloc_r+0x5d0>
 100600c:	80c00117 	ldw	r3,4(r16)
 1006010:	81000317 	ldw	r4,12(r16)
 1006014:	00bfff04 	movi	r2,-4
 1006018:	1884703a 	and	r2,r3,r2
 100601c:	81400217 	ldw	r5,8(r16)
 1006020:	8085883a 	add	r2,r16,r2
 1006024:	10c00117 	ldw	r3,4(r2)
 1006028:	29000315 	stw	r4,12(r5)
 100602c:	21400215 	stw	r5,8(r4)
 1006030:	18c00054 	ori	r3,r3,1
 1006034:	10c00115 	stw	r3,4(r2)
 1006038:	9009883a 	mov	r4,r18
 100603c:	100dc040 	call	100dc04 <__malloc_unlock>
 1006040:	80800204 	addi	r2,r16,8
 1006044:	dfc00a17 	ldw	ra,40(sp)
 1006048:	df000917 	ldw	fp,36(sp)
 100604c:	ddc00817 	ldw	r23,32(sp)
 1006050:	dd800717 	ldw	r22,28(sp)
 1006054:	dd400617 	ldw	r21,24(sp)
 1006058:	dd000517 	ldw	r20,20(sp)
 100605c:	dcc00417 	ldw	r19,16(sp)
 1006060:	dc800317 	ldw	r18,12(sp)
 1006064:	dc400217 	ldw	r17,8(sp)
 1006068:	dc000117 	ldw	r16,4(sp)
 100606c:	dec00b04 	addi	sp,sp,44
 1006070:	f800283a 	ret
 1006074:	00800304 	movi	r2,12
 1006078:	90800015 	stw	r2,0(r18)
 100607c:	0005883a 	mov	r2,zero
 1006080:	003ff006 	br	1006044 <_malloc_r+0x2a4>
 1006084:	01002004 	movi	r4,128
 1006088:	02001004 	movi	r8,64
 100608c:	01c00fc4 	movi	r7,63
 1006090:	003f6106 	br	1005e18 <_malloc_r+0x78>
 1006094:	4009883a 	mov	r4,r8
 1006098:	003f7506 	br	1005e70 <_malloc_r+0xd0>
 100609c:	81000317 	ldw	r4,12(r16)
 10060a0:	003fde06 	br	100601c <_malloc_r+0x27c>
 10060a4:	81c5883a 	add	r2,r16,r7
 10060a8:	11400117 	ldw	r5,4(r2)
 10060ac:	9009883a 	mov	r4,r18
 10060b0:	29400054 	ori	r5,r5,1
 10060b4:	11400115 	stw	r5,4(r2)
 10060b8:	100dc040 	call	100dc04 <__malloc_unlock>
 10060bc:	80800204 	addi	r2,r16,8
 10060c0:	003fe006 	br	1006044 <_malloc_r+0x2a4>
 10060c4:	9c000217 	ldw	r16,8(r19)
 10060c8:	00bfff04 	movi	r2,-4
 10060cc:	85800117 	ldw	r22,4(r16)
 10060d0:	b0ac703a 	and	r22,r22,r2
 10060d4:	b4400336 	bltu	r22,r17,10060e4 <_malloc_r+0x344>
 10060d8:	b445c83a 	sub	r2,r22,r17
 10060dc:	00c003c4 	movi	r3,15
 10060e0:	18805d16 	blt	r3,r2,1006258 <_malloc_r+0x4b8>
 10060e4:	05c04074 	movhi	r23,257
 10060e8:	00804074 	movhi	r2,257
 10060ec:	108d8e04 	addi	r2,r2,13880
 10060f0:	bdc6c004 	addi	r23,r23,6912
 10060f4:	15400017 	ldw	r21,0(r2)
 10060f8:	b8c00017 	ldw	r3,0(r23)
 10060fc:	00bfffc4 	movi	r2,-1
 1006100:	858d883a 	add	r6,r16,r22
 1006104:	8d6b883a 	add	r21,r17,r21
 1006108:	1880ea26 	beq	r3,r2,10064b4 <_malloc_r+0x714>
 100610c:	ad4403c4 	addi	r21,r21,4111
 1006110:	00bc0004 	movi	r2,-4096
 1006114:	a8aa703a 	and	r21,r21,r2
 1006118:	a80b883a 	mov	r5,r21
 100611c:	9009883a 	mov	r4,r18
 1006120:	d9800015 	stw	r6,0(sp)
 1006124:	10080300 	call	1008030 <_sbrk_r>
 1006128:	1029883a 	mov	r20,r2
 100612c:	00bfffc4 	movi	r2,-1
 1006130:	d9800017 	ldw	r6,0(sp)
 1006134:	a080e826 	beq	r20,r2,10064d8 <_malloc_r+0x738>
 1006138:	a180a636 	bltu	r20,r6,10063d4 <_malloc_r+0x634>
 100613c:	07004074 	movhi	fp,257
 1006140:	e70d9704 	addi	fp,fp,13916
 1006144:	e0800017 	ldw	r2,0(fp)
 1006148:	a887883a 	add	r3,r21,r2
 100614c:	e0c00015 	stw	r3,0(fp)
 1006150:	3500e626 	beq	r6,r20,10064ec <_malloc_r+0x74c>
 1006154:	b9000017 	ldw	r4,0(r23)
 1006158:	00bfffc4 	movi	r2,-1
 100615c:	2080ee26 	beq	r4,r2,1006518 <_malloc_r+0x778>
 1006160:	a185c83a 	sub	r2,r20,r6
 1006164:	10c5883a 	add	r2,r2,r3
 1006168:	e0800015 	stw	r2,0(fp)
 100616c:	a0c001cc 	andi	r3,r20,7
 1006170:	1800bc26 	beq	r3,zero,1006464 <_malloc_r+0x6c4>
 1006174:	a0e9c83a 	sub	r20,r20,r3
 1006178:	00840204 	movi	r2,4104
 100617c:	a5000204 	addi	r20,r20,8
 1006180:	10c7c83a 	sub	r3,r2,r3
 1006184:	a545883a 	add	r2,r20,r21
 1006188:	1083ffcc 	andi	r2,r2,4095
 100618c:	18abc83a 	sub	r21,r3,r2
 1006190:	a80b883a 	mov	r5,r21
 1006194:	9009883a 	mov	r4,r18
 1006198:	10080300 	call	1008030 <_sbrk_r>
 100619c:	00ffffc4 	movi	r3,-1
 10061a0:	10c0e126 	beq	r2,r3,1006528 <_malloc_r+0x788>
 10061a4:	1505c83a 	sub	r2,r2,r20
 10061a8:	1545883a 	add	r2,r2,r21
 10061ac:	10800054 	ori	r2,r2,1
 10061b0:	e0c00017 	ldw	r3,0(fp)
 10061b4:	9d000215 	stw	r20,8(r19)
 10061b8:	a0800115 	stw	r2,4(r20)
 10061bc:	a8c7883a 	add	r3,r21,r3
 10061c0:	e0c00015 	stw	r3,0(fp)
 10061c4:	84c00e26 	beq	r16,r19,1006200 <_malloc_r+0x460>
 10061c8:	018003c4 	movi	r6,15
 10061cc:	3580a72e 	bgeu	r6,r22,100646c <_malloc_r+0x6cc>
 10061d0:	81400117 	ldw	r5,4(r16)
 10061d4:	013ffe04 	movi	r4,-8
 10061d8:	b0bffd04 	addi	r2,r22,-12
 10061dc:	1104703a 	and	r2,r2,r4
 10061e0:	2900004c 	andi	r4,r5,1
 10061e4:	2088b03a 	or	r4,r4,r2
 10061e8:	81000115 	stw	r4,4(r16)
 10061ec:	01400144 	movi	r5,5
 10061f0:	8089883a 	add	r4,r16,r2
 10061f4:	21400115 	stw	r5,4(r4)
 10061f8:	21400215 	stw	r5,8(r4)
 10061fc:	3080cd36 	bltu	r6,r2,1006534 <_malloc_r+0x794>
 1006200:	00804074 	movhi	r2,257
 1006204:	108d8d04 	addi	r2,r2,13876
 1006208:	11000017 	ldw	r4,0(r2)
 100620c:	20c0012e 	bgeu	r4,r3,1006214 <_malloc_r+0x474>
 1006210:	10c00015 	stw	r3,0(r2)
 1006214:	00804074 	movhi	r2,257
 1006218:	108d8c04 	addi	r2,r2,13872
 100621c:	11000017 	ldw	r4,0(r2)
 1006220:	9c000217 	ldw	r16,8(r19)
 1006224:	20c0012e 	bgeu	r4,r3,100622c <_malloc_r+0x48c>
 1006228:	10c00015 	stw	r3,0(r2)
 100622c:	80c00117 	ldw	r3,4(r16)
 1006230:	00bfff04 	movi	r2,-4
 1006234:	1886703a 	and	r3,r3,r2
 1006238:	1c45c83a 	sub	r2,r3,r17
 100623c:	1c400236 	bltu	r3,r17,1006248 <_malloc_r+0x4a8>
 1006240:	00c003c4 	movi	r3,15
 1006244:	18800416 	blt	r3,r2,1006258 <_malloc_r+0x4b8>
 1006248:	9009883a 	mov	r4,r18
 100624c:	100dc040 	call	100dc04 <__malloc_unlock>
 1006250:	0005883a 	mov	r2,zero
 1006254:	003f7b06 	br	1006044 <_malloc_r+0x2a4>
 1006258:	88c00054 	ori	r3,r17,1
 100625c:	80c00115 	stw	r3,4(r16)
 1006260:	8463883a 	add	r17,r16,r17
 1006264:	10800054 	ori	r2,r2,1
 1006268:	9c400215 	stw	r17,8(r19)
 100626c:	88800115 	stw	r2,4(r17)
 1006270:	9009883a 	mov	r4,r18
 1006274:	100dc040 	call	100dc04 <__malloc_unlock>
 1006278:	80800204 	addi	r2,r16,8
 100627c:	003f7106 	br	1006044 <_malloc_r+0x2a4>
 1006280:	00c00504 	movi	r3,20
 1006284:	18804a2e 	bgeu	r3,r2,10063b0 <_malloc_r+0x610>
 1006288:	00c01504 	movi	r3,84
 100628c:	18806e36 	bltu	r3,r2,1006448 <_malloc_r+0x6a8>
 1006290:	8804d33a 	srli	r2,r17,12
 1006294:	12001bc4 	addi	r8,r2,111
 1006298:	11c01b84 	addi	r7,r2,110
 100629c:	4209883a 	add	r4,r8,r8
 10062a0:	003edd06 	br	1005e18 <_malloc_r+0x78>
 10062a4:	3804d27a 	srli	r2,r7,9
 10062a8:	00c00104 	movi	r3,4
 10062ac:	1880442e 	bgeu	r3,r2,10063c0 <_malloc_r+0x620>
 10062b0:	00c00504 	movi	r3,20
 10062b4:	18808136 	bltu	r3,r2,10064bc <_malloc_r+0x71c>
 10062b8:	11401704 	addi	r5,r2,92
 10062bc:	10c016c4 	addi	r3,r2,91
 10062c0:	294b883a 	add	r5,r5,r5
 10062c4:	294b883a 	add	r5,r5,r5
 10062c8:	294b883a 	add	r5,r5,r5
 10062cc:	994b883a 	add	r5,r19,r5
 10062d0:	28800017 	ldw	r2,0(r5)
 10062d4:	01804074 	movhi	r6,257
 10062d8:	297ffe04 	addi	r5,r5,-8
 10062dc:	31813904 	addi	r6,r6,1252
 10062e0:	28806526 	beq	r5,r2,1006478 <_malloc_r+0x6d8>
 10062e4:	01bfff04 	movi	r6,-4
 10062e8:	10c00117 	ldw	r3,4(r2)
 10062ec:	1986703a 	and	r3,r3,r6
 10062f0:	38c0022e 	bgeu	r7,r3,10062fc <_malloc_r+0x55c>
 10062f4:	10800217 	ldw	r2,8(r2)
 10062f8:	28bffb1e 	bne	r5,r2,10062e8 <_malloc_r+0x548>
 10062fc:	11400317 	ldw	r5,12(r2)
 1006300:	98c00117 	ldw	r3,4(r19)
 1006304:	81400315 	stw	r5,12(r16)
 1006308:	80800215 	stw	r2,8(r16)
 100630c:	2c000215 	stw	r16,8(r5)
 1006310:	14000315 	stw	r16,12(r2)
 1006314:	003ef806 	br	1005ef8 <_malloc_r+0x158>
 1006318:	88c00054 	ori	r3,r17,1
 100631c:	80c00115 	stw	r3,4(r16)
 1006320:	8463883a 	add	r17,r16,r17
 1006324:	34400515 	stw	r17,20(r6)
 1006328:	34400415 	stw	r17,16(r6)
 100632c:	10c00054 	ori	r3,r2,1
 1006330:	8a000315 	stw	r8,12(r17)
 1006334:	8a000215 	stw	r8,8(r17)
 1006338:	88c00115 	stw	r3,4(r17)
 100633c:	88a3883a 	add	r17,r17,r2
 1006340:	88800015 	stw	r2,0(r17)
 1006344:	9009883a 	mov	r4,r18
 1006348:	100dc040 	call	100dc04 <__malloc_unlock>
 100634c:	80800204 	addi	r2,r16,8
 1006350:	003f3c06 	br	1006044 <_malloc_r+0x2a4>
 1006354:	30c00117 	ldw	r3,4(r6)
 1006358:	003ee706 	br	1005ef8 <_malloc_r+0x158>
 100635c:	5ac00044 	addi	r11,r11,1
 1006360:	588000cc 	andi	r2,r11,3
 1006364:	31800204 	addi	r6,r6,8
 1006368:	103efd1e 	bne	r2,zero,1005f60 <_malloc_r+0x1c0>
 100636c:	00002406 	br	1006400 <_malloc_r+0x660>
 1006370:	14000317 	ldw	r16,12(r2)
 1006374:	143f251e 	bne	r2,r16,100600c <_malloc_r+0x26c>
 1006378:	21000084 	addi	r4,r4,2
 100637c:	003ebc06 	br	1005e70 <_malloc_r+0xd0>
 1006380:	8085883a 	add	r2,r16,r2
 1006384:	10c00117 	ldw	r3,4(r2)
 1006388:	81000317 	ldw	r4,12(r16)
 100638c:	81400217 	ldw	r5,8(r16)
 1006390:	18c00054 	ori	r3,r3,1
 1006394:	10c00115 	stw	r3,4(r2)
 1006398:	29000315 	stw	r4,12(r5)
 100639c:	21400215 	stw	r5,8(r4)
 10063a0:	9009883a 	mov	r4,r18
 10063a4:	100dc040 	call	100dc04 <__malloc_unlock>
 10063a8:	80800204 	addi	r2,r16,8
 10063ac:	003f2506 	br	1006044 <_malloc_r+0x2a4>
 10063b0:	12001704 	addi	r8,r2,92
 10063b4:	11c016c4 	addi	r7,r2,91
 10063b8:	4209883a 	add	r4,r8,r8
 10063bc:	003e9606 	br	1005e18 <_malloc_r+0x78>
 10063c0:	3804d1ba 	srli	r2,r7,6
 10063c4:	11400e44 	addi	r5,r2,57
 10063c8:	10c00e04 	addi	r3,r2,56
 10063cc:	294b883a 	add	r5,r5,r5
 10063d0:	003fbc06 	br	10062c4 <_malloc_r+0x524>
 10063d4:	84ff5926 	beq	r16,r19,100613c <_malloc_r+0x39c>
 10063d8:	00804074 	movhi	r2,257
 10063dc:	10813904 	addi	r2,r2,1252
 10063e0:	14000217 	ldw	r16,8(r2)
 10063e4:	00bfff04 	movi	r2,-4
 10063e8:	80c00117 	ldw	r3,4(r16)
 10063ec:	1886703a 	and	r3,r3,r2
 10063f0:	003f9106 	br	1006238 <_malloc_r+0x498>
 10063f4:	60800217 	ldw	r2,8(r12)
 10063f8:	213fffc4 	addi	r4,r4,-1
 10063fc:	1300651e 	bne	r2,r12,1006594 <_malloc_r+0x7f4>
 1006400:	208000cc 	andi	r2,r4,3
 1006404:	633ffe04 	addi	r12,r12,-8
 1006408:	103ffa1e 	bne	r2,zero,10063f4 <_malloc_r+0x654>
 100640c:	98800117 	ldw	r2,4(r19)
 1006410:	0146303a 	nor	r3,zero,r5
 1006414:	1884703a 	and	r2,r3,r2
 1006418:	98800115 	stw	r2,4(r19)
 100641c:	294b883a 	add	r5,r5,r5
 1006420:	117f2836 	bltu	r2,r5,10060c4 <_malloc_r+0x324>
 1006424:	283f2726 	beq	r5,zero,10060c4 <_malloc_r+0x324>
 1006428:	2886703a 	and	r3,r5,r2
 100642c:	5809883a 	mov	r4,r11
 1006430:	183ec31e 	bne	r3,zero,1005f40 <_malloc_r+0x1a0>
 1006434:	294b883a 	add	r5,r5,r5
 1006438:	2886703a 	and	r3,r5,r2
 100643c:	21000104 	addi	r4,r4,4
 1006440:	183ffc26 	beq	r3,zero,1006434 <_malloc_r+0x694>
 1006444:	003ebe06 	br	1005f40 <_malloc_r+0x1a0>
 1006448:	00c05504 	movi	r3,340
 100644c:	18801236 	bltu	r3,r2,1006498 <_malloc_r+0x6f8>
 1006450:	8804d3fa 	srli	r2,r17,15
 1006454:	12001e04 	addi	r8,r2,120
 1006458:	11c01dc4 	addi	r7,r2,119
 100645c:	4209883a 	add	r4,r8,r8
 1006460:	003e6d06 	br	1005e18 <_malloc_r+0x78>
 1006464:	00c40004 	movi	r3,4096
 1006468:	003f4606 	br	1006184 <_malloc_r+0x3e4>
 100646c:	00800044 	movi	r2,1
 1006470:	a0800115 	stw	r2,4(r20)
 1006474:	003f7406 	br	1006248 <_malloc_r+0x4a8>
 1006478:	1805d0ba 	srai	r2,r3,2
 100647c:	01c00044 	movi	r7,1
 1006480:	30c00117 	ldw	r3,4(r6)
 1006484:	388e983a 	sll	r7,r7,r2
 1006488:	2805883a 	mov	r2,r5
 100648c:	38c6b03a 	or	r3,r7,r3
 1006490:	30c00115 	stw	r3,4(r6)
 1006494:	003f9b06 	br	1006304 <_malloc_r+0x564>
 1006498:	00c15504 	movi	r3,1364
 100649c:	18801a36 	bltu	r3,r2,1006508 <_malloc_r+0x768>
 10064a0:	8804d4ba 	srli	r2,r17,18
 10064a4:	12001f44 	addi	r8,r2,125
 10064a8:	11c01f04 	addi	r7,r2,124
 10064ac:	4209883a 	add	r4,r8,r8
 10064b0:	003e5906 	br	1005e18 <_malloc_r+0x78>
 10064b4:	ad400404 	addi	r21,r21,16
 10064b8:	003f1706 	br	1006118 <_malloc_r+0x378>
 10064bc:	00c01504 	movi	r3,84
 10064c0:	18802336 	bltu	r3,r2,1006550 <_malloc_r+0x7b0>
 10064c4:	3804d33a 	srli	r2,r7,12
 10064c8:	11401bc4 	addi	r5,r2,111
 10064cc:	10c01b84 	addi	r3,r2,110
 10064d0:	294b883a 	add	r5,r5,r5
 10064d4:	003f7b06 	br	10062c4 <_malloc_r+0x524>
 10064d8:	9c000217 	ldw	r16,8(r19)
 10064dc:	00bfff04 	movi	r2,-4
 10064e0:	80c00117 	ldw	r3,4(r16)
 10064e4:	1886703a 	and	r3,r3,r2
 10064e8:	003f5306 	br	1006238 <_malloc_r+0x498>
 10064ec:	3083ffcc 	andi	r2,r6,4095
 10064f0:	103f181e 	bne	r2,zero,1006154 <_malloc_r+0x3b4>
 10064f4:	99000217 	ldw	r4,8(r19)
 10064f8:	b545883a 	add	r2,r22,r21
 10064fc:	10800054 	ori	r2,r2,1
 1006500:	20800115 	stw	r2,4(r4)
 1006504:	003f3e06 	br	1006200 <_malloc_r+0x460>
 1006508:	01003f84 	movi	r4,254
 100650c:	02001fc4 	movi	r8,127
 1006510:	01c01f84 	movi	r7,126
 1006514:	003e4006 	br	1005e18 <_malloc_r+0x78>
 1006518:	00804074 	movhi	r2,257
 100651c:	1086c004 	addi	r2,r2,6912
 1006520:	15000015 	stw	r20,0(r2)
 1006524:	003f1106 	br	100616c <_malloc_r+0x3cc>
 1006528:	00800044 	movi	r2,1
 100652c:	002b883a 	mov	r21,zero
 1006530:	003f1f06 	br	10061b0 <_malloc_r+0x410>
 1006534:	81400204 	addi	r5,r16,8
 1006538:	9009883a 	mov	r4,r18
 100653c:	10051b40 	call	10051b4 <_free_r>
 1006540:	00804074 	movhi	r2,257
 1006544:	108d9704 	addi	r2,r2,13916
 1006548:	10c00017 	ldw	r3,0(r2)
 100654c:	003f2c06 	br	1006200 <_malloc_r+0x460>
 1006550:	00c05504 	movi	r3,340
 1006554:	18800536 	bltu	r3,r2,100656c <_malloc_r+0x7cc>
 1006558:	3804d3fa 	srli	r2,r7,15
 100655c:	11401e04 	addi	r5,r2,120
 1006560:	10c01dc4 	addi	r3,r2,119
 1006564:	294b883a 	add	r5,r5,r5
 1006568:	003f5606 	br	10062c4 <_malloc_r+0x524>
 100656c:	00c15504 	movi	r3,1364
 1006570:	18800536 	bltu	r3,r2,1006588 <_malloc_r+0x7e8>
 1006574:	3804d4ba 	srli	r2,r7,18
 1006578:	11401f44 	addi	r5,r2,125
 100657c:	10c01f04 	addi	r3,r2,124
 1006580:	294b883a 	add	r5,r5,r5
 1006584:	003f4f06 	br	10062c4 <_malloc_r+0x524>
 1006588:	01403f84 	movi	r5,254
 100658c:	00c01f84 	movi	r3,126
 1006590:	003f4c06 	br	10062c4 <_malloc_r+0x524>
 1006594:	98800117 	ldw	r2,4(r19)
 1006598:	003fa006 	br	100641c <_malloc_r+0x67c>
 100659c:	8808d0fa 	srli	r4,r17,3
 10065a0:	20800044 	addi	r2,r4,1
 10065a4:	1085883a 	add	r2,r2,r2
 10065a8:	003e9006 	br	1005fec <_malloc_r+0x24c>

010065ac <memchr>:
 10065ac:	208000cc 	andi	r2,r4,3
 10065b0:	280f883a 	mov	r7,r5
 10065b4:	10003426 	beq	r2,zero,1006688 <memchr+0xdc>
 10065b8:	30bfffc4 	addi	r2,r6,-1
 10065bc:	30001a26 	beq	r6,zero,1006628 <memchr+0x7c>
 10065c0:	20c00003 	ldbu	r3,0(r4)
 10065c4:	29803fcc 	andi	r6,r5,255
 10065c8:	30c0051e 	bne	r6,r3,10065e0 <memchr+0x34>
 10065cc:	00001806 	br	1006630 <memchr+0x84>
 10065d0:	10001526 	beq	r2,zero,1006628 <memchr+0x7c>
 10065d4:	20c00003 	ldbu	r3,0(r4)
 10065d8:	10bfffc4 	addi	r2,r2,-1
 10065dc:	30c01426 	beq	r6,r3,1006630 <memchr+0x84>
 10065e0:	21000044 	addi	r4,r4,1
 10065e4:	20c000cc 	andi	r3,r4,3
 10065e8:	183ff91e 	bne	r3,zero,10065d0 <memchr+0x24>
 10065ec:	020000c4 	movi	r8,3
 10065f0:	40801136 	bltu	r8,r2,1006638 <memchr+0x8c>
 10065f4:	10000c26 	beq	r2,zero,1006628 <memchr+0x7c>
 10065f8:	20c00003 	ldbu	r3,0(r4)
 10065fc:	29403fcc 	andi	r5,r5,255
 1006600:	28c00b26 	beq	r5,r3,1006630 <memchr+0x84>
 1006604:	20c00044 	addi	r3,r4,1
 1006608:	39803fcc 	andi	r6,r7,255
 100660c:	2089883a 	add	r4,r4,r2
 1006610:	00000306 	br	1006620 <memchr+0x74>
 1006614:	18c00044 	addi	r3,r3,1
 1006618:	197fffc3 	ldbu	r5,-1(r3)
 100661c:	31400526 	beq	r6,r5,1006634 <memchr+0x88>
 1006620:	1805883a 	mov	r2,r3
 1006624:	20fffb1e 	bne	r4,r3,1006614 <memchr+0x68>
 1006628:	0005883a 	mov	r2,zero
 100662c:	f800283a 	ret
 1006630:	2005883a 	mov	r2,r4
 1006634:	f800283a 	ret
 1006638:	28c03fcc 	andi	r3,r5,255
 100663c:	1812923a 	slli	r9,r3,8
 1006640:	02ffbff4 	movhi	r11,65279
 1006644:	02a02074 	movhi	r10,32897
 1006648:	48d2b03a 	or	r9,r9,r3
 100664c:	4806943a 	slli	r3,r9,16
 1006650:	5affbfc4 	addi	r11,r11,-257
 1006654:	52a02004 	addi	r10,r10,-32640
 1006658:	48d2b03a 	or	r9,r9,r3
 100665c:	20c00017 	ldw	r3,0(r4)
 1006660:	48c6f03a 	xor	r3,r9,r3
 1006664:	1acd883a 	add	r6,r3,r11
 1006668:	00c6303a 	nor	r3,zero,r3
 100666c:	30c6703a 	and	r3,r6,r3
 1006670:	1a86703a 	and	r3,r3,r10
 1006674:	183fe01e 	bne	r3,zero,10065f8 <memchr+0x4c>
 1006678:	10bfff04 	addi	r2,r2,-4
 100667c:	21000104 	addi	r4,r4,4
 1006680:	40bff636 	bltu	r8,r2,100665c <memchr+0xb0>
 1006684:	003fdb06 	br	10065f4 <memchr+0x48>
 1006688:	3005883a 	mov	r2,r6
 100668c:	003fd706 	br	10065ec <memchr+0x40>

01006690 <memcpy>:
 1006690:	defffd04 	addi	sp,sp,-12
 1006694:	dfc00215 	stw	ra,8(sp)
 1006698:	dc400115 	stw	r17,4(sp)
 100669c:	dc000015 	stw	r16,0(sp)
 10066a0:	00c003c4 	movi	r3,15
 10066a4:	2005883a 	mov	r2,r4
 10066a8:	1980452e 	bgeu	r3,r6,10067c0 <memcpy+0x130>
 10066ac:	2906b03a 	or	r3,r5,r4
 10066b0:	18c000cc 	andi	r3,r3,3
 10066b4:	1800441e 	bne	r3,zero,10067c8 <memcpy+0x138>
 10066b8:	347ffc04 	addi	r17,r6,-16
 10066bc:	8822d13a 	srli	r17,r17,4
 10066c0:	28c00104 	addi	r3,r5,4
 10066c4:	23400104 	addi	r13,r4,4
 10066c8:	8820913a 	slli	r16,r17,4
 10066cc:	2b000204 	addi	r12,r5,8
 10066d0:	22c00204 	addi	r11,r4,8
 10066d4:	84000504 	addi	r16,r16,20
 10066d8:	2a800304 	addi	r10,r5,12
 10066dc:	22400304 	addi	r9,r4,12
 10066e0:	2c21883a 	add	r16,r5,r16
 10066e4:	2811883a 	mov	r8,r5
 10066e8:	200f883a 	mov	r7,r4
 10066ec:	41000017 	ldw	r4,0(r8)
 10066f0:	1fc00017 	ldw	ra,0(r3)
 10066f4:	63c00017 	ldw	r15,0(r12)
 10066f8:	39000015 	stw	r4,0(r7)
 10066fc:	53800017 	ldw	r14,0(r10)
 1006700:	6fc00015 	stw	ra,0(r13)
 1006704:	5bc00015 	stw	r15,0(r11)
 1006708:	4b800015 	stw	r14,0(r9)
 100670c:	18c00404 	addi	r3,r3,16
 1006710:	39c00404 	addi	r7,r7,16
 1006714:	42000404 	addi	r8,r8,16
 1006718:	6b400404 	addi	r13,r13,16
 100671c:	63000404 	addi	r12,r12,16
 1006720:	5ac00404 	addi	r11,r11,16
 1006724:	52800404 	addi	r10,r10,16
 1006728:	4a400404 	addi	r9,r9,16
 100672c:	1c3fef1e 	bne	r3,r16,10066ec <memcpy+0x5c>
 1006730:	89c00044 	addi	r7,r17,1
 1006734:	380e913a 	slli	r7,r7,4
 1006738:	310003cc 	andi	r4,r6,15
 100673c:	02c000c4 	movi	r11,3
 1006740:	11c7883a 	add	r3,r2,r7
 1006744:	29cb883a 	add	r5,r5,r7
 1006748:	5900212e 	bgeu	r11,r4,10067d0 <memcpy+0x140>
 100674c:	1813883a 	mov	r9,r3
 1006750:	2811883a 	mov	r8,r5
 1006754:	200f883a 	mov	r7,r4
 1006758:	42800017 	ldw	r10,0(r8)
 100675c:	4a400104 	addi	r9,r9,4
 1006760:	39ffff04 	addi	r7,r7,-4
 1006764:	4abfff15 	stw	r10,-4(r9)
 1006768:	42000104 	addi	r8,r8,4
 100676c:	59fffa36 	bltu	r11,r7,1006758 <memcpy+0xc8>
 1006770:	213fff04 	addi	r4,r4,-4
 1006774:	2008d0ba 	srli	r4,r4,2
 1006778:	318000cc 	andi	r6,r6,3
 100677c:	21000044 	addi	r4,r4,1
 1006780:	2109883a 	add	r4,r4,r4
 1006784:	2109883a 	add	r4,r4,r4
 1006788:	1907883a 	add	r3,r3,r4
 100678c:	290b883a 	add	r5,r5,r4
 1006790:	30000626 	beq	r6,zero,10067ac <memcpy+0x11c>
 1006794:	198d883a 	add	r6,r3,r6
 1006798:	29c00003 	ldbu	r7,0(r5)
 100679c:	18c00044 	addi	r3,r3,1
 10067a0:	29400044 	addi	r5,r5,1
 10067a4:	19ffffc5 	stb	r7,-1(r3)
 10067a8:	19bffb1e 	bne	r3,r6,1006798 <memcpy+0x108>
 10067ac:	dfc00217 	ldw	ra,8(sp)
 10067b0:	dc400117 	ldw	r17,4(sp)
 10067b4:	dc000017 	ldw	r16,0(sp)
 10067b8:	dec00304 	addi	sp,sp,12
 10067bc:	f800283a 	ret
 10067c0:	2007883a 	mov	r3,r4
 10067c4:	003ff206 	br	1006790 <memcpy+0x100>
 10067c8:	2007883a 	mov	r3,r4
 10067cc:	003ff106 	br	1006794 <memcpy+0x104>
 10067d0:	200d883a 	mov	r6,r4
 10067d4:	003fee06 	br	1006790 <memcpy+0x100>

010067d8 <memmove>:
 10067d8:	2005883a 	mov	r2,r4
 10067dc:	29000b2e 	bgeu	r5,r4,100680c <memmove+0x34>
 10067e0:	298f883a 	add	r7,r5,r6
 10067e4:	21c0092e 	bgeu	r4,r7,100680c <memmove+0x34>
 10067e8:	2187883a 	add	r3,r4,r6
 10067ec:	198bc83a 	sub	r5,r3,r6
 10067f0:	30004826 	beq	r6,zero,1006914 <memmove+0x13c>
 10067f4:	39ffffc4 	addi	r7,r7,-1
 10067f8:	39000003 	ldbu	r4,0(r7)
 10067fc:	18ffffc4 	addi	r3,r3,-1
 1006800:	19000005 	stb	r4,0(r3)
 1006804:	28fffb1e 	bne	r5,r3,10067f4 <memmove+0x1c>
 1006808:	f800283a 	ret
 100680c:	00c003c4 	movi	r3,15
 1006810:	1980412e 	bgeu	r3,r6,1006918 <memmove+0x140>
 1006814:	2886b03a 	or	r3,r5,r2
 1006818:	18c000cc 	andi	r3,r3,3
 100681c:	1800401e 	bne	r3,zero,1006920 <memmove+0x148>
 1006820:	33fffc04 	addi	r15,r6,-16
 1006824:	781ed13a 	srli	r15,r15,4
 1006828:	28c00104 	addi	r3,r5,4
 100682c:	13400104 	addi	r13,r2,4
 1006830:	781c913a 	slli	r14,r15,4
 1006834:	2b000204 	addi	r12,r5,8
 1006838:	12c00204 	addi	r11,r2,8
 100683c:	73800504 	addi	r14,r14,20
 1006840:	2a800304 	addi	r10,r5,12
 1006844:	12400304 	addi	r9,r2,12
 1006848:	2b9d883a 	add	r14,r5,r14
 100684c:	2811883a 	mov	r8,r5
 1006850:	100f883a 	mov	r7,r2
 1006854:	41000017 	ldw	r4,0(r8)
 1006858:	39c00404 	addi	r7,r7,16
 100685c:	18c00404 	addi	r3,r3,16
 1006860:	393ffc15 	stw	r4,-16(r7)
 1006864:	193ffc17 	ldw	r4,-16(r3)
 1006868:	6b400404 	addi	r13,r13,16
 100686c:	5ac00404 	addi	r11,r11,16
 1006870:	693ffc15 	stw	r4,-16(r13)
 1006874:	61000017 	ldw	r4,0(r12)
 1006878:	4a400404 	addi	r9,r9,16
 100687c:	42000404 	addi	r8,r8,16
 1006880:	593ffc15 	stw	r4,-16(r11)
 1006884:	51000017 	ldw	r4,0(r10)
 1006888:	63000404 	addi	r12,r12,16
 100688c:	52800404 	addi	r10,r10,16
 1006890:	493ffc15 	stw	r4,-16(r9)
 1006894:	1bbfef1e 	bne	r3,r14,1006854 <memmove+0x7c>
 1006898:	79000044 	addi	r4,r15,1
 100689c:	2008913a 	slli	r4,r4,4
 10068a0:	328003cc 	andi	r10,r6,15
 10068a4:	02c000c4 	movi	r11,3
 10068a8:	1107883a 	add	r3,r2,r4
 10068ac:	290b883a 	add	r5,r5,r4
 10068b0:	5a801e2e 	bgeu	r11,r10,100692c <memmove+0x154>
 10068b4:	1813883a 	mov	r9,r3
 10068b8:	2811883a 	mov	r8,r5
 10068bc:	500f883a 	mov	r7,r10
 10068c0:	41000017 	ldw	r4,0(r8)
 10068c4:	4a400104 	addi	r9,r9,4
 10068c8:	39ffff04 	addi	r7,r7,-4
 10068cc:	493fff15 	stw	r4,-4(r9)
 10068d0:	42000104 	addi	r8,r8,4
 10068d4:	59fffa36 	bltu	r11,r7,10068c0 <memmove+0xe8>
 10068d8:	513fff04 	addi	r4,r10,-4
 10068dc:	2008d0ba 	srli	r4,r4,2
 10068e0:	318000cc 	andi	r6,r6,3
 10068e4:	21000044 	addi	r4,r4,1
 10068e8:	2109883a 	add	r4,r4,r4
 10068ec:	2109883a 	add	r4,r4,r4
 10068f0:	1907883a 	add	r3,r3,r4
 10068f4:	290b883a 	add	r5,r5,r4
 10068f8:	30000b26 	beq	r6,zero,1006928 <memmove+0x150>
 10068fc:	198d883a 	add	r6,r3,r6
 1006900:	29c00003 	ldbu	r7,0(r5)
 1006904:	18c00044 	addi	r3,r3,1
 1006908:	29400044 	addi	r5,r5,1
 100690c:	19ffffc5 	stb	r7,-1(r3)
 1006910:	19bffb1e 	bne	r3,r6,1006900 <memmove+0x128>
 1006914:	f800283a 	ret
 1006918:	1007883a 	mov	r3,r2
 100691c:	003ff606 	br	10068f8 <memmove+0x120>
 1006920:	1007883a 	mov	r3,r2
 1006924:	003ff506 	br	10068fc <memmove+0x124>
 1006928:	f800283a 	ret
 100692c:	500d883a 	mov	r6,r10
 1006930:	003ff106 	br	10068f8 <memmove+0x120>

01006934 <memset>:
 1006934:	20c000cc 	andi	r3,r4,3
 1006938:	2005883a 	mov	r2,r4
 100693c:	18004426 	beq	r3,zero,1006a50 <memset+0x11c>
 1006940:	31ffffc4 	addi	r7,r6,-1
 1006944:	30004026 	beq	r6,zero,1006a48 <memset+0x114>
 1006948:	2813883a 	mov	r9,r5
 100694c:	200d883a 	mov	r6,r4
 1006950:	2007883a 	mov	r3,r4
 1006954:	00000406 	br	1006968 <memset+0x34>
 1006958:	3a3fffc4 	addi	r8,r7,-1
 100695c:	31800044 	addi	r6,r6,1
 1006960:	38003926 	beq	r7,zero,1006a48 <memset+0x114>
 1006964:	400f883a 	mov	r7,r8
 1006968:	18c00044 	addi	r3,r3,1
 100696c:	32400005 	stb	r9,0(r6)
 1006970:	1a0000cc 	andi	r8,r3,3
 1006974:	403ff81e 	bne	r8,zero,1006958 <memset+0x24>
 1006978:	010000c4 	movi	r4,3
 100697c:	21c02d2e 	bgeu	r4,r7,1006a34 <memset+0x100>
 1006980:	29003fcc 	andi	r4,r5,255
 1006984:	200c923a 	slli	r6,r4,8
 1006988:	3108b03a 	or	r4,r6,r4
 100698c:	200c943a 	slli	r6,r4,16
 1006990:	218cb03a 	or	r6,r4,r6
 1006994:	010003c4 	movi	r4,15
 1006998:	21c0182e 	bgeu	r4,r7,10069fc <memset+0xc8>
 100699c:	3b3ffc04 	addi	r12,r7,-16
 10069a0:	6018d13a 	srli	r12,r12,4
 10069a4:	1a000104 	addi	r8,r3,4
 10069a8:	1ac00204 	addi	r11,r3,8
 10069ac:	6008913a 	slli	r4,r12,4
 10069b0:	1a800304 	addi	r10,r3,12
 10069b4:	1813883a 	mov	r9,r3
 10069b8:	21000504 	addi	r4,r4,20
 10069bc:	1909883a 	add	r4,r3,r4
 10069c0:	49800015 	stw	r6,0(r9)
 10069c4:	41800015 	stw	r6,0(r8)
 10069c8:	59800015 	stw	r6,0(r11)
 10069cc:	51800015 	stw	r6,0(r10)
 10069d0:	42000404 	addi	r8,r8,16
 10069d4:	4a400404 	addi	r9,r9,16
 10069d8:	5ac00404 	addi	r11,r11,16
 10069dc:	52800404 	addi	r10,r10,16
 10069e0:	413ff71e 	bne	r8,r4,10069c0 <memset+0x8c>
 10069e4:	63000044 	addi	r12,r12,1
 10069e8:	6018913a 	slli	r12,r12,4
 10069ec:	39c003cc 	andi	r7,r7,15
 10069f0:	010000c4 	movi	r4,3
 10069f4:	1b07883a 	add	r3,r3,r12
 10069f8:	21c00e2e 	bgeu	r4,r7,1006a34 <memset+0x100>
 10069fc:	1813883a 	mov	r9,r3
 1006a00:	3811883a 	mov	r8,r7
 1006a04:	010000c4 	movi	r4,3
 1006a08:	49800015 	stw	r6,0(r9)
 1006a0c:	423fff04 	addi	r8,r8,-4
 1006a10:	4a400104 	addi	r9,r9,4
 1006a14:	223ffc36 	bltu	r4,r8,1006a08 <memset+0xd4>
 1006a18:	393fff04 	addi	r4,r7,-4
 1006a1c:	2008d0ba 	srli	r4,r4,2
 1006a20:	39c000cc 	andi	r7,r7,3
 1006a24:	21000044 	addi	r4,r4,1
 1006a28:	2109883a 	add	r4,r4,r4
 1006a2c:	2109883a 	add	r4,r4,r4
 1006a30:	1907883a 	add	r3,r3,r4
 1006a34:	38000526 	beq	r7,zero,1006a4c <memset+0x118>
 1006a38:	19cf883a 	add	r7,r3,r7
 1006a3c:	19400005 	stb	r5,0(r3)
 1006a40:	18c00044 	addi	r3,r3,1
 1006a44:	38fffd1e 	bne	r7,r3,1006a3c <memset+0x108>
 1006a48:	f800283a 	ret
 1006a4c:	f800283a 	ret
 1006a50:	2007883a 	mov	r3,r4
 1006a54:	300f883a 	mov	r7,r6
 1006a58:	003fc706 	br	1006978 <memset+0x44>

01006a5c <_Balloc>:
 1006a5c:	20801317 	ldw	r2,76(r4)
 1006a60:	defffc04 	addi	sp,sp,-16
 1006a64:	dc400115 	stw	r17,4(sp)
 1006a68:	dc000015 	stw	r16,0(sp)
 1006a6c:	dfc00315 	stw	ra,12(sp)
 1006a70:	dc800215 	stw	r18,8(sp)
 1006a74:	2023883a 	mov	r17,r4
 1006a78:	2821883a 	mov	r16,r5
 1006a7c:	10000f26 	beq	r2,zero,1006abc <_Balloc+0x60>
 1006a80:	8407883a 	add	r3,r16,r16
 1006a84:	18c7883a 	add	r3,r3,r3
 1006a88:	10c7883a 	add	r3,r2,r3
 1006a8c:	18800017 	ldw	r2,0(r3)
 1006a90:	10001126 	beq	r2,zero,1006ad8 <_Balloc+0x7c>
 1006a94:	11000017 	ldw	r4,0(r2)
 1006a98:	19000015 	stw	r4,0(r3)
 1006a9c:	10000415 	stw	zero,16(r2)
 1006aa0:	10000315 	stw	zero,12(r2)
 1006aa4:	dfc00317 	ldw	ra,12(sp)
 1006aa8:	dc800217 	ldw	r18,8(sp)
 1006aac:	dc400117 	ldw	r17,4(sp)
 1006ab0:	dc000017 	ldw	r16,0(sp)
 1006ab4:	dec00404 	addi	sp,sp,16
 1006ab8:	f800283a 	ret
 1006abc:	01800844 	movi	r6,33
 1006ac0:	01400104 	movi	r5,4
 1006ac4:	10099980 	call	1009998 <_calloc_r>
 1006ac8:	88801315 	stw	r2,76(r17)
 1006acc:	103fec1e 	bne	r2,zero,1006a80 <_Balloc+0x24>
 1006ad0:	0005883a 	mov	r2,zero
 1006ad4:	003ff306 	br	1006aa4 <_Balloc+0x48>
 1006ad8:	01400044 	movi	r5,1
 1006adc:	2c24983a 	sll	r18,r5,r16
 1006ae0:	8809883a 	mov	r4,r17
 1006ae4:	91800144 	addi	r6,r18,5
 1006ae8:	318d883a 	add	r6,r6,r6
 1006aec:	318d883a 	add	r6,r6,r6
 1006af0:	10099980 	call	1009998 <_calloc_r>
 1006af4:	103ff626 	beq	r2,zero,1006ad0 <_Balloc+0x74>
 1006af8:	14000115 	stw	r16,4(r2)
 1006afc:	14800215 	stw	r18,8(r2)
 1006b00:	003fe606 	br	1006a9c <_Balloc+0x40>

01006b04 <_Bfree>:
 1006b04:	28000826 	beq	r5,zero,1006b28 <_Bfree+0x24>
 1006b08:	28c00117 	ldw	r3,4(r5)
 1006b0c:	20801317 	ldw	r2,76(r4)
 1006b10:	18c7883a 	add	r3,r3,r3
 1006b14:	18c7883a 	add	r3,r3,r3
 1006b18:	10c5883a 	add	r2,r2,r3
 1006b1c:	10c00017 	ldw	r3,0(r2)
 1006b20:	28c00015 	stw	r3,0(r5)
 1006b24:	11400015 	stw	r5,0(r2)
 1006b28:	f800283a 	ret

01006b2c <__multadd>:
 1006b2c:	defffa04 	addi	sp,sp,-24
 1006b30:	dc800315 	stw	r18,12(sp)
 1006b34:	dc400215 	stw	r17,8(sp)
 1006b38:	dc000115 	stw	r16,4(sp)
 1006b3c:	2823883a 	mov	r17,r5
 1006b40:	2c000417 	ldw	r16,16(r5)
 1006b44:	dfc00515 	stw	ra,20(sp)
 1006b48:	dcc00415 	stw	r19,16(sp)
 1006b4c:	2025883a 	mov	r18,r4
 1006b50:	29400504 	addi	r5,r5,20
 1006b54:	0011883a 	mov	r8,zero
 1006b58:	28c00017 	ldw	r3,0(r5)
 1006b5c:	29400104 	addi	r5,r5,4
 1006b60:	42000044 	addi	r8,r8,1
 1006b64:	18bfffcc 	andi	r2,r3,65535
 1006b68:	1185383a 	mul	r2,r2,r6
 1006b6c:	1806d43a 	srli	r3,r3,16
 1006b70:	11cf883a 	add	r7,r2,r7
 1006b74:	3808d43a 	srli	r4,r7,16
 1006b78:	1987383a 	mul	r3,r3,r6
 1006b7c:	38bfffcc 	andi	r2,r7,65535
 1006b80:	1907883a 	add	r3,r3,r4
 1006b84:	1808943a 	slli	r4,r3,16
 1006b88:	180ed43a 	srli	r7,r3,16
 1006b8c:	2085883a 	add	r2,r4,r2
 1006b90:	28bfff15 	stw	r2,-4(r5)
 1006b94:	443ff016 	blt	r8,r16,1006b58 <__multadd+0x2c>
 1006b98:	38000926 	beq	r7,zero,1006bc0 <__multadd+0x94>
 1006b9c:	88800217 	ldw	r2,8(r17)
 1006ba0:	80800f0e 	bge	r16,r2,1006be0 <__multadd+0xb4>
 1006ba4:	80800144 	addi	r2,r16,5
 1006ba8:	1085883a 	add	r2,r2,r2
 1006bac:	1085883a 	add	r2,r2,r2
 1006bb0:	8885883a 	add	r2,r17,r2
 1006bb4:	11c00015 	stw	r7,0(r2)
 1006bb8:	84000044 	addi	r16,r16,1
 1006bbc:	8c000415 	stw	r16,16(r17)
 1006bc0:	8805883a 	mov	r2,r17
 1006bc4:	dfc00517 	ldw	ra,20(sp)
 1006bc8:	dcc00417 	ldw	r19,16(sp)
 1006bcc:	dc800317 	ldw	r18,12(sp)
 1006bd0:	dc400217 	ldw	r17,8(sp)
 1006bd4:	dc000117 	ldw	r16,4(sp)
 1006bd8:	dec00604 	addi	sp,sp,24
 1006bdc:	f800283a 	ret
 1006be0:	89400117 	ldw	r5,4(r17)
 1006be4:	9009883a 	mov	r4,r18
 1006be8:	d9c00015 	stw	r7,0(sp)
 1006bec:	29400044 	addi	r5,r5,1
 1006bf0:	1006a5c0 	call	1006a5c <_Balloc>
 1006bf4:	89800417 	ldw	r6,16(r17)
 1006bf8:	89400304 	addi	r5,r17,12
 1006bfc:	11000304 	addi	r4,r2,12
 1006c00:	31800084 	addi	r6,r6,2
 1006c04:	318d883a 	add	r6,r6,r6
 1006c08:	318d883a 	add	r6,r6,r6
 1006c0c:	1027883a 	mov	r19,r2
 1006c10:	10066900 	call	1006690 <memcpy>
 1006c14:	d9c00017 	ldw	r7,0(sp)
 1006c18:	88000a26 	beq	r17,zero,1006c44 <__multadd+0x118>
 1006c1c:	88c00117 	ldw	r3,4(r17)
 1006c20:	90801317 	ldw	r2,76(r18)
 1006c24:	18c7883a 	add	r3,r3,r3
 1006c28:	18c7883a 	add	r3,r3,r3
 1006c2c:	10c5883a 	add	r2,r2,r3
 1006c30:	10c00017 	ldw	r3,0(r2)
 1006c34:	88c00015 	stw	r3,0(r17)
 1006c38:	14400015 	stw	r17,0(r2)
 1006c3c:	9823883a 	mov	r17,r19
 1006c40:	003fd806 	br	1006ba4 <__multadd+0x78>
 1006c44:	9823883a 	mov	r17,r19
 1006c48:	003fd606 	br	1006ba4 <__multadd+0x78>

01006c4c <__s2b>:
 1006c4c:	defff904 	addi	sp,sp,-28
 1006c50:	dc400115 	stw	r17,4(sp)
 1006c54:	dc000015 	stw	r16,0(sp)
 1006c58:	2023883a 	mov	r17,r4
 1006c5c:	2821883a 	mov	r16,r5
 1006c60:	39000204 	addi	r4,r7,8
 1006c64:	01400244 	movi	r5,9
 1006c68:	dcc00315 	stw	r19,12(sp)
 1006c6c:	dc800215 	stw	r18,8(sp)
 1006c70:	dfc00615 	stw	ra,24(sp)
 1006c74:	dd400515 	stw	r21,20(sp)
 1006c78:	dd000415 	stw	r20,16(sp)
 1006c7c:	3825883a 	mov	r18,r7
 1006c80:	3027883a 	mov	r19,r6
 1006c84:	100acc80 	call	100acc8 <__divsi3>
 1006c88:	00c00044 	movi	r3,1
 1006c8c:	000b883a 	mov	r5,zero
 1006c90:	1880030e 	bge	r3,r2,1006ca0 <__s2b+0x54>
 1006c94:	18c7883a 	add	r3,r3,r3
 1006c98:	29400044 	addi	r5,r5,1
 1006c9c:	18bffd16 	blt	r3,r2,1006c94 <__s2b+0x48>
 1006ca0:	8809883a 	mov	r4,r17
 1006ca4:	1006a5c0 	call	1006a5c <_Balloc>
 1006ca8:	d8c00717 	ldw	r3,28(sp)
 1006cac:	10c00515 	stw	r3,20(r2)
 1006cb0:	00c00044 	movi	r3,1
 1006cb4:	10c00415 	stw	r3,16(r2)
 1006cb8:	00c00244 	movi	r3,9
 1006cbc:	1cc0210e 	bge	r3,r19,1006d44 <__s2b+0xf8>
 1006cc0:	80eb883a 	add	r21,r16,r3
 1006cc4:	a829883a 	mov	r20,r21
 1006cc8:	84e1883a 	add	r16,r16,r19
 1006ccc:	a1c00007 	ldb	r7,0(r20)
 1006cd0:	01800284 	movi	r6,10
 1006cd4:	a5000044 	addi	r20,r20,1
 1006cd8:	100b883a 	mov	r5,r2
 1006cdc:	39fff404 	addi	r7,r7,-48
 1006ce0:	8809883a 	mov	r4,r17
 1006ce4:	1006b2c0 	call	1006b2c <__multadd>
 1006ce8:	a43ff81e 	bne	r20,r16,1006ccc <__s2b+0x80>
 1006cec:	ace1883a 	add	r16,r21,r19
 1006cf0:	843ffe04 	addi	r16,r16,-8
 1006cf4:	9c800a0e 	bge	r19,r18,1006d20 <__s2b+0xd4>
 1006cf8:	94e5c83a 	sub	r18,r18,r19
 1006cfc:	84a5883a 	add	r18,r16,r18
 1006d00:	81c00007 	ldb	r7,0(r16)
 1006d04:	01800284 	movi	r6,10
 1006d08:	84000044 	addi	r16,r16,1
 1006d0c:	100b883a 	mov	r5,r2
 1006d10:	39fff404 	addi	r7,r7,-48
 1006d14:	8809883a 	mov	r4,r17
 1006d18:	1006b2c0 	call	1006b2c <__multadd>
 1006d1c:	84bff81e 	bne	r16,r18,1006d00 <__s2b+0xb4>
 1006d20:	dfc00617 	ldw	ra,24(sp)
 1006d24:	dd400517 	ldw	r21,20(sp)
 1006d28:	dd000417 	ldw	r20,16(sp)
 1006d2c:	dcc00317 	ldw	r19,12(sp)
 1006d30:	dc800217 	ldw	r18,8(sp)
 1006d34:	dc400117 	ldw	r17,4(sp)
 1006d38:	dc000017 	ldw	r16,0(sp)
 1006d3c:	dec00704 	addi	sp,sp,28
 1006d40:	f800283a 	ret
 1006d44:	84000284 	addi	r16,r16,10
 1006d48:	1827883a 	mov	r19,r3
 1006d4c:	003fe906 	br	1006cf4 <__s2b+0xa8>

01006d50 <__hi0bits>:
 1006d50:	20bfffec 	andhi	r2,r4,65535
 1006d54:	1000141e 	bne	r2,zero,1006da8 <__hi0bits+0x58>
 1006d58:	2008943a 	slli	r4,r4,16
 1006d5c:	00800404 	movi	r2,16
 1006d60:	20ffc02c 	andhi	r3,r4,65280
 1006d64:	1800021e 	bne	r3,zero,1006d70 <__hi0bits+0x20>
 1006d68:	2008923a 	slli	r4,r4,8
 1006d6c:	10800204 	addi	r2,r2,8
 1006d70:	20fc002c 	andhi	r3,r4,61440
 1006d74:	1800021e 	bne	r3,zero,1006d80 <__hi0bits+0x30>
 1006d78:	2008913a 	slli	r4,r4,4
 1006d7c:	10800104 	addi	r2,r2,4
 1006d80:	20f0002c 	andhi	r3,r4,49152
 1006d84:	1800031e 	bne	r3,zero,1006d94 <__hi0bits+0x44>
 1006d88:	2109883a 	add	r4,r4,r4
 1006d8c:	10800084 	addi	r2,r2,2
 1006d90:	2109883a 	add	r4,r4,r4
 1006d94:	20000316 	blt	r4,zero,1006da4 <__hi0bits+0x54>
 1006d98:	2110002c 	andhi	r4,r4,16384
 1006d9c:	2000041e 	bne	r4,zero,1006db0 <__hi0bits+0x60>
 1006da0:	00800804 	movi	r2,32
 1006da4:	f800283a 	ret
 1006da8:	0005883a 	mov	r2,zero
 1006dac:	003fec06 	br	1006d60 <__hi0bits+0x10>
 1006db0:	10800044 	addi	r2,r2,1
 1006db4:	f800283a 	ret

01006db8 <__lo0bits>:
 1006db8:	20c00017 	ldw	r3,0(r4)
 1006dbc:	188001cc 	andi	r2,r3,7
 1006dc0:	10000826 	beq	r2,zero,1006de4 <__lo0bits+0x2c>
 1006dc4:	1880004c 	andi	r2,r3,1
 1006dc8:	1000211e 	bne	r2,zero,1006e50 <__lo0bits+0x98>
 1006dcc:	1880008c 	andi	r2,r3,2
 1006dd0:	1000211e 	bne	r2,zero,1006e58 <__lo0bits+0xa0>
 1006dd4:	1806d0ba 	srli	r3,r3,2
 1006dd8:	00800084 	movi	r2,2
 1006ddc:	20c00015 	stw	r3,0(r4)
 1006de0:	f800283a 	ret
 1006de4:	18bfffcc 	andi	r2,r3,65535
 1006de8:	10001326 	beq	r2,zero,1006e38 <__lo0bits+0x80>
 1006dec:	0005883a 	mov	r2,zero
 1006df0:	19403fcc 	andi	r5,r3,255
 1006df4:	2800021e 	bne	r5,zero,1006e00 <__lo0bits+0x48>
 1006df8:	1806d23a 	srli	r3,r3,8
 1006dfc:	10800204 	addi	r2,r2,8
 1006e00:	194003cc 	andi	r5,r3,15
 1006e04:	2800021e 	bne	r5,zero,1006e10 <__lo0bits+0x58>
 1006e08:	1806d13a 	srli	r3,r3,4
 1006e0c:	10800104 	addi	r2,r2,4
 1006e10:	194000cc 	andi	r5,r3,3
 1006e14:	2800021e 	bne	r5,zero,1006e20 <__lo0bits+0x68>
 1006e18:	1806d0ba 	srli	r3,r3,2
 1006e1c:	10800084 	addi	r2,r2,2
 1006e20:	1940004c 	andi	r5,r3,1
 1006e24:	2800081e 	bne	r5,zero,1006e48 <__lo0bits+0x90>
 1006e28:	1806d07a 	srli	r3,r3,1
 1006e2c:	1800051e 	bne	r3,zero,1006e44 <__lo0bits+0x8c>
 1006e30:	00800804 	movi	r2,32
 1006e34:	f800283a 	ret
 1006e38:	1806d43a 	srli	r3,r3,16
 1006e3c:	00800404 	movi	r2,16
 1006e40:	003feb06 	br	1006df0 <__lo0bits+0x38>
 1006e44:	10800044 	addi	r2,r2,1
 1006e48:	20c00015 	stw	r3,0(r4)
 1006e4c:	f800283a 	ret
 1006e50:	0005883a 	mov	r2,zero
 1006e54:	f800283a 	ret
 1006e58:	1806d07a 	srli	r3,r3,1
 1006e5c:	00800044 	movi	r2,1
 1006e60:	20c00015 	stw	r3,0(r4)
 1006e64:	f800283a 	ret

01006e68 <__i2b>:
 1006e68:	defffd04 	addi	sp,sp,-12
 1006e6c:	dc000015 	stw	r16,0(sp)
 1006e70:	04000044 	movi	r16,1
 1006e74:	dc400115 	stw	r17,4(sp)
 1006e78:	2823883a 	mov	r17,r5
 1006e7c:	800b883a 	mov	r5,r16
 1006e80:	dfc00215 	stw	ra,8(sp)
 1006e84:	1006a5c0 	call	1006a5c <_Balloc>
 1006e88:	14400515 	stw	r17,20(r2)
 1006e8c:	14000415 	stw	r16,16(r2)
 1006e90:	dfc00217 	ldw	ra,8(sp)
 1006e94:	dc400117 	ldw	r17,4(sp)
 1006e98:	dc000017 	ldw	r16,0(sp)
 1006e9c:	dec00304 	addi	sp,sp,12
 1006ea0:	f800283a 	ret

01006ea4 <__multiply>:
 1006ea4:	defffa04 	addi	sp,sp,-24
 1006ea8:	dcc00315 	stw	r19,12(sp)
 1006eac:	dc800215 	stw	r18,8(sp)
 1006eb0:	34c00417 	ldw	r19,16(r6)
 1006eb4:	2c800417 	ldw	r18,16(r5)
 1006eb8:	dd000415 	stw	r20,16(sp)
 1006ebc:	dc400115 	stw	r17,4(sp)
 1006ec0:	dfc00515 	stw	ra,20(sp)
 1006ec4:	dc000015 	stw	r16,0(sp)
 1006ec8:	2829883a 	mov	r20,r5
 1006ecc:	3023883a 	mov	r17,r6
 1006ed0:	94c0050e 	bge	r18,r19,1006ee8 <__multiply+0x44>
 1006ed4:	9007883a 	mov	r3,r18
 1006ed8:	3029883a 	mov	r20,r6
 1006edc:	9825883a 	mov	r18,r19
 1006ee0:	2823883a 	mov	r17,r5
 1006ee4:	1827883a 	mov	r19,r3
 1006ee8:	a0800217 	ldw	r2,8(r20)
 1006eec:	94e1883a 	add	r16,r18,r19
 1006ef0:	a1400117 	ldw	r5,4(r20)
 1006ef4:	1400010e 	bge	r2,r16,1006efc <__multiply+0x58>
 1006ef8:	29400044 	addi	r5,r5,1
 1006efc:	1006a5c0 	call	1006a5c <_Balloc>
 1006f00:	8415883a 	add	r10,r16,r16
 1006f04:	12c00504 	addi	r11,r2,20
 1006f08:	5295883a 	add	r10,r10,r10
 1006f0c:	5a95883a 	add	r10,r11,r10
 1006f10:	5807883a 	mov	r3,r11
 1006f14:	5a80032e 	bgeu	r11,r10,1006f24 <__multiply+0x80>
 1006f18:	18000015 	stw	zero,0(r3)
 1006f1c:	18c00104 	addi	r3,r3,4
 1006f20:	1abffd36 	bltu	r3,r10,1006f18 <__multiply+0x74>
 1006f24:	9ce7883a 	add	r19,r19,r19
 1006f28:	94a5883a 	add	r18,r18,r18
 1006f2c:	89800504 	addi	r6,r17,20
 1006f30:	9ce7883a 	add	r19,r19,r19
 1006f34:	a3400504 	addi	r13,r20,20
 1006f38:	94a5883a 	add	r18,r18,r18
 1006f3c:	34d9883a 	add	r12,r6,r19
 1006f40:	6c93883a 	add	r9,r13,r18
 1006f44:	3300422e 	bgeu	r6,r12,1007050 <__multiply+0x1ac>
 1006f48:	37c00017 	ldw	ra,0(r6)
 1006f4c:	fbffffcc 	andi	r15,ra,65535
 1006f50:	78001b26 	beq	r15,zero,1006fc0 <__multiply+0x11c>
 1006f54:	5811883a 	mov	r8,r11
 1006f58:	681d883a 	mov	r14,r13
 1006f5c:	000f883a 	mov	r7,zero
 1006f60:	71000017 	ldw	r4,0(r14)
 1006f64:	40c00017 	ldw	r3,0(r8)
 1006f68:	73800104 	addi	r14,r14,4
 1006f6c:	217fffcc 	andi	r5,r4,65535
 1006f70:	2bcb383a 	mul	r5,r5,r15
 1006f74:	2008d43a 	srli	r4,r4,16
 1006f78:	1c7fffcc 	andi	r17,r3,65535
 1006f7c:	2c4b883a 	add	r5,r5,r17
 1006f80:	29cb883a 	add	r5,r5,r7
 1006f84:	23c9383a 	mul	r4,r4,r15
 1006f88:	1806d43a 	srli	r3,r3,16
 1006f8c:	280ed43a 	srli	r7,r5,16
 1006f90:	297fffcc 	andi	r5,r5,65535
 1006f94:	20c7883a 	add	r3,r4,r3
 1006f98:	19c7883a 	add	r3,r3,r7
 1006f9c:	1808943a 	slli	r4,r3,16
 1006fa0:	4023883a 	mov	r17,r8
 1006fa4:	180ed43a 	srli	r7,r3,16
 1006fa8:	214ab03a 	or	r5,r4,r5
 1006fac:	41400015 	stw	r5,0(r8)
 1006fb0:	42000104 	addi	r8,r8,4
 1006fb4:	727fea36 	bltu	r14,r9,1006f60 <__multiply+0xbc>
 1006fb8:	89c00115 	stw	r7,4(r17)
 1006fbc:	37c00017 	ldw	ra,0(r6)
 1006fc0:	f83ed43a 	srli	ra,ra,16
 1006fc4:	f8001f26 	beq	ra,zero,1007044 <__multiply+0x1a0>
 1006fc8:	58c00017 	ldw	r3,0(r11)
 1006fcc:	681d883a 	mov	r14,r13
 1006fd0:	581f883a 	mov	r15,r11
 1006fd4:	1811883a 	mov	r8,r3
 1006fd8:	5825883a 	mov	r18,r11
 1006fdc:	000f883a 	mov	r7,zero
 1006fe0:	00000106 	br	1006fe8 <__multiply+0x144>
 1006fe4:	8825883a 	mov	r18,r17
 1006fe8:	7140000b 	ldhu	r5,0(r14)
 1006fec:	4010d43a 	srli	r8,r8,16
 1006ff0:	193fffcc 	andi	r4,r3,65535
 1006ff4:	2fcb383a 	mul	r5,r5,ra
 1006ff8:	7bc00104 	addi	r15,r15,4
 1006ffc:	73800104 	addi	r14,r14,4
 1007000:	2a0b883a 	add	r5,r5,r8
 1007004:	29cb883a 	add	r5,r5,r7
 1007008:	2806943a 	slli	r3,r5,16
 100700c:	94400104 	addi	r17,r18,4
 1007010:	280ad43a 	srli	r5,r5,16
 1007014:	1908b03a 	or	r4,r3,r4
 1007018:	793fff15 	stw	r4,-4(r15)
 100701c:	70ffff17 	ldw	r3,-4(r14)
 1007020:	8a000017 	ldw	r8,0(r17)
 1007024:	1806d43a 	srli	r3,r3,16
 1007028:	413fffcc 	andi	r4,r8,65535
 100702c:	1fc7383a 	mul	r3,r3,ra
 1007030:	1907883a 	add	r3,r3,r4
 1007034:	1947883a 	add	r3,r3,r5
 1007038:	180ed43a 	srli	r7,r3,16
 100703c:	727fe936 	bltu	r14,r9,1006fe4 <__multiply+0x140>
 1007040:	90c00115 	stw	r3,4(r18)
 1007044:	31800104 	addi	r6,r6,4
 1007048:	5ac00104 	addi	r11,r11,4
 100704c:	333fbe36 	bltu	r6,r12,1006f48 <__multiply+0xa4>
 1007050:	0400090e 	bge	zero,r16,1007078 <__multiply+0x1d4>
 1007054:	50ffff17 	ldw	r3,-4(r10)
 1007058:	52bfff04 	addi	r10,r10,-4
 100705c:	18000326 	beq	r3,zero,100706c <__multiply+0x1c8>
 1007060:	00000506 	br	1007078 <__multiply+0x1d4>
 1007064:	50c00017 	ldw	r3,0(r10)
 1007068:	1800031e 	bne	r3,zero,1007078 <__multiply+0x1d4>
 100706c:	843fffc4 	addi	r16,r16,-1
 1007070:	52bfff04 	addi	r10,r10,-4
 1007074:	803ffb1e 	bne	r16,zero,1007064 <__multiply+0x1c0>
 1007078:	14000415 	stw	r16,16(r2)
 100707c:	dfc00517 	ldw	ra,20(sp)
 1007080:	dd000417 	ldw	r20,16(sp)
 1007084:	dcc00317 	ldw	r19,12(sp)
 1007088:	dc800217 	ldw	r18,8(sp)
 100708c:	dc400117 	ldw	r17,4(sp)
 1007090:	dc000017 	ldw	r16,0(sp)
 1007094:	dec00604 	addi	sp,sp,24
 1007098:	f800283a 	ret

0100709c <__pow5mult>:
 100709c:	defffa04 	addi	sp,sp,-24
 10070a0:	dcc00315 	stw	r19,12(sp)
 10070a4:	dc000015 	stw	r16,0(sp)
 10070a8:	dfc00515 	stw	ra,20(sp)
 10070ac:	dd000415 	stw	r20,16(sp)
 10070b0:	dc800215 	stw	r18,8(sp)
 10070b4:	dc400115 	stw	r17,4(sp)
 10070b8:	308000cc 	andi	r2,r6,3
 10070bc:	3021883a 	mov	r16,r6
 10070c0:	2027883a 	mov	r19,r4
 10070c4:	10002f1e 	bne	r2,zero,1007184 <__pow5mult+0xe8>
 10070c8:	2825883a 	mov	r18,r5
 10070cc:	8021d0ba 	srai	r16,r16,2
 10070d0:	80001a26 	beq	r16,zero,100713c <__pow5mult+0xa0>
 10070d4:	9c401217 	ldw	r17,72(r19)
 10070d8:	8800061e 	bne	r17,zero,10070f4 <__pow5mult+0x58>
 10070dc:	00003406 	br	10071b0 <__pow5mult+0x114>
 10070e0:	8021d07a 	srai	r16,r16,1
 10070e4:	80001526 	beq	r16,zero,100713c <__pow5mult+0xa0>
 10070e8:	88800017 	ldw	r2,0(r17)
 10070ec:	10001c26 	beq	r2,zero,1007160 <__pow5mult+0xc4>
 10070f0:	1023883a 	mov	r17,r2
 10070f4:	8080004c 	andi	r2,r16,1
 10070f8:	103ff926 	beq	r2,zero,10070e0 <__pow5mult+0x44>
 10070fc:	880d883a 	mov	r6,r17
 1007100:	900b883a 	mov	r5,r18
 1007104:	9809883a 	mov	r4,r19
 1007108:	1006ea40 	call	1006ea4 <__multiply>
 100710c:	90001b26 	beq	r18,zero,100717c <__pow5mult+0xe0>
 1007110:	91000117 	ldw	r4,4(r18)
 1007114:	98c01317 	ldw	r3,76(r19)
 1007118:	8021d07a 	srai	r16,r16,1
 100711c:	2109883a 	add	r4,r4,r4
 1007120:	2109883a 	add	r4,r4,r4
 1007124:	1907883a 	add	r3,r3,r4
 1007128:	19000017 	ldw	r4,0(r3)
 100712c:	91000015 	stw	r4,0(r18)
 1007130:	1c800015 	stw	r18,0(r3)
 1007134:	1025883a 	mov	r18,r2
 1007138:	803feb1e 	bne	r16,zero,10070e8 <__pow5mult+0x4c>
 100713c:	9005883a 	mov	r2,r18
 1007140:	dfc00517 	ldw	ra,20(sp)
 1007144:	dd000417 	ldw	r20,16(sp)
 1007148:	dcc00317 	ldw	r19,12(sp)
 100714c:	dc800217 	ldw	r18,8(sp)
 1007150:	dc400117 	ldw	r17,4(sp)
 1007154:	dc000017 	ldw	r16,0(sp)
 1007158:	dec00604 	addi	sp,sp,24
 100715c:	f800283a 	ret
 1007160:	880d883a 	mov	r6,r17
 1007164:	880b883a 	mov	r5,r17
 1007168:	9809883a 	mov	r4,r19
 100716c:	1006ea40 	call	1006ea4 <__multiply>
 1007170:	88800015 	stw	r2,0(r17)
 1007174:	10000015 	stw	zero,0(r2)
 1007178:	003fdd06 	br	10070f0 <__pow5mult+0x54>
 100717c:	1025883a 	mov	r18,r2
 1007180:	003fd706 	br	10070e0 <__pow5mult+0x44>
 1007184:	10bfffc4 	addi	r2,r2,-1
 1007188:	1085883a 	add	r2,r2,r2
 100718c:	00c04074 	movhi	r3,257
 1007190:	18ff7604 	addi	r3,r3,-552
 1007194:	1085883a 	add	r2,r2,r2
 1007198:	1885883a 	add	r2,r3,r2
 100719c:	11800017 	ldw	r6,0(r2)
 10071a0:	000f883a 	mov	r7,zero
 10071a4:	1006b2c0 	call	1006b2c <__multadd>
 10071a8:	1025883a 	mov	r18,r2
 10071ac:	003fc706 	br	10070cc <__pow5mult+0x30>
 10071b0:	05000044 	movi	r20,1
 10071b4:	a00b883a 	mov	r5,r20
 10071b8:	9809883a 	mov	r4,r19
 10071bc:	1006a5c0 	call	1006a5c <_Balloc>
 10071c0:	1023883a 	mov	r17,r2
 10071c4:	00809c44 	movi	r2,625
 10071c8:	88800515 	stw	r2,20(r17)
 10071cc:	8d000415 	stw	r20,16(r17)
 10071d0:	9c401215 	stw	r17,72(r19)
 10071d4:	88000015 	stw	zero,0(r17)
 10071d8:	003fc606 	br	10070f4 <__pow5mult+0x58>

010071dc <__lshift>:
 10071dc:	defff904 	addi	sp,sp,-28
 10071e0:	dd400515 	stw	r21,20(sp)
 10071e4:	dcc00315 	stw	r19,12(sp)
 10071e8:	302bd17a 	srai	r21,r6,5
 10071ec:	2cc00417 	ldw	r19,16(r5)
 10071f0:	28800217 	ldw	r2,8(r5)
 10071f4:	dd000415 	stw	r20,16(sp)
 10071f8:	ace7883a 	add	r19,r21,r19
 10071fc:	dc800215 	stw	r18,8(sp)
 1007200:	dc400115 	stw	r17,4(sp)
 1007204:	dc000015 	stw	r16,0(sp)
 1007208:	dfc00615 	stw	ra,24(sp)
 100720c:	9c000044 	addi	r16,r19,1
 1007210:	2823883a 	mov	r17,r5
 1007214:	3029883a 	mov	r20,r6
 1007218:	2025883a 	mov	r18,r4
 100721c:	29400117 	ldw	r5,4(r5)
 1007220:	1400030e 	bge	r2,r16,1007230 <__lshift+0x54>
 1007224:	1085883a 	add	r2,r2,r2
 1007228:	29400044 	addi	r5,r5,1
 100722c:	143ffd16 	blt	r2,r16,1007224 <__lshift+0x48>
 1007230:	9009883a 	mov	r4,r18
 1007234:	1006a5c0 	call	1006a5c <_Balloc>
 1007238:	10c00504 	addi	r3,r2,20
 100723c:	0540070e 	bge	zero,r21,100725c <__lshift+0x80>
 1007240:	ad6b883a 	add	r21,r21,r21
 1007244:	ad6b883a 	add	r21,r21,r21
 1007248:	1809883a 	mov	r4,r3
 100724c:	1d47883a 	add	r3,r3,r21
 1007250:	20000015 	stw	zero,0(r4)
 1007254:	21000104 	addi	r4,r4,4
 1007258:	193ffd1e 	bne	r3,r4,1007250 <__lshift+0x74>
 100725c:	8a000417 	ldw	r8,16(r17)
 1007260:	89000504 	addi	r4,r17,20
 1007264:	a18007cc 	andi	r6,r20,31
 1007268:	4211883a 	add	r8,r8,r8
 100726c:	4211883a 	add	r8,r8,r8
 1007270:	2211883a 	add	r8,r4,r8
 1007274:	30002326 	beq	r6,zero,1007304 <__lshift+0x128>
 1007278:	02400804 	movi	r9,32
 100727c:	4993c83a 	sub	r9,r9,r6
 1007280:	000b883a 	mov	r5,zero
 1007284:	21c00017 	ldw	r7,0(r4)
 1007288:	1815883a 	mov	r10,r3
 100728c:	18c00104 	addi	r3,r3,4
 1007290:	398e983a 	sll	r7,r7,r6
 1007294:	21000104 	addi	r4,r4,4
 1007298:	394ab03a 	or	r5,r7,r5
 100729c:	197fff15 	stw	r5,-4(r3)
 10072a0:	217fff17 	ldw	r5,-4(r4)
 10072a4:	2a4ad83a 	srl	r5,r5,r9
 10072a8:	223ff636 	bltu	r4,r8,1007284 <__lshift+0xa8>
 10072ac:	51400115 	stw	r5,4(r10)
 10072b0:	28001a1e 	bne	r5,zero,100731c <__lshift+0x140>
 10072b4:	843fffc4 	addi	r16,r16,-1
 10072b8:	14000415 	stw	r16,16(r2)
 10072bc:	88000826 	beq	r17,zero,10072e0 <__lshift+0x104>
 10072c0:	89000117 	ldw	r4,4(r17)
 10072c4:	90c01317 	ldw	r3,76(r18)
 10072c8:	2109883a 	add	r4,r4,r4
 10072cc:	2109883a 	add	r4,r4,r4
 10072d0:	1907883a 	add	r3,r3,r4
 10072d4:	19000017 	ldw	r4,0(r3)
 10072d8:	89000015 	stw	r4,0(r17)
 10072dc:	1c400015 	stw	r17,0(r3)
 10072e0:	dfc00617 	ldw	ra,24(sp)
 10072e4:	dd400517 	ldw	r21,20(sp)
 10072e8:	dd000417 	ldw	r20,16(sp)
 10072ec:	dcc00317 	ldw	r19,12(sp)
 10072f0:	dc800217 	ldw	r18,8(sp)
 10072f4:	dc400117 	ldw	r17,4(sp)
 10072f8:	dc000017 	ldw	r16,0(sp)
 10072fc:	dec00704 	addi	sp,sp,28
 1007300:	f800283a 	ret
 1007304:	21400017 	ldw	r5,0(r4)
 1007308:	18c00104 	addi	r3,r3,4
 100730c:	21000104 	addi	r4,r4,4
 1007310:	197fff15 	stw	r5,-4(r3)
 1007314:	223ffb36 	bltu	r4,r8,1007304 <__lshift+0x128>
 1007318:	003fe606 	br	10072b4 <__lshift+0xd8>
 100731c:	9c000084 	addi	r16,r19,2
 1007320:	003fe406 	br	10072b4 <__lshift+0xd8>

01007324 <__mcmp>:
 1007324:	20800417 	ldw	r2,16(r4)
 1007328:	28c00417 	ldw	r3,16(r5)
 100732c:	10c5c83a 	sub	r2,r2,r3
 1007330:	1000111e 	bne	r2,zero,1007378 <__mcmp+0x54>
 1007334:	18c7883a 	add	r3,r3,r3
 1007338:	18c7883a 	add	r3,r3,r3
 100733c:	21000504 	addi	r4,r4,20
 1007340:	29400504 	addi	r5,r5,20
 1007344:	20c5883a 	add	r2,r4,r3
 1007348:	28cb883a 	add	r5,r5,r3
 100734c:	00000106 	br	1007354 <__mcmp+0x30>
 1007350:	20800a2e 	bgeu	r4,r2,100737c <__mcmp+0x58>
 1007354:	10bfff04 	addi	r2,r2,-4
 1007358:	297fff04 	addi	r5,r5,-4
 100735c:	11800017 	ldw	r6,0(r2)
 1007360:	28c00017 	ldw	r3,0(r5)
 1007364:	30fffa26 	beq	r6,r3,1007350 <__mcmp+0x2c>
 1007368:	30c00236 	bltu	r6,r3,1007374 <__mcmp+0x50>
 100736c:	00800044 	movi	r2,1
 1007370:	f800283a 	ret
 1007374:	00bfffc4 	movi	r2,-1
 1007378:	f800283a 	ret
 100737c:	0005883a 	mov	r2,zero
 1007380:	f800283a 	ret

01007384 <__mdiff>:
 1007384:	28c00417 	ldw	r3,16(r5)
 1007388:	30800417 	ldw	r2,16(r6)
 100738c:	defffa04 	addi	sp,sp,-24
 1007390:	dcc00315 	stw	r19,12(sp)
 1007394:	dc800215 	stw	r18,8(sp)
 1007398:	dfc00515 	stw	ra,20(sp)
 100739c:	dd000415 	stw	r20,16(sp)
 10073a0:	dc400115 	stw	r17,4(sp)
 10073a4:	dc000015 	stw	r16,0(sp)
 10073a8:	1887c83a 	sub	r3,r3,r2
 10073ac:	2825883a 	mov	r18,r5
 10073b0:	3027883a 	mov	r19,r6
 10073b4:	1800141e 	bne	r3,zero,1007408 <__mdiff+0x84>
 10073b8:	1085883a 	add	r2,r2,r2
 10073bc:	1085883a 	add	r2,r2,r2
 10073c0:	2a000504 	addi	r8,r5,20
 10073c4:	34000504 	addi	r16,r6,20
 10073c8:	4087883a 	add	r3,r8,r2
 10073cc:	8085883a 	add	r2,r16,r2
 10073d0:	00000106 	br	10073d8 <__mdiff+0x54>
 10073d4:	40c0592e 	bgeu	r8,r3,100753c <__mdiff+0x1b8>
 10073d8:	18ffff04 	addi	r3,r3,-4
 10073dc:	10bfff04 	addi	r2,r2,-4
 10073e0:	19c00017 	ldw	r7,0(r3)
 10073e4:	11400017 	ldw	r5,0(r2)
 10073e8:	397ffa26 	beq	r7,r5,10073d4 <__mdiff+0x50>
 10073ec:	3940592e 	bgeu	r7,r5,1007554 <__mdiff+0x1d0>
 10073f0:	9005883a 	mov	r2,r18
 10073f4:	4023883a 	mov	r17,r8
 10073f8:	9825883a 	mov	r18,r19
 10073fc:	05000044 	movi	r20,1
 1007400:	1027883a 	mov	r19,r2
 1007404:	00000406 	br	1007418 <__mdiff+0x94>
 1007408:	18005616 	blt	r3,zero,1007564 <__mdiff+0x1e0>
 100740c:	34400504 	addi	r17,r6,20
 1007410:	2c000504 	addi	r16,r5,20
 1007414:	0029883a 	mov	r20,zero
 1007418:	91400117 	ldw	r5,4(r18)
 100741c:	1006a5c0 	call	1006a5c <_Balloc>
 1007420:	92400417 	ldw	r9,16(r18)
 1007424:	9b000417 	ldw	r12,16(r19)
 1007428:	12c00504 	addi	r11,r2,20
 100742c:	4a51883a 	add	r8,r9,r9
 1007430:	6319883a 	add	r12,r12,r12
 1007434:	4211883a 	add	r8,r8,r8
 1007438:	6319883a 	add	r12,r12,r12
 100743c:	15000315 	stw	r20,12(r2)
 1007440:	8211883a 	add	r8,r16,r8
 1007444:	8b19883a 	add	r12,r17,r12
 1007448:	0007883a 	mov	r3,zero
 100744c:	81400017 	ldw	r5,0(r16)
 1007450:	89c00017 	ldw	r7,0(r17)
 1007454:	59800104 	addi	r6,r11,4
 1007458:	293fffcc 	andi	r4,r5,65535
 100745c:	20c7883a 	add	r3,r4,r3
 1007460:	393fffcc 	andi	r4,r7,65535
 1007464:	1909c83a 	sub	r4,r3,r4
 1007468:	280ad43a 	srli	r5,r5,16
 100746c:	380ed43a 	srli	r7,r7,16
 1007470:	2007d43a 	srai	r3,r4,16
 1007474:	213fffcc 	andi	r4,r4,65535
 1007478:	29cbc83a 	sub	r5,r5,r7
 100747c:	28c7883a 	add	r3,r5,r3
 1007480:	180a943a 	slli	r5,r3,16
 1007484:	8c400104 	addi	r17,r17,4
 1007488:	84000104 	addi	r16,r16,4
 100748c:	2908b03a 	or	r4,r5,r4
 1007490:	59000015 	stw	r4,0(r11)
 1007494:	1807d43a 	srai	r3,r3,16
 1007498:	3015883a 	mov	r10,r6
 100749c:	3017883a 	mov	r11,r6
 10074a0:	8b3fea36 	bltu	r17,r12,100744c <__mdiff+0xc8>
 10074a4:	8200162e 	bgeu	r16,r8,1007500 <__mdiff+0x17c>
 10074a8:	8017883a 	mov	r11,r16
 10074ac:	59400017 	ldw	r5,0(r11)
 10074b0:	31800104 	addi	r6,r6,4
 10074b4:	5ac00104 	addi	r11,r11,4
 10074b8:	293fffcc 	andi	r4,r5,65535
 10074bc:	20c7883a 	add	r3,r4,r3
 10074c0:	280ed43a 	srli	r7,r5,16
 10074c4:	180bd43a 	srai	r5,r3,16
 10074c8:	193fffcc 	andi	r4,r3,65535
 10074cc:	3947883a 	add	r3,r7,r5
 10074d0:	180a943a 	slli	r5,r3,16
 10074d4:	1807d43a 	srai	r3,r3,16
 10074d8:	2908b03a 	or	r4,r5,r4
 10074dc:	313fff15 	stw	r4,-4(r6)
 10074e0:	5a3ff236 	bltu	r11,r8,10074ac <__mdiff+0x128>
 10074e4:	0406303a 	nor	r3,zero,r16
 10074e8:	1a07883a 	add	r3,r3,r8
 10074ec:	1806d0ba 	srli	r3,r3,2
 10074f0:	18c00044 	addi	r3,r3,1
 10074f4:	18c7883a 	add	r3,r3,r3
 10074f8:	18c7883a 	add	r3,r3,r3
 10074fc:	50d5883a 	add	r10,r10,r3
 1007500:	50ffff04 	addi	r3,r10,-4
 1007504:	2000041e 	bne	r4,zero,1007518 <__mdiff+0x194>
 1007508:	18ffff04 	addi	r3,r3,-4
 100750c:	19000017 	ldw	r4,0(r3)
 1007510:	4a7fffc4 	addi	r9,r9,-1
 1007514:	203ffc26 	beq	r4,zero,1007508 <__mdiff+0x184>
 1007518:	12400415 	stw	r9,16(r2)
 100751c:	dfc00517 	ldw	ra,20(sp)
 1007520:	dd000417 	ldw	r20,16(sp)
 1007524:	dcc00317 	ldw	r19,12(sp)
 1007528:	dc800217 	ldw	r18,8(sp)
 100752c:	dc400117 	ldw	r17,4(sp)
 1007530:	dc000017 	ldw	r16,0(sp)
 1007534:	dec00604 	addi	sp,sp,24
 1007538:	f800283a 	ret
 100753c:	000b883a 	mov	r5,zero
 1007540:	1006a5c0 	call	1006a5c <_Balloc>
 1007544:	00c00044 	movi	r3,1
 1007548:	10c00415 	stw	r3,16(r2)
 100754c:	10000515 	stw	zero,20(r2)
 1007550:	003ff206 	br	100751c <__mdiff+0x198>
 1007554:	8023883a 	mov	r17,r16
 1007558:	0029883a 	mov	r20,zero
 100755c:	4021883a 	mov	r16,r8
 1007560:	003fad06 	br	1007418 <__mdiff+0x94>
 1007564:	9005883a 	mov	r2,r18
 1007568:	94400504 	addi	r17,r18,20
 100756c:	9c000504 	addi	r16,r19,20
 1007570:	9825883a 	mov	r18,r19
 1007574:	05000044 	movi	r20,1
 1007578:	1027883a 	mov	r19,r2
 100757c:	003fa606 	br	1007418 <__mdiff+0x94>

01007580 <__ulp>:
 1007580:	295ffc2c 	andhi	r5,r5,32752
 1007584:	00bf3034 	movhi	r2,64704
 1007588:	2887883a 	add	r3,r5,r2
 100758c:	00c0020e 	bge	zero,r3,1007598 <__ulp+0x18>
 1007590:	0005883a 	mov	r2,zero
 1007594:	f800283a 	ret
 1007598:	00c7c83a 	sub	r3,zero,r3
 100759c:	1807d53a 	srai	r3,r3,20
 10075a0:	008004c4 	movi	r2,19
 10075a4:	10c00b0e 	bge	r2,r3,10075d4 <__ulp+0x54>
 10075a8:	18bffb04 	addi	r2,r3,-20
 10075ac:	01000784 	movi	r4,30
 10075b0:	0007883a 	mov	r3,zero
 10075b4:	20800516 	blt	r4,r2,10075cc <__ulp+0x4c>
 10075b8:	010007c4 	movi	r4,31
 10075bc:	2089c83a 	sub	r4,r4,r2
 10075c0:	00800044 	movi	r2,1
 10075c4:	1104983a 	sll	r2,r2,r4
 10075c8:	f800283a 	ret
 10075cc:	00800044 	movi	r2,1
 10075d0:	f800283a 	ret
 10075d4:	01400234 	movhi	r5,8
 10075d8:	28c7d83a 	sra	r3,r5,r3
 10075dc:	0005883a 	mov	r2,zero
 10075e0:	f800283a 	ret

010075e4 <__b2d>:
 10075e4:	defffa04 	addi	sp,sp,-24
 10075e8:	dc000015 	stw	r16,0(sp)
 10075ec:	24000417 	ldw	r16,16(r4)
 10075f0:	dc400115 	stw	r17,4(sp)
 10075f4:	24400504 	addi	r17,r4,20
 10075f8:	8421883a 	add	r16,r16,r16
 10075fc:	8421883a 	add	r16,r16,r16
 1007600:	8c21883a 	add	r16,r17,r16
 1007604:	dc800215 	stw	r18,8(sp)
 1007608:	84bfff17 	ldw	r18,-4(r16)
 100760c:	dd000415 	stw	r20,16(sp)
 1007610:	dcc00315 	stw	r19,12(sp)
 1007614:	9009883a 	mov	r4,r18
 1007618:	2829883a 	mov	r20,r5
 100761c:	dfc00515 	stw	ra,20(sp)
 1007620:	1006d500 	call	1006d50 <__hi0bits>
 1007624:	00c00804 	movi	r3,32
 1007628:	1889c83a 	sub	r4,r3,r2
 100762c:	a1000015 	stw	r4,0(r20)
 1007630:	01000284 	movi	r4,10
 1007634:	84ffff04 	addi	r19,r16,-4
 1007638:	20801216 	blt	r4,r2,1007684 <__b2d+0xa0>
 100763c:	018002c4 	movi	r6,11
 1007640:	308dc83a 	sub	r6,r6,r2
 1007644:	9186d83a 	srl	r3,r18,r6
 1007648:	18cffc34 	orhi	r3,r3,16368
 100764c:	8cc0212e 	bgeu	r17,r19,10076d4 <__b2d+0xf0>
 1007650:	813ffe17 	ldw	r4,-8(r16)
 1007654:	218cd83a 	srl	r6,r4,r6
 1007658:	10800544 	addi	r2,r2,21
 100765c:	9084983a 	sll	r2,r18,r2
 1007660:	1184b03a 	or	r2,r2,r6
 1007664:	dfc00517 	ldw	ra,20(sp)
 1007668:	dd000417 	ldw	r20,16(sp)
 100766c:	dcc00317 	ldw	r19,12(sp)
 1007670:	dc800217 	ldw	r18,8(sp)
 1007674:	dc400117 	ldw	r17,4(sp)
 1007678:	dc000017 	ldw	r16,0(sp)
 100767c:	dec00604 	addi	sp,sp,24
 1007680:	f800283a 	ret
 1007684:	8cc00f2e 	bgeu	r17,r19,10076c4 <__b2d+0xe0>
 1007688:	117ffd44 	addi	r5,r2,-11
 100768c:	80bffe17 	ldw	r2,-8(r16)
 1007690:	28000e26 	beq	r5,zero,10076cc <__b2d+0xe8>
 1007694:	1949c83a 	sub	r4,r3,r5
 1007698:	9164983a 	sll	r18,r18,r5
 100769c:	1106d83a 	srl	r3,r2,r4
 10076a0:	81bffe04 	addi	r6,r16,-8
 10076a4:	948ffc34 	orhi	r18,r18,16368
 10076a8:	90c6b03a 	or	r3,r18,r3
 10076ac:	89800e2e 	bgeu	r17,r6,10076e8 <__b2d+0x104>
 10076b0:	81bffd17 	ldw	r6,-12(r16)
 10076b4:	1144983a 	sll	r2,r2,r5
 10076b8:	310ad83a 	srl	r5,r6,r4
 10076bc:	2884b03a 	or	r2,r5,r2
 10076c0:	003fe806 	br	1007664 <__b2d+0x80>
 10076c4:	10bffd44 	addi	r2,r2,-11
 10076c8:	1000041e 	bne	r2,zero,10076dc <__b2d+0xf8>
 10076cc:	90cffc34 	orhi	r3,r18,16368
 10076d0:	003fe406 	br	1007664 <__b2d+0x80>
 10076d4:	000d883a 	mov	r6,zero
 10076d8:	003fdf06 	br	1007658 <__b2d+0x74>
 10076dc:	90a4983a 	sll	r18,r18,r2
 10076e0:	0005883a 	mov	r2,zero
 10076e4:	003ff906 	br	10076cc <__b2d+0xe8>
 10076e8:	1144983a 	sll	r2,r2,r5
 10076ec:	003fdd06 	br	1007664 <__b2d+0x80>

010076f0 <__d2b>:
 10076f0:	defff804 	addi	sp,sp,-32
 10076f4:	dc000215 	stw	r16,8(sp)
 10076f8:	3021883a 	mov	r16,r6
 10076fc:	dc400315 	stw	r17,12(sp)
 1007700:	8022907a 	slli	r17,r16,1
 1007704:	dd000615 	stw	r20,24(sp)
 1007708:	2829883a 	mov	r20,r5
 100770c:	01400044 	movi	r5,1
 1007710:	dcc00515 	stw	r19,20(sp)
 1007714:	dc800415 	stw	r18,16(sp)
 1007718:	dfc00715 	stw	ra,28(sp)
 100771c:	3825883a 	mov	r18,r7
 1007720:	8822d57a 	srli	r17,r17,21
 1007724:	1006a5c0 	call	1006a5c <_Balloc>
 1007728:	1027883a 	mov	r19,r2
 100772c:	00800434 	movhi	r2,16
 1007730:	10bfffc4 	addi	r2,r2,-1
 1007734:	808c703a 	and	r6,r16,r2
 1007738:	88000126 	beq	r17,zero,1007740 <__d2b+0x50>
 100773c:	31800434 	orhi	r6,r6,16
 1007740:	d9800015 	stw	r6,0(sp)
 1007744:	a0002426 	beq	r20,zero,10077d8 <__d2b+0xe8>
 1007748:	d9000104 	addi	r4,sp,4
 100774c:	dd000115 	stw	r20,4(sp)
 1007750:	1006db80 	call	1006db8 <__lo0bits>
 1007754:	d8c00017 	ldw	r3,0(sp)
 1007758:	10002f1e 	bne	r2,zero,1007818 <__d2b+0x128>
 100775c:	d9000117 	ldw	r4,4(sp)
 1007760:	99000515 	stw	r4,20(r19)
 1007764:	1821003a 	cmpeq	r16,r3,zero
 1007768:	01000084 	movi	r4,2
 100776c:	2421c83a 	sub	r16,r4,r16
 1007770:	98c00615 	stw	r3,24(r19)
 1007774:	9c000415 	stw	r16,16(r19)
 1007778:	88001f1e 	bne	r17,zero,10077f8 <__d2b+0x108>
 100777c:	10bef384 	addi	r2,r2,-1074
 1007780:	90800015 	stw	r2,0(r18)
 1007784:	00900034 	movhi	r2,16384
 1007788:	10bfffc4 	addi	r2,r2,-1
 100778c:	8085883a 	add	r2,r16,r2
 1007790:	1085883a 	add	r2,r2,r2
 1007794:	1085883a 	add	r2,r2,r2
 1007798:	9885883a 	add	r2,r19,r2
 100779c:	11000517 	ldw	r4,20(r2)
 10077a0:	8020917a 	slli	r16,r16,5
 10077a4:	1006d500 	call	1006d50 <__hi0bits>
 10077a8:	d8c00817 	ldw	r3,32(sp)
 10077ac:	8085c83a 	sub	r2,r16,r2
 10077b0:	18800015 	stw	r2,0(r3)
 10077b4:	9805883a 	mov	r2,r19
 10077b8:	dfc00717 	ldw	ra,28(sp)
 10077bc:	dd000617 	ldw	r20,24(sp)
 10077c0:	dcc00517 	ldw	r19,20(sp)
 10077c4:	dc800417 	ldw	r18,16(sp)
 10077c8:	dc400317 	ldw	r17,12(sp)
 10077cc:	dc000217 	ldw	r16,8(sp)
 10077d0:	dec00804 	addi	sp,sp,32
 10077d4:	f800283a 	ret
 10077d8:	d809883a 	mov	r4,sp
 10077dc:	1006db80 	call	1006db8 <__lo0bits>
 10077e0:	d8c00017 	ldw	r3,0(sp)
 10077e4:	04000044 	movi	r16,1
 10077e8:	9c000415 	stw	r16,16(r19)
 10077ec:	98c00515 	stw	r3,20(r19)
 10077f0:	10800804 	addi	r2,r2,32
 10077f4:	883fe126 	beq	r17,zero,100777c <__d2b+0x8c>
 10077f8:	00c00d44 	movi	r3,53
 10077fc:	8c7ef344 	addi	r17,r17,-1075
 1007800:	88a3883a 	add	r17,r17,r2
 1007804:	1885c83a 	sub	r2,r3,r2
 1007808:	d8c00817 	ldw	r3,32(sp)
 100780c:	94400015 	stw	r17,0(r18)
 1007810:	18800015 	stw	r2,0(r3)
 1007814:	003fe706 	br	10077b4 <__d2b+0xc4>
 1007818:	01000804 	movi	r4,32
 100781c:	2089c83a 	sub	r4,r4,r2
 1007820:	1908983a 	sll	r4,r3,r4
 1007824:	d9400117 	ldw	r5,4(sp)
 1007828:	1886d83a 	srl	r3,r3,r2
 100782c:	2148b03a 	or	r4,r4,r5
 1007830:	99000515 	stw	r4,20(r19)
 1007834:	d8c00015 	stw	r3,0(sp)
 1007838:	003fca06 	br	1007764 <__d2b+0x74>

0100783c <__ratio>:
 100783c:	defff904 	addi	sp,sp,-28
 1007840:	dc400315 	stw	r17,12(sp)
 1007844:	2823883a 	mov	r17,r5
 1007848:	d9400104 	addi	r5,sp,4
 100784c:	dfc00615 	stw	ra,24(sp)
 1007850:	dcc00515 	stw	r19,20(sp)
 1007854:	dc800415 	stw	r18,16(sp)
 1007858:	2027883a 	mov	r19,r4
 100785c:	dc000215 	stw	r16,8(sp)
 1007860:	10075e40 	call	10075e4 <__b2d>
 1007864:	d80b883a 	mov	r5,sp
 1007868:	8809883a 	mov	r4,r17
 100786c:	1025883a 	mov	r18,r2
 1007870:	1821883a 	mov	r16,r3
 1007874:	10075e40 	call	10075e4 <__b2d>
 1007878:	8a000417 	ldw	r8,16(r17)
 100787c:	99000417 	ldw	r4,16(r19)
 1007880:	d9400117 	ldw	r5,4(sp)
 1007884:	2209c83a 	sub	r4,r4,r8
 1007888:	2010917a 	slli	r8,r4,5
 100788c:	d9000017 	ldw	r4,0(sp)
 1007890:	2909c83a 	sub	r4,r5,r4
 1007894:	4109883a 	add	r4,r8,r4
 1007898:	01000e0e 	bge	zero,r4,10078d4 <__ratio+0x98>
 100789c:	2008953a 	slli	r4,r4,20
 10078a0:	2421883a 	add	r16,r4,r16
 10078a4:	100d883a 	mov	r6,r2
 10078a8:	180f883a 	mov	r7,r3
 10078ac:	9009883a 	mov	r4,r18
 10078b0:	800b883a 	mov	r5,r16
 10078b4:	100b7280 	call	100b728 <__divdf3>
 10078b8:	dfc00617 	ldw	ra,24(sp)
 10078bc:	dcc00517 	ldw	r19,20(sp)
 10078c0:	dc800417 	ldw	r18,16(sp)
 10078c4:	dc400317 	ldw	r17,12(sp)
 10078c8:	dc000217 	ldw	r16,8(sp)
 10078cc:	dec00704 	addi	sp,sp,28
 10078d0:	f800283a 	ret
 10078d4:	2008953a 	slli	r4,r4,20
 10078d8:	1907c83a 	sub	r3,r3,r4
 10078dc:	003ff106 	br	10078a4 <__ratio+0x68>

010078e0 <_mprec_log10>:
 10078e0:	defffe04 	addi	sp,sp,-8
 10078e4:	dc000015 	stw	r16,0(sp)
 10078e8:	dfc00115 	stw	ra,4(sp)
 10078ec:	008005c4 	movi	r2,23
 10078f0:	2021883a 	mov	r16,r4
 10078f4:	11000d0e 	bge	r2,r4,100792c <_mprec_log10+0x4c>
 10078f8:	0005883a 	mov	r2,zero
 10078fc:	00cffc34 	movhi	r3,16368
 1007900:	843fffc4 	addi	r16,r16,-1
 1007904:	000d883a 	mov	r6,zero
 1007908:	01d00934 	movhi	r7,16420
 100790c:	1009883a 	mov	r4,r2
 1007910:	180b883a 	mov	r5,r3
 1007914:	100c2680 	call	100c268 <__muldf3>
 1007918:	803ff91e 	bne	r16,zero,1007900 <_mprec_log10+0x20>
 100791c:	dfc00117 	ldw	ra,4(sp)
 1007920:	dc000017 	ldw	r16,0(sp)
 1007924:	dec00204 	addi	sp,sp,8
 1007928:	f800283a 	ret
 100792c:	202090fa 	slli	r16,r4,3
 1007930:	00804074 	movhi	r2,257
 1007934:	10bf8d04 	addi	r2,r2,-460
 1007938:	1421883a 	add	r16,r2,r16
 100793c:	80800017 	ldw	r2,0(r16)
 1007940:	80c00117 	ldw	r3,4(r16)
 1007944:	dfc00117 	ldw	ra,4(sp)
 1007948:	dc000017 	ldw	r16,0(sp)
 100794c:	dec00204 	addi	sp,sp,8
 1007950:	f800283a 	ret

01007954 <__copybits>:
 1007954:	297fffc4 	addi	r5,r5,-1
 1007958:	280fd17a 	srai	r7,r5,5
 100795c:	30c00417 	ldw	r3,16(r6)
 1007960:	30800504 	addi	r2,r6,20
 1007964:	39c00044 	addi	r7,r7,1
 1007968:	18c7883a 	add	r3,r3,r3
 100796c:	39cf883a 	add	r7,r7,r7
 1007970:	18c7883a 	add	r3,r3,r3
 1007974:	39cf883a 	add	r7,r7,r7
 1007978:	10c7883a 	add	r3,r2,r3
 100797c:	21cf883a 	add	r7,r4,r7
 1007980:	10c00d2e 	bgeu	r2,r3,10079b8 <__copybits+0x64>
 1007984:	200b883a 	mov	r5,r4
 1007988:	12000017 	ldw	r8,0(r2)
 100798c:	29400104 	addi	r5,r5,4
 1007990:	10800104 	addi	r2,r2,4
 1007994:	2a3fff15 	stw	r8,-4(r5)
 1007998:	10fffb36 	bltu	r2,r3,1007988 <__copybits+0x34>
 100799c:	1985c83a 	sub	r2,r3,r6
 10079a0:	10bffac4 	addi	r2,r2,-21
 10079a4:	1004d0ba 	srli	r2,r2,2
 10079a8:	10800044 	addi	r2,r2,1
 10079ac:	1085883a 	add	r2,r2,r2
 10079b0:	1085883a 	add	r2,r2,r2
 10079b4:	2089883a 	add	r4,r4,r2
 10079b8:	21c0032e 	bgeu	r4,r7,10079c8 <__copybits+0x74>
 10079bc:	20000015 	stw	zero,0(r4)
 10079c0:	21000104 	addi	r4,r4,4
 10079c4:	21fffd36 	bltu	r4,r7,10079bc <__copybits+0x68>
 10079c8:	f800283a 	ret

010079cc <__any_on>:
 10079cc:	20c00417 	ldw	r3,16(r4)
 10079d0:	2805d17a 	srai	r2,r5,5
 10079d4:	21000504 	addi	r4,r4,20
 10079d8:	18800d0e 	bge	r3,r2,1007a10 <__any_on+0x44>
 10079dc:	18c7883a 	add	r3,r3,r3
 10079e0:	18c7883a 	add	r3,r3,r3
 10079e4:	20c7883a 	add	r3,r4,r3
 10079e8:	20c0192e 	bgeu	r4,r3,1007a50 <__any_on+0x84>
 10079ec:	18bfff17 	ldw	r2,-4(r3)
 10079f0:	18ffff04 	addi	r3,r3,-4
 10079f4:	1000041e 	bne	r2,zero,1007a08 <__any_on+0x3c>
 10079f8:	20c0142e 	bgeu	r4,r3,1007a4c <__any_on+0x80>
 10079fc:	18ffff04 	addi	r3,r3,-4
 1007a00:	19400017 	ldw	r5,0(r3)
 1007a04:	283ffc26 	beq	r5,zero,10079f8 <__any_on+0x2c>
 1007a08:	00800044 	movi	r2,1
 1007a0c:	f800283a 	ret
 1007a10:	10c00a0e 	bge	r2,r3,1007a3c <__any_on+0x70>
 1007a14:	1085883a 	add	r2,r2,r2
 1007a18:	1085883a 	add	r2,r2,r2
 1007a1c:	294007cc 	andi	r5,r5,31
 1007a20:	2087883a 	add	r3,r4,r2
 1007a24:	283ff026 	beq	r5,zero,10079e8 <__any_on+0x1c>
 1007a28:	19800017 	ldw	r6,0(r3)
 1007a2c:	3144d83a 	srl	r2,r6,r5
 1007a30:	114a983a 	sll	r5,r2,r5
 1007a34:	317ff41e 	bne	r6,r5,1007a08 <__any_on+0x3c>
 1007a38:	003feb06 	br	10079e8 <__any_on+0x1c>
 1007a3c:	1085883a 	add	r2,r2,r2
 1007a40:	1085883a 	add	r2,r2,r2
 1007a44:	2087883a 	add	r3,r4,r2
 1007a48:	003fe706 	br	10079e8 <__any_on+0x1c>
 1007a4c:	f800283a 	ret
 1007a50:	0005883a 	mov	r2,zero
 1007a54:	f800283a 	ret

01007a58 <_realloc_r>:
 1007a58:	defff604 	addi	sp,sp,-40
 1007a5c:	dc800215 	stw	r18,8(sp)
 1007a60:	dfc00915 	stw	ra,36(sp)
 1007a64:	df000815 	stw	fp,32(sp)
 1007a68:	ddc00715 	stw	r23,28(sp)
 1007a6c:	dd800615 	stw	r22,24(sp)
 1007a70:	dd400515 	stw	r21,20(sp)
 1007a74:	dd000415 	stw	r20,16(sp)
 1007a78:	dcc00315 	stw	r19,12(sp)
 1007a7c:	dc400115 	stw	r17,4(sp)
 1007a80:	dc000015 	stw	r16,0(sp)
 1007a84:	3025883a 	mov	r18,r6
 1007a88:	2800b726 	beq	r5,zero,1007d68 <_realloc_r+0x310>
 1007a8c:	282b883a 	mov	r21,r5
 1007a90:	2029883a 	mov	r20,r4
 1007a94:	100dbe00 	call	100dbe0 <__malloc_lock>
 1007a98:	a8bfff17 	ldw	r2,-4(r21)
 1007a9c:	043fff04 	movi	r16,-4
 1007aa0:	90c002c4 	addi	r3,r18,11
 1007aa4:	01000584 	movi	r4,22
 1007aa8:	acfffe04 	addi	r19,r21,-8
 1007aac:	1420703a 	and	r16,r2,r16
 1007ab0:	20c0332e 	bgeu	r4,r3,1007b80 <_realloc_r+0x128>
 1007ab4:	047ffe04 	movi	r17,-8
 1007ab8:	1c62703a 	and	r17,r3,r17
 1007abc:	8807883a 	mov	r3,r17
 1007ac0:	88005816 	blt	r17,zero,1007c24 <_realloc_r+0x1cc>
 1007ac4:	8c805736 	bltu	r17,r18,1007c24 <_realloc_r+0x1cc>
 1007ac8:	80c0300e 	bge	r16,r3,1007b8c <_realloc_r+0x134>
 1007acc:	07004074 	movhi	fp,257
 1007ad0:	e7013904 	addi	fp,fp,1252
 1007ad4:	e1c00217 	ldw	r7,8(fp)
 1007ad8:	9c09883a 	add	r4,r19,r16
 1007adc:	22000117 	ldw	r8,4(r4)
 1007ae0:	21c06326 	beq	r4,r7,1007c70 <_realloc_r+0x218>
 1007ae4:	017fff84 	movi	r5,-2
 1007ae8:	414a703a 	and	r5,r8,r5
 1007aec:	214b883a 	add	r5,r4,r5
 1007af0:	29800117 	ldw	r6,4(r5)
 1007af4:	3180004c 	andi	r6,r6,1
 1007af8:	30003f26 	beq	r6,zero,1007bf8 <_realloc_r+0x1a0>
 1007afc:	1080004c 	andi	r2,r2,1
 1007b00:	10008326 	beq	r2,zero,1007d10 <_realloc_r+0x2b8>
 1007b04:	900b883a 	mov	r5,r18
 1007b08:	a009883a 	mov	r4,r20
 1007b0c:	1005da00 	call	1005da0 <_malloc_r>
 1007b10:	1025883a 	mov	r18,r2
 1007b14:	10011e26 	beq	r2,zero,1007f90 <_realloc_r+0x538>
 1007b18:	a93fff17 	ldw	r4,-4(r21)
 1007b1c:	10fffe04 	addi	r3,r2,-8
 1007b20:	00bfff84 	movi	r2,-2
 1007b24:	2084703a 	and	r2,r4,r2
 1007b28:	9885883a 	add	r2,r19,r2
 1007b2c:	1880ee26 	beq	r3,r2,1007ee8 <_realloc_r+0x490>
 1007b30:	81bfff04 	addi	r6,r16,-4
 1007b34:	00800904 	movi	r2,36
 1007b38:	1180b836 	bltu	r2,r6,1007e1c <_realloc_r+0x3c4>
 1007b3c:	00c004c4 	movi	r3,19
 1007b40:	19809636 	bltu	r3,r6,1007d9c <_realloc_r+0x344>
 1007b44:	9005883a 	mov	r2,r18
 1007b48:	a807883a 	mov	r3,r21
 1007b4c:	19000017 	ldw	r4,0(r3)
 1007b50:	11000015 	stw	r4,0(r2)
 1007b54:	19000117 	ldw	r4,4(r3)
 1007b58:	11000115 	stw	r4,4(r2)
 1007b5c:	18c00217 	ldw	r3,8(r3)
 1007b60:	10c00215 	stw	r3,8(r2)
 1007b64:	a80b883a 	mov	r5,r21
 1007b68:	a009883a 	mov	r4,r20
 1007b6c:	10051b40 	call	10051b4 <_free_r>
 1007b70:	a009883a 	mov	r4,r20
 1007b74:	100dc040 	call	100dc04 <__malloc_unlock>
 1007b78:	9005883a 	mov	r2,r18
 1007b7c:	00001206 	br	1007bc8 <_realloc_r+0x170>
 1007b80:	00c00404 	movi	r3,16
 1007b84:	1823883a 	mov	r17,r3
 1007b88:	003fce06 	br	1007ac4 <_realloc_r+0x6c>
 1007b8c:	a825883a 	mov	r18,r21
 1007b90:	8445c83a 	sub	r2,r16,r17
 1007b94:	00c003c4 	movi	r3,15
 1007b98:	18802636 	bltu	r3,r2,1007c34 <_realloc_r+0x1dc>
 1007b9c:	99800117 	ldw	r6,4(r19)
 1007ba0:	9c07883a 	add	r3,r19,r16
 1007ba4:	3180004c 	andi	r6,r6,1
 1007ba8:	3420b03a 	or	r16,r6,r16
 1007bac:	9c000115 	stw	r16,4(r19)
 1007bb0:	18800117 	ldw	r2,4(r3)
 1007bb4:	10800054 	ori	r2,r2,1
 1007bb8:	18800115 	stw	r2,4(r3)
 1007bbc:	a009883a 	mov	r4,r20
 1007bc0:	100dc040 	call	100dc04 <__malloc_unlock>
 1007bc4:	9005883a 	mov	r2,r18
 1007bc8:	dfc00917 	ldw	ra,36(sp)
 1007bcc:	df000817 	ldw	fp,32(sp)
 1007bd0:	ddc00717 	ldw	r23,28(sp)
 1007bd4:	dd800617 	ldw	r22,24(sp)
 1007bd8:	dd400517 	ldw	r21,20(sp)
 1007bdc:	dd000417 	ldw	r20,16(sp)
 1007be0:	dcc00317 	ldw	r19,12(sp)
 1007be4:	dc800217 	ldw	r18,8(sp)
 1007be8:	dc400117 	ldw	r17,4(sp)
 1007bec:	dc000017 	ldw	r16,0(sp)
 1007bf0:	dec00a04 	addi	sp,sp,40
 1007bf4:	f800283a 	ret
 1007bf8:	017fff04 	movi	r5,-4
 1007bfc:	414a703a 	and	r5,r8,r5
 1007c00:	814d883a 	add	r6,r16,r5
 1007c04:	30c01f16 	blt	r6,r3,1007c84 <_realloc_r+0x22c>
 1007c08:	20800317 	ldw	r2,12(r4)
 1007c0c:	20c00217 	ldw	r3,8(r4)
 1007c10:	a825883a 	mov	r18,r21
 1007c14:	3021883a 	mov	r16,r6
 1007c18:	18800315 	stw	r2,12(r3)
 1007c1c:	10c00215 	stw	r3,8(r2)
 1007c20:	003fdb06 	br	1007b90 <_realloc_r+0x138>
 1007c24:	00800304 	movi	r2,12
 1007c28:	a0800015 	stw	r2,0(r20)
 1007c2c:	0005883a 	mov	r2,zero
 1007c30:	003fe506 	br	1007bc8 <_realloc_r+0x170>
 1007c34:	98c00117 	ldw	r3,4(r19)
 1007c38:	9c4b883a 	add	r5,r19,r17
 1007c3c:	11000054 	ori	r4,r2,1
 1007c40:	18c0004c 	andi	r3,r3,1
 1007c44:	1c62b03a 	or	r17,r3,r17
 1007c48:	9c400115 	stw	r17,4(r19)
 1007c4c:	29000115 	stw	r4,4(r5)
 1007c50:	2885883a 	add	r2,r5,r2
 1007c54:	10c00117 	ldw	r3,4(r2)
 1007c58:	29400204 	addi	r5,r5,8
 1007c5c:	a009883a 	mov	r4,r20
 1007c60:	18c00054 	ori	r3,r3,1
 1007c64:	10c00115 	stw	r3,4(r2)
 1007c68:	10051b40 	call	10051b4 <_free_r>
 1007c6c:	003fd306 	br	1007bbc <_realloc_r+0x164>
 1007c70:	017fff04 	movi	r5,-4
 1007c74:	414a703a 	and	r5,r8,r5
 1007c78:	89800404 	addi	r6,r17,16
 1007c7c:	8151883a 	add	r8,r16,r5
 1007c80:	4180590e 	bge	r8,r6,1007de8 <_realloc_r+0x390>
 1007c84:	1080004c 	andi	r2,r2,1
 1007c88:	103f9e1e 	bne	r2,zero,1007b04 <_realloc_r+0xac>
 1007c8c:	adbffe17 	ldw	r22,-8(r21)
 1007c90:	00bfff04 	movi	r2,-4
 1007c94:	9dadc83a 	sub	r22,r19,r22
 1007c98:	b1800117 	ldw	r6,4(r22)
 1007c9c:	3084703a 	and	r2,r6,r2
 1007ca0:	20002026 	beq	r4,zero,1007d24 <_realloc_r+0x2cc>
 1007ca4:	80af883a 	add	r23,r16,r2
 1007ca8:	b96f883a 	add	r23,r23,r5
 1007cac:	21c05f26 	beq	r4,r7,1007e2c <_realloc_r+0x3d4>
 1007cb0:	b8c01c16 	blt	r23,r3,1007d24 <_realloc_r+0x2cc>
 1007cb4:	20800317 	ldw	r2,12(r4)
 1007cb8:	20c00217 	ldw	r3,8(r4)
 1007cbc:	81bfff04 	addi	r6,r16,-4
 1007cc0:	01000904 	movi	r4,36
 1007cc4:	18800315 	stw	r2,12(r3)
 1007cc8:	10c00215 	stw	r3,8(r2)
 1007ccc:	b0c00217 	ldw	r3,8(r22)
 1007cd0:	b0800317 	ldw	r2,12(r22)
 1007cd4:	b4800204 	addi	r18,r22,8
 1007cd8:	18800315 	stw	r2,12(r3)
 1007cdc:	10c00215 	stw	r3,8(r2)
 1007ce0:	21801b36 	bltu	r4,r6,1007d50 <_realloc_r+0x2f8>
 1007ce4:	008004c4 	movi	r2,19
 1007ce8:	1180352e 	bgeu	r2,r6,1007dc0 <_realloc_r+0x368>
 1007cec:	a8800017 	ldw	r2,0(r21)
 1007cf0:	b0800215 	stw	r2,8(r22)
 1007cf4:	a8800117 	ldw	r2,4(r21)
 1007cf8:	b0800315 	stw	r2,12(r22)
 1007cfc:	008006c4 	movi	r2,27
 1007d00:	11807f36 	bltu	r2,r6,1007f00 <_realloc_r+0x4a8>
 1007d04:	b0800404 	addi	r2,r22,16
 1007d08:	ad400204 	addi	r21,r21,8
 1007d0c:	00002d06 	br	1007dc4 <_realloc_r+0x36c>
 1007d10:	adbffe17 	ldw	r22,-8(r21)
 1007d14:	00bfff04 	movi	r2,-4
 1007d18:	9dadc83a 	sub	r22,r19,r22
 1007d1c:	b1000117 	ldw	r4,4(r22)
 1007d20:	2084703a 	and	r2,r4,r2
 1007d24:	b03f7726 	beq	r22,zero,1007b04 <_realloc_r+0xac>
 1007d28:	80af883a 	add	r23,r16,r2
 1007d2c:	b8ff7516 	blt	r23,r3,1007b04 <_realloc_r+0xac>
 1007d30:	b0800317 	ldw	r2,12(r22)
 1007d34:	b0c00217 	ldw	r3,8(r22)
 1007d38:	81bfff04 	addi	r6,r16,-4
 1007d3c:	01000904 	movi	r4,36
 1007d40:	18800315 	stw	r2,12(r3)
 1007d44:	10c00215 	stw	r3,8(r2)
 1007d48:	b4800204 	addi	r18,r22,8
 1007d4c:	21bfe52e 	bgeu	r4,r6,1007ce4 <_realloc_r+0x28c>
 1007d50:	a80b883a 	mov	r5,r21
 1007d54:	9009883a 	mov	r4,r18
 1007d58:	10067d80 	call	10067d8 <memmove>
 1007d5c:	b821883a 	mov	r16,r23
 1007d60:	b027883a 	mov	r19,r22
 1007d64:	003f8a06 	br	1007b90 <_realloc_r+0x138>
 1007d68:	300b883a 	mov	r5,r6
 1007d6c:	dfc00917 	ldw	ra,36(sp)
 1007d70:	df000817 	ldw	fp,32(sp)
 1007d74:	ddc00717 	ldw	r23,28(sp)
 1007d78:	dd800617 	ldw	r22,24(sp)
 1007d7c:	dd400517 	ldw	r21,20(sp)
 1007d80:	dd000417 	ldw	r20,16(sp)
 1007d84:	dcc00317 	ldw	r19,12(sp)
 1007d88:	dc800217 	ldw	r18,8(sp)
 1007d8c:	dc400117 	ldw	r17,4(sp)
 1007d90:	dc000017 	ldw	r16,0(sp)
 1007d94:	dec00a04 	addi	sp,sp,40
 1007d98:	1005da01 	jmpi	1005da0 <_malloc_r>
 1007d9c:	a8c00017 	ldw	r3,0(r21)
 1007da0:	90c00015 	stw	r3,0(r18)
 1007da4:	a8c00117 	ldw	r3,4(r21)
 1007da8:	90c00115 	stw	r3,4(r18)
 1007dac:	00c006c4 	movi	r3,27
 1007db0:	19804536 	bltu	r3,r6,1007ec8 <_realloc_r+0x470>
 1007db4:	90800204 	addi	r2,r18,8
 1007db8:	a8c00204 	addi	r3,r21,8
 1007dbc:	003f6306 	br	1007b4c <_realloc_r+0xf4>
 1007dc0:	9005883a 	mov	r2,r18
 1007dc4:	a8c00017 	ldw	r3,0(r21)
 1007dc8:	b821883a 	mov	r16,r23
 1007dcc:	b027883a 	mov	r19,r22
 1007dd0:	10c00015 	stw	r3,0(r2)
 1007dd4:	a8c00117 	ldw	r3,4(r21)
 1007dd8:	10c00115 	stw	r3,4(r2)
 1007ddc:	a8c00217 	ldw	r3,8(r21)
 1007de0:	10c00215 	stw	r3,8(r2)
 1007de4:	003f6a06 	br	1007b90 <_realloc_r+0x138>
 1007de8:	9c67883a 	add	r19,r19,r17
 1007dec:	4445c83a 	sub	r2,r8,r17
 1007df0:	e4c00215 	stw	r19,8(fp)
 1007df4:	10800054 	ori	r2,r2,1
 1007df8:	98800115 	stw	r2,4(r19)
 1007dfc:	a8bfff17 	ldw	r2,-4(r21)
 1007e00:	a009883a 	mov	r4,r20
 1007e04:	1080004c 	andi	r2,r2,1
 1007e08:	1462b03a 	or	r17,r2,r17
 1007e0c:	ac7fff15 	stw	r17,-4(r21)
 1007e10:	100dc040 	call	100dc04 <__malloc_unlock>
 1007e14:	a805883a 	mov	r2,r21
 1007e18:	003f6b06 	br	1007bc8 <_realloc_r+0x170>
 1007e1c:	a80b883a 	mov	r5,r21
 1007e20:	9009883a 	mov	r4,r18
 1007e24:	10067d80 	call	10067d8 <memmove>
 1007e28:	003f4e06 	br	1007b64 <_realloc_r+0x10c>
 1007e2c:	89000404 	addi	r4,r17,16
 1007e30:	b93fbc16 	blt	r23,r4,1007d24 <_realloc_r+0x2cc>
 1007e34:	b0800317 	ldw	r2,12(r22)
 1007e38:	b0c00217 	ldw	r3,8(r22)
 1007e3c:	81bfff04 	addi	r6,r16,-4
 1007e40:	01000904 	movi	r4,36
 1007e44:	18800315 	stw	r2,12(r3)
 1007e48:	10c00215 	stw	r3,8(r2)
 1007e4c:	b4800204 	addi	r18,r22,8
 1007e50:	21804336 	bltu	r4,r6,1007f60 <_realloc_r+0x508>
 1007e54:	008004c4 	movi	r2,19
 1007e58:	11803f2e 	bgeu	r2,r6,1007f58 <_realloc_r+0x500>
 1007e5c:	a8800017 	ldw	r2,0(r21)
 1007e60:	b0800215 	stw	r2,8(r22)
 1007e64:	a8800117 	ldw	r2,4(r21)
 1007e68:	b0800315 	stw	r2,12(r22)
 1007e6c:	008006c4 	movi	r2,27
 1007e70:	11803f36 	bltu	r2,r6,1007f70 <_realloc_r+0x518>
 1007e74:	b0800404 	addi	r2,r22,16
 1007e78:	ad400204 	addi	r21,r21,8
 1007e7c:	a8c00017 	ldw	r3,0(r21)
 1007e80:	10c00015 	stw	r3,0(r2)
 1007e84:	a8c00117 	ldw	r3,4(r21)
 1007e88:	10c00115 	stw	r3,4(r2)
 1007e8c:	a8c00217 	ldw	r3,8(r21)
 1007e90:	10c00215 	stw	r3,8(r2)
 1007e94:	b447883a 	add	r3,r22,r17
 1007e98:	bc45c83a 	sub	r2,r23,r17
 1007e9c:	e0c00215 	stw	r3,8(fp)
 1007ea0:	10800054 	ori	r2,r2,1
 1007ea4:	18800115 	stw	r2,4(r3)
 1007ea8:	b0800117 	ldw	r2,4(r22)
 1007eac:	a009883a 	mov	r4,r20
 1007eb0:	1080004c 	andi	r2,r2,1
 1007eb4:	1462b03a 	or	r17,r2,r17
 1007eb8:	b4400115 	stw	r17,4(r22)
 1007ebc:	100dc040 	call	100dc04 <__malloc_unlock>
 1007ec0:	9005883a 	mov	r2,r18
 1007ec4:	003f4006 	br	1007bc8 <_realloc_r+0x170>
 1007ec8:	a8c00217 	ldw	r3,8(r21)
 1007ecc:	90c00215 	stw	r3,8(r18)
 1007ed0:	a8c00317 	ldw	r3,12(r21)
 1007ed4:	90c00315 	stw	r3,12(r18)
 1007ed8:	30801126 	beq	r6,r2,1007f20 <_realloc_r+0x4c8>
 1007edc:	90800404 	addi	r2,r18,16
 1007ee0:	a8c00404 	addi	r3,r21,16
 1007ee4:	003f1906 	br	1007b4c <_realloc_r+0xf4>
 1007ee8:	90ffff17 	ldw	r3,-4(r18)
 1007eec:	00bfff04 	movi	r2,-4
 1007ef0:	a825883a 	mov	r18,r21
 1007ef4:	1884703a 	and	r2,r3,r2
 1007ef8:	80a1883a 	add	r16,r16,r2
 1007efc:	003f2406 	br	1007b90 <_realloc_r+0x138>
 1007f00:	a8800217 	ldw	r2,8(r21)
 1007f04:	b0800415 	stw	r2,16(r22)
 1007f08:	a8800317 	ldw	r2,12(r21)
 1007f0c:	b0800515 	stw	r2,20(r22)
 1007f10:	31000a26 	beq	r6,r4,1007f3c <_realloc_r+0x4e4>
 1007f14:	b0800604 	addi	r2,r22,24
 1007f18:	ad400404 	addi	r21,r21,16
 1007f1c:	003fa906 	br	1007dc4 <_realloc_r+0x36c>
 1007f20:	a9000417 	ldw	r4,16(r21)
 1007f24:	90800604 	addi	r2,r18,24
 1007f28:	a8c00604 	addi	r3,r21,24
 1007f2c:	91000415 	stw	r4,16(r18)
 1007f30:	a9000517 	ldw	r4,20(r21)
 1007f34:	91000515 	stw	r4,20(r18)
 1007f38:	003f0406 	br	1007b4c <_realloc_r+0xf4>
 1007f3c:	a8c00417 	ldw	r3,16(r21)
 1007f40:	ad400604 	addi	r21,r21,24
 1007f44:	b0800804 	addi	r2,r22,32
 1007f48:	b0c00615 	stw	r3,24(r22)
 1007f4c:	a8ffff17 	ldw	r3,-4(r21)
 1007f50:	b0c00715 	stw	r3,28(r22)
 1007f54:	003f9b06 	br	1007dc4 <_realloc_r+0x36c>
 1007f58:	9005883a 	mov	r2,r18
 1007f5c:	003fc706 	br	1007e7c <_realloc_r+0x424>
 1007f60:	a80b883a 	mov	r5,r21
 1007f64:	9009883a 	mov	r4,r18
 1007f68:	10067d80 	call	10067d8 <memmove>
 1007f6c:	003fc906 	br	1007e94 <_realloc_r+0x43c>
 1007f70:	a8800217 	ldw	r2,8(r21)
 1007f74:	b0800415 	stw	r2,16(r22)
 1007f78:	a8800317 	ldw	r2,12(r21)
 1007f7c:	b0800515 	stw	r2,20(r22)
 1007f80:	31000726 	beq	r6,r4,1007fa0 <_realloc_r+0x548>
 1007f84:	b0800604 	addi	r2,r22,24
 1007f88:	ad400404 	addi	r21,r21,16
 1007f8c:	003fbb06 	br	1007e7c <_realloc_r+0x424>
 1007f90:	a009883a 	mov	r4,r20
 1007f94:	100dc040 	call	100dc04 <__malloc_unlock>
 1007f98:	0005883a 	mov	r2,zero
 1007f9c:	003f0a06 	br	1007bc8 <_realloc_r+0x170>
 1007fa0:	a8c00417 	ldw	r3,16(r21)
 1007fa4:	ad400604 	addi	r21,r21,24
 1007fa8:	b0800804 	addi	r2,r22,32
 1007fac:	b0c00615 	stw	r3,24(r22)
 1007fb0:	a8ffff17 	ldw	r3,-4(r21)
 1007fb4:	b0c00715 	stw	r3,28(r22)
 1007fb8:	003fb006 	br	1007e7c <_realloc_r+0x424>

01007fbc <__fpclassifyd>:
 1007fbc:	00a00034 	movhi	r2,32768
 1007fc0:	10bfffc4 	addi	r2,r2,-1
 1007fc4:	2884703a 	and	r2,r5,r2
 1007fc8:	10000726 	beq	r2,zero,1007fe8 <__fpclassifyd+0x2c>
 1007fcc:	00fffc34 	movhi	r3,65520
 1007fd0:	019ff834 	movhi	r6,32736
 1007fd4:	28c7883a 	add	r3,r5,r3
 1007fd8:	31bfffc4 	addi	r6,r6,-1
 1007fdc:	30c00536 	bltu	r6,r3,1007ff4 <__fpclassifyd+0x38>
 1007fe0:	00800104 	movi	r2,4
 1007fe4:	f800283a 	ret
 1007fe8:	2000021e 	bne	r4,zero,1007ff4 <__fpclassifyd+0x38>
 1007fec:	00800084 	movi	r2,2
 1007ff0:	f800283a 	ret
 1007ff4:	00dffc34 	movhi	r3,32752
 1007ff8:	019ff834 	movhi	r6,32736
 1007ffc:	28cb883a 	add	r5,r5,r3
 1008000:	31bfffc4 	addi	r6,r6,-1
 1008004:	317ff62e 	bgeu	r6,r5,1007fe0 <__fpclassifyd+0x24>
 1008008:	01400434 	movhi	r5,16
 100800c:	297fffc4 	addi	r5,r5,-1
 1008010:	28800236 	bltu	r5,r2,100801c <__fpclassifyd+0x60>
 1008014:	008000c4 	movi	r2,3
 1008018:	f800283a 	ret
 100801c:	10c00226 	beq	r2,r3,1008028 <__fpclassifyd+0x6c>
 1008020:	0005883a 	mov	r2,zero
 1008024:	f800283a 	ret
 1008028:	2005003a 	cmpeq	r2,r4,zero
 100802c:	f800283a 	ret

01008030 <_sbrk_r>:
 1008030:	defffd04 	addi	sp,sp,-12
 1008034:	dc000015 	stw	r16,0(sp)
 1008038:	04004074 	movhi	r16,257
 100803c:	dc400115 	stw	r17,4(sp)
 1008040:	840d8f04 	addi	r16,r16,13884
 1008044:	2023883a 	mov	r17,r4
 1008048:	2809883a 	mov	r4,r5
 100804c:	dfc00215 	stw	ra,8(sp)
 1008050:	80000015 	stw	zero,0(r16)
 1008054:	100ddc40 	call	100ddc4 <sbrk>
 1008058:	00ffffc4 	movi	r3,-1
 100805c:	10c00526 	beq	r2,r3,1008074 <_sbrk_r+0x44>
 1008060:	dfc00217 	ldw	ra,8(sp)
 1008064:	dc400117 	ldw	r17,4(sp)
 1008068:	dc000017 	ldw	r16,0(sp)
 100806c:	dec00304 	addi	sp,sp,12
 1008070:	f800283a 	ret
 1008074:	80c00017 	ldw	r3,0(r16)
 1008078:	183ff926 	beq	r3,zero,1008060 <_sbrk_r+0x30>
 100807c:	88c00015 	stw	r3,0(r17)
 1008080:	003ff706 	br	1008060 <_sbrk_r+0x30>

01008084 <__sread>:
 1008084:	defffe04 	addi	sp,sp,-8
 1008088:	dc000015 	stw	r16,0(sp)
 100808c:	2821883a 	mov	r16,r5
 1008090:	2940038f 	ldh	r5,14(r5)
 1008094:	dfc00115 	stw	ra,4(sp)
 1008098:	1009e780 	call	1009e78 <_read_r>
 100809c:	10000716 	blt	r2,zero,10080bc <__sread+0x38>
 10080a0:	80c01417 	ldw	r3,80(r16)
 10080a4:	1887883a 	add	r3,r3,r2
 10080a8:	80c01415 	stw	r3,80(r16)
 10080ac:	dfc00117 	ldw	ra,4(sp)
 10080b0:	dc000017 	ldw	r16,0(sp)
 10080b4:	dec00204 	addi	sp,sp,8
 10080b8:	f800283a 	ret
 10080bc:	80c0030b 	ldhu	r3,12(r16)
 10080c0:	18fbffcc 	andi	r3,r3,61439
 10080c4:	80c0030d 	sth	r3,12(r16)
 10080c8:	dfc00117 	ldw	ra,4(sp)
 10080cc:	dc000017 	ldw	r16,0(sp)
 10080d0:	dec00204 	addi	sp,sp,8
 10080d4:	f800283a 	ret

010080d8 <__seofread>:
 10080d8:	0005883a 	mov	r2,zero
 10080dc:	f800283a 	ret

010080e0 <__swrite>:
 10080e0:	2880030b 	ldhu	r2,12(r5)
 10080e4:	defffb04 	addi	sp,sp,-20
 10080e8:	dcc00315 	stw	r19,12(sp)
 10080ec:	dc800215 	stw	r18,8(sp)
 10080f0:	dc400115 	stw	r17,4(sp)
 10080f4:	dc000015 	stw	r16,0(sp)
 10080f8:	dfc00415 	stw	ra,16(sp)
 10080fc:	10c0400c 	andi	r3,r2,256
 1008100:	2821883a 	mov	r16,r5
 1008104:	2023883a 	mov	r17,r4
 1008108:	3025883a 	mov	r18,r6
 100810c:	3827883a 	mov	r19,r7
 1008110:	18000526 	beq	r3,zero,1008128 <__swrite+0x48>
 1008114:	2940038f 	ldh	r5,14(r5)
 1008118:	01c00084 	movi	r7,2
 100811c:	000d883a 	mov	r6,zero
 1008120:	1009e180 	call	1009e18 <_lseek_r>
 1008124:	8080030b 	ldhu	r2,12(r16)
 1008128:	8140038f 	ldh	r5,14(r16)
 100812c:	10bbffcc 	andi	r2,r2,61439
 1008130:	980f883a 	mov	r7,r19
 1008134:	900d883a 	mov	r6,r18
 1008138:	8809883a 	mov	r4,r17
 100813c:	8080030d 	sth	r2,12(r16)
 1008140:	dfc00417 	ldw	ra,16(sp)
 1008144:	dcc00317 	ldw	r19,12(sp)
 1008148:	dc800217 	ldw	r18,8(sp)
 100814c:	dc400117 	ldw	r17,4(sp)
 1008150:	dc000017 	ldw	r16,0(sp)
 1008154:	dec00504 	addi	sp,sp,20
 1008158:	10098e41 	jmpi	10098e4 <_write_r>

0100815c <__sseek>:
 100815c:	defffe04 	addi	sp,sp,-8
 1008160:	dc000015 	stw	r16,0(sp)
 1008164:	2821883a 	mov	r16,r5
 1008168:	2940038f 	ldh	r5,14(r5)
 100816c:	dfc00115 	stw	ra,4(sp)
 1008170:	1009e180 	call	1009e18 <_lseek_r>
 1008174:	00ffffc4 	movi	r3,-1
 1008178:	10c00826 	beq	r2,r3,100819c <__sseek+0x40>
 100817c:	80c0030b 	ldhu	r3,12(r16)
 1008180:	80801415 	stw	r2,80(r16)
 1008184:	18c40014 	ori	r3,r3,4096
 1008188:	80c0030d 	sth	r3,12(r16)
 100818c:	dfc00117 	ldw	ra,4(sp)
 1008190:	dc000017 	ldw	r16,0(sp)
 1008194:	dec00204 	addi	sp,sp,8
 1008198:	f800283a 	ret
 100819c:	80c0030b 	ldhu	r3,12(r16)
 10081a0:	18fbffcc 	andi	r3,r3,61439
 10081a4:	80c0030d 	sth	r3,12(r16)
 10081a8:	dfc00117 	ldw	ra,4(sp)
 10081ac:	dc000017 	ldw	r16,0(sp)
 10081b0:	dec00204 	addi	sp,sp,8
 10081b4:	f800283a 	ret

010081b8 <__sclose>:
 10081b8:	2940038f 	ldh	r5,14(r5)
 10081bc:	10099441 	jmpi	1009944 <_close_r>

010081c0 <strcmp>:
 10081c0:	2144b03a 	or	r2,r4,r5
 10081c4:	108000cc 	andi	r2,r2,3
 10081c8:	1000171e 	bne	r2,zero,1008228 <strcmp+0x68>
 10081cc:	20800017 	ldw	r2,0(r4)
 10081d0:	28c00017 	ldw	r3,0(r5)
 10081d4:	10c0141e 	bne	r2,r3,1008228 <strcmp+0x68>
 10081d8:	027fbff4 	movhi	r9,65279
 10081dc:	4a7fbfc4 	addi	r9,r9,-257
 10081e0:	0086303a 	nor	r3,zero,r2
 10081e4:	02202074 	movhi	r8,32897
 10081e8:	1245883a 	add	r2,r2,r9
 10081ec:	42202004 	addi	r8,r8,-32640
 10081f0:	10c4703a 	and	r2,r2,r3
 10081f4:	1204703a 	and	r2,r2,r8
 10081f8:	10000226 	beq	r2,zero,1008204 <strcmp+0x44>
 10081fc:	00002306 	br	100828c <strcmp+0xcc>
 1008200:	1000221e 	bne	r2,zero,100828c <strcmp+0xcc>
 1008204:	21000104 	addi	r4,r4,4
 1008208:	20c00017 	ldw	r3,0(r4)
 100820c:	29400104 	addi	r5,r5,4
 1008210:	29800017 	ldw	r6,0(r5)
 1008214:	1a4f883a 	add	r7,r3,r9
 1008218:	00c4303a 	nor	r2,zero,r3
 100821c:	3884703a 	and	r2,r7,r2
 1008220:	1204703a 	and	r2,r2,r8
 1008224:	19bff626 	beq	r3,r6,1008200 <strcmp+0x40>
 1008228:	20800003 	ldbu	r2,0(r4)
 100822c:	10c03fcc 	andi	r3,r2,255
 1008230:	18c0201c 	xori	r3,r3,128
 1008234:	18ffe004 	addi	r3,r3,-128
 1008238:	18000c26 	beq	r3,zero,100826c <strcmp+0xac>
 100823c:	29800007 	ldb	r6,0(r5)
 1008240:	19800326 	beq	r3,r6,1008250 <strcmp+0x90>
 1008244:	00001306 	br	1008294 <strcmp+0xd4>
 1008248:	29800007 	ldb	r6,0(r5)
 100824c:	11800b1e 	bne	r2,r6,100827c <strcmp+0xbc>
 1008250:	21000044 	addi	r4,r4,1
 1008254:	20c00003 	ldbu	r3,0(r4)
 1008258:	29400044 	addi	r5,r5,1
 100825c:	18803fcc 	andi	r2,r3,255
 1008260:	1080201c 	xori	r2,r2,128
 1008264:	10bfe004 	addi	r2,r2,-128
 1008268:	103ff71e 	bne	r2,zero,1008248 <strcmp+0x88>
 100826c:	0007883a 	mov	r3,zero
 1008270:	28800003 	ldbu	r2,0(r5)
 1008274:	1885c83a 	sub	r2,r3,r2
 1008278:	f800283a 	ret
 100827c:	28800003 	ldbu	r2,0(r5)
 1008280:	18c03fcc 	andi	r3,r3,255
 1008284:	1885c83a 	sub	r2,r3,r2
 1008288:	f800283a 	ret
 100828c:	0005883a 	mov	r2,zero
 1008290:	f800283a 	ret
 1008294:	10c03fcc 	andi	r3,r2,255
 1008298:	003ff506 	br	1008270 <strcmp+0xb0>

0100829c <__sprint_r.part.0>:
 100829c:	28801917 	ldw	r2,100(r5)
 10082a0:	defff604 	addi	sp,sp,-40
 10082a4:	dd400515 	stw	r21,20(sp)
 10082a8:	dfc00915 	stw	ra,36(sp)
 10082ac:	df000815 	stw	fp,32(sp)
 10082b0:	ddc00715 	stw	r23,28(sp)
 10082b4:	dd800615 	stw	r22,24(sp)
 10082b8:	dd000415 	stw	r20,16(sp)
 10082bc:	dcc00315 	stw	r19,12(sp)
 10082c0:	dc800215 	stw	r18,8(sp)
 10082c4:	dc400115 	stw	r17,4(sp)
 10082c8:	dc000015 	stw	r16,0(sp)
 10082cc:	1088000c 	andi	r2,r2,8192
 10082d0:	302b883a 	mov	r21,r6
 10082d4:	10002e26 	beq	r2,zero,1008390 <__sprint_r.part.0+0xf4>
 10082d8:	30800217 	ldw	r2,8(r6)
 10082dc:	35800017 	ldw	r22,0(r6)
 10082e0:	10002926 	beq	r2,zero,1008388 <__sprint_r.part.0+0xec>
 10082e4:	2827883a 	mov	r19,r5
 10082e8:	2029883a 	mov	r20,r4
 10082ec:	b5c00104 	addi	r23,r22,4
 10082f0:	04bfffc4 	movi	r18,-1
 10082f4:	bc400017 	ldw	r17,0(r23)
 10082f8:	b4000017 	ldw	r16,0(r22)
 10082fc:	0039883a 	mov	fp,zero
 1008300:	8822d0ba 	srli	r17,r17,2
 1008304:	8800031e 	bne	r17,zero,1008314 <__sprint_r.part.0+0x78>
 1008308:	00001806 	br	100836c <__sprint_r.part.0+0xd0>
 100830c:	84000104 	addi	r16,r16,4
 1008310:	8f001526 	beq	r17,fp,1008368 <__sprint_r.part.0+0xcc>
 1008314:	81400017 	ldw	r5,0(r16)
 1008318:	980d883a 	mov	r6,r19
 100831c:	a009883a 	mov	r4,r20
 1008320:	1009cc40 	call	1009cc4 <_fputwc_r>
 1008324:	e7000044 	addi	fp,fp,1
 1008328:	14bff81e 	bne	r2,r18,100830c <__sprint_r.part.0+0x70>
 100832c:	9005883a 	mov	r2,r18
 1008330:	a8000215 	stw	zero,8(r21)
 1008334:	a8000115 	stw	zero,4(r21)
 1008338:	dfc00917 	ldw	ra,36(sp)
 100833c:	df000817 	ldw	fp,32(sp)
 1008340:	ddc00717 	ldw	r23,28(sp)
 1008344:	dd800617 	ldw	r22,24(sp)
 1008348:	dd400517 	ldw	r21,20(sp)
 100834c:	dd000417 	ldw	r20,16(sp)
 1008350:	dcc00317 	ldw	r19,12(sp)
 1008354:	dc800217 	ldw	r18,8(sp)
 1008358:	dc400117 	ldw	r17,4(sp)
 100835c:	dc000017 	ldw	r16,0(sp)
 1008360:	dec00a04 	addi	sp,sp,40
 1008364:	f800283a 	ret
 1008368:	a8800217 	ldw	r2,8(r21)
 100836c:	8c63883a 	add	r17,r17,r17
 1008370:	8c63883a 	add	r17,r17,r17
 1008374:	1445c83a 	sub	r2,r2,r17
 1008378:	a8800215 	stw	r2,8(r21)
 100837c:	b5800204 	addi	r22,r22,8
 1008380:	bdc00204 	addi	r23,r23,8
 1008384:	103fdb1e 	bne	r2,zero,10082f4 <__sprint_r.part.0+0x58>
 1008388:	0005883a 	mov	r2,zero
 100838c:	003fe806 	br	1008330 <__sprint_r.part.0+0x94>
 1008390:	10054c40 	call	10054c4 <__sfvwrite_r>
 1008394:	003fe606 	br	1008330 <__sprint_r.part.0+0x94>

01008398 <__sprint_r>:
 1008398:	30c00217 	ldw	r3,8(r6)
 100839c:	18000126 	beq	r3,zero,10083a4 <__sprint_r+0xc>
 10083a0:	100829c1 	jmpi	100829c <__sprint_r.part.0>
 10083a4:	30000115 	stw	zero,4(r6)
 10083a8:	0005883a 	mov	r2,zero
 10083ac:	f800283a 	ret

010083b0 <___vfiprintf_internal_r>:
 10083b0:	deffc904 	addi	sp,sp,-220
 10083b4:	df003515 	stw	fp,212(sp)
 10083b8:	dd003115 	stw	r20,196(sp)
 10083bc:	dfc03615 	stw	ra,216(sp)
 10083c0:	ddc03415 	stw	r23,208(sp)
 10083c4:	dd803315 	stw	r22,204(sp)
 10083c8:	dd403215 	stw	r21,200(sp)
 10083cc:	dcc03015 	stw	r19,192(sp)
 10083d0:	dc802f15 	stw	r18,188(sp)
 10083d4:	dc402e15 	stw	r17,184(sp)
 10083d8:	dc002d15 	stw	r16,180(sp)
 10083dc:	d9002015 	stw	r4,128(sp)
 10083e0:	d9c02215 	stw	r7,136(sp)
 10083e4:	2829883a 	mov	r20,r5
 10083e8:	3039883a 	mov	fp,r6
 10083ec:	20000226 	beq	r4,zero,10083f8 <___vfiprintf_internal_r+0x48>
 10083f0:	20800e17 	ldw	r2,56(r4)
 10083f4:	1000cf26 	beq	r2,zero,1008734 <___vfiprintf_internal_r+0x384>
 10083f8:	a080030b 	ldhu	r2,12(r20)
 10083fc:	10c8000c 	andi	r3,r2,8192
 1008400:	1800061e 	bne	r3,zero,100841c <___vfiprintf_internal_r+0x6c>
 1008404:	a1001917 	ldw	r4,100(r20)
 1008408:	00f7ffc4 	movi	r3,-8193
 100840c:	10880014 	ori	r2,r2,8192
 1008410:	20c6703a 	and	r3,r4,r3
 1008414:	a080030d 	sth	r2,12(r20)
 1008418:	a0c01915 	stw	r3,100(r20)
 100841c:	10c0020c 	andi	r3,r2,8
 1008420:	1800a926 	beq	r3,zero,10086c8 <___vfiprintf_internal_r+0x318>
 1008424:	a0c00417 	ldw	r3,16(r20)
 1008428:	1800a726 	beq	r3,zero,10086c8 <___vfiprintf_internal_r+0x318>
 100842c:	1080068c 	andi	r2,r2,26
 1008430:	00c00284 	movi	r3,10
 1008434:	10c0ac26 	beq	r2,r3,10086e8 <___vfiprintf_internal_r+0x338>
 1008438:	da801a04 	addi	r10,sp,104
 100843c:	da801e15 	stw	r10,120(sp)
 1008440:	d8801e17 	ldw	r2,120(sp)
 1008444:	da8019c4 	addi	r10,sp,103
 1008448:	05804074 	movhi	r22,257
 100844c:	05c04074 	movhi	r23,257
 1008450:	da801f15 	stw	r10,124(sp)
 1008454:	1295c83a 	sub	r10,r2,r10
 1008458:	b5bfc304 	addi	r22,r22,-244
 100845c:	bdffbf04 	addi	r23,r23,-260
 1008460:	dec01a15 	stw	sp,104(sp)
 1008464:	d8001c15 	stw	zero,112(sp)
 1008468:	d8001b15 	stw	zero,108(sp)
 100846c:	d8002615 	stw	zero,152(sp)
 1008470:	d8002315 	stw	zero,140(sp)
 1008474:	da802715 	stw	r10,156(sp)
 1008478:	d811883a 	mov	r8,sp
 100847c:	dd002115 	stw	r20,132(sp)
 1008480:	e021883a 	mov	r16,fp
 1008484:	80800007 	ldb	r2,0(r16)
 1008488:	1003ea26 	beq	r2,zero,1009434 <___vfiprintf_internal_r+0x1084>
 100848c:	00c00944 	movi	r3,37
 1008490:	8025883a 	mov	r18,r16
 1008494:	10c0021e 	bne	r2,r3,10084a0 <___vfiprintf_internal_r+0xf0>
 1008498:	00001606 	br	10084f4 <___vfiprintf_internal_r+0x144>
 100849c:	10c00326 	beq	r2,r3,10084ac <___vfiprintf_internal_r+0xfc>
 10084a0:	94800044 	addi	r18,r18,1
 10084a4:	90800007 	ldb	r2,0(r18)
 10084a8:	103ffc1e 	bne	r2,zero,100849c <___vfiprintf_internal_r+0xec>
 10084ac:	9423c83a 	sub	r17,r18,r16
 10084b0:	88001026 	beq	r17,zero,10084f4 <___vfiprintf_internal_r+0x144>
 10084b4:	d8c01c17 	ldw	r3,112(sp)
 10084b8:	d8801b17 	ldw	r2,108(sp)
 10084bc:	44000015 	stw	r16,0(r8)
 10084c0:	88c7883a 	add	r3,r17,r3
 10084c4:	10800044 	addi	r2,r2,1
 10084c8:	44400115 	stw	r17,4(r8)
 10084cc:	d8c01c15 	stw	r3,112(sp)
 10084d0:	d8801b15 	stw	r2,108(sp)
 10084d4:	010001c4 	movi	r4,7
 10084d8:	2080760e 	bge	r4,r2,10086b4 <___vfiprintf_internal_r+0x304>
 10084dc:	1803821e 	bne	r3,zero,10092e8 <___vfiprintf_internal_r+0xf38>
 10084e0:	da802317 	ldw	r10,140(sp)
 10084e4:	d8001b15 	stw	zero,108(sp)
 10084e8:	d811883a 	mov	r8,sp
 10084ec:	5455883a 	add	r10,r10,r17
 10084f0:	da802315 	stw	r10,140(sp)
 10084f4:	90800007 	ldb	r2,0(r18)
 10084f8:	10044626 	beq	r2,zero,1009614 <___vfiprintf_internal_r+0x1264>
 10084fc:	90c00047 	ldb	r3,1(r18)
 1008500:	94000044 	addi	r16,r18,1
 1008504:	d8001d85 	stb	zero,118(sp)
 1008508:	0009883a 	mov	r4,zero
 100850c:	000f883a 	mov	r7,zero
 1008510:	027fffc4 	movi	r9,-1
 1008514:	0023883a 	mov	r17,zero
 1008518:	0029883a 	mov	r20,zero
 100851c:	01401604 	movi	r5,88
 1008520:	01800244 	movi	r6,9
 1008524:	03400a84 	movi	r13,42
 1008528:	03001b04 	movi	r12,108
 100852c:	84000044 	addi	r16,r16,1
 1008530:	18bff804 	addi	r2,r3,-32
 1008534:	28827336 	bltu	r5,r2,1008f04 <___vfiprintf_internal_r+0xb54>
 1008538:	100490ba 	slli	r2,r2,2
 100853c:	02804074 	movhi	r10,257
 1008540:	52a15404 	addi	r10,r10,-31408
 1008544:	1285883a 	add	r2,r2,r10
 1008548:	10800017 	ldw	r2,0(r2)
 100854c:	1000683a 	jmp	r2
 1008550:	01008c38 	rdprs	r4,zero,560
 1008554:	01008f04 	movi	r4,572
 1008558:	01008f04 	movi	r4,572
 100855c:	01008c58 	cmpnei	r4,zero,561
 1008560:	01008f04 	movi	r4,572
 1008564:	01008f04 	movi	r4,572
 1008568:	01008f04 	movi	r4,572
 100856c:	01008f04 	movi	r4,572
 1008570:	01008f04 	movi	r4,572
 1008574:	01008f04 	movi	r4,572
 1008578:	01008e40 	call	1008e4 <__alt_mem_SDRAM_controller-0xeff71c>
 100857c:	01008e5c 	xori	r4,zero,569
 1008580:	01008f04 	movi	r4,572
 1008584:	01008744 	movi	r4,541
 1008588:	01008e6c 	andhi	r4,zero,569
 100858c:	01008f04 	movi	r4,572
 1008590:	01008c64 	muli	r4,zero,561
 1008594:	01008c70 	cmpltui	r4,zero,561
 1008598:	01008c70 	cmpltui	r4,zero,561
 100859c:	01008c70 	cmpltui	r4,zero,561
 10085a0:	01008c70 	cmpltui	r4,zero,561
 10085a4:	01008c70 	cmpltui	r4,zero,561
 10085a8:	01008c70 	cmpltui	r4,zero,561
 10085ac:	01008c70 	cmpltui	r4,zero,561
 10085b0:	01008c70 	cmpltui	r4,zero,561
 10085b4:	01008c70 	cmpltui	r4,zero,561
 10085b8:	01008f04 	movi	r4,572
 10085bc:	01008f04 	movi	r4,572
 10085c0:	01008f04 	movi	r4,572
 10085c4:	01008f04 	movi	r4,572
 10085c8:	01008f04 	movi	r4,572
 10085cc:	01008f04 	movi	r4,572
 10085d0:	01008f04 	movi	r4,572
 10085d4:	01008f04 	movi	r4,572
 10085d8:	01008f04 	movi	r4,572
 10085dc:	01008f04 	movi	r4,572
 10085e0:	01008c9c 	xori	r4,zero,562
 10085e4:	01008f04 	movi	r4,572
 10085e8:	01008f04 	movi	r4,572
 10085ec:	01008f04 	movi	r4,572
 10085f0:	01008f04 	movi	r4,572
 10085f4:	01008f04 	movi	r4,572
 10085f8:	01008f04 	movi	r4,572
 10085fc:	01008f04 	movi	r4,572
 1008600:	01008f04 	movi	r4,572
 1008604:	01008f04 	movi	r4,572
 1008608:	01008f04 	movi	r4,572
 100860c:	01008cd4 	movui	r4,563
 1008610:	01008f04 	movi	r4,572
 1008614:	01008f04 	movi	r4,572
 1008618:	01008f04 	movi	r4,572
 100861c:	01008f04 	movi	r4,572
 1008620:	01008f04 	movi	r4,572
 1008624:	01008d2c 	andhi	r4,zero,564
 1008628:	01008f04 	movi	r4,572
 100862c:	01008f04 	movi	r4,572
 1008630:	01008d9c 	xori	r4,zero,566
 1008634:	01008f04 	movi	r4,572
 1008638:	01008f04 	movi	r4,572
 100863c:	01008f04 	movi	r4,572
 1008640:	01008f04 	movi	r4,572
 1008644:	01008f04 	movi	r4,572
 1008648:	01008f04 	movi	r4,572
 100864c:	01008f04 	movi	r4,572
 1008650:	01008f04 	movi	r4,572
 1008654:	01008f04 	movi	r4,572
 1008658:	01008f04 	movi	r4,572
 100865c:	01008b48 	cmpgei	r4,zero,557
 1008660:	01008b74 	movhi	r4,557
 1008664:	01008f04 	movi	r4,572
 1008668:	01008f04 	movi	r4,572
 100866c:	01008f04 	movi	r4,572
 1008670:	01008eac 	andhi	r4,zero,570
 1008674:	01008b74 	movhi	r4,557
 1008678:	01008f04 	movi	r4,572
 100867c:	01008f04 	movi	r4,572
 1008680:	01008a08 	cmpgei	r4,zero,552
 1008684:	01008f04 	movi	r4,572
 1008688:	01008a18 	cmpnei	r4,zero,552
 100868c:	01008a54 	movui	r4,553
 1008690:	01008750 	cmplti	r4,zero,541
 1008694:	010089fc 	xorhi	r4,zero,551
 1008698:	01008f04 	movi	r4,572
 100869c:	01008dd8 	cmpnei	r4,zero,567
 10086a0:	01008f04 	movi	r4,572
 10086a4:	01008e30 	cmpltui	r4,zero,568
 10086a8:	01008f04 	movi	r4,572
 10086ac:	01008f04 	movi	r4,572
 10086b0:	01008af4 	movhi	r4,555
 10086b4:	42000204 	addi	r8,r8,8
 10086b8:	da802317 	ldw	r10,140(sp)
 10086bc:	5455883a 	add	r10,r10,r17
 10086c0:	da802315 	stw	r10,140(sp)
 10086c4:	003f8b06 	br	10084f4 <___vfiprintf_internal_r+0x144>
 10086c8:	d9002017 	ldw	r4,128(sp)
 10086cc:	a00b883a 	mov	r5,r20
 10086d0:	100306c0 	call	100306c <__swsetup_r>
 10086d4:	1003b11e 	bne	r2,zero,100959c <___vfiprintf_internal_r+0x11ec>
 10086d8:	a080030b 	ldhu	r2,12(r20)
 10086dc:	00c00284 	movi	r3,10
 10086e0:	1080068c 	andi	r2,r2,26
 10086e4:	10ff541e 	bne	r2,r3,1008438 <___vfiprintf_internal_r+0x88>
 10086e8:	a080038f 	ldh	r2,14(r20)
 10086ec:	103f5216 	blt	r2,zero,1008438 <___vfiprintf_internal_r+0x88>
 10086f0:	d9c02217 	ldw	r7,136(sp)
 10086f4:	d9002017 	ldw	r4,128(sp)
 10086f8:	e00d883a 	mov	r6,fp
 10086fc:	a00b883a 	mov	r5,r20
 1008700:	10098280 	call	1009828 <__sbprintf>
 1008704:	dfc03617 	ldw	ra,216(sp)
 1008708:	df003517 	ldw	fp,212(sp)
 100870c:	ddc03417 	ldw	r23,208(sp)
 1008710:	dd803317 	ldw	r22,204(sp)
 1008714:	dd403217 	ldw	r21,200(sp)
 1008718:	dd003117 	ldw	r20,196(sp)
 100871c:	dcc03017 	ldw	r19,192(sp)
 1008720:	dc802f17 	ldw	r18,188(sp)
 1008724:	dc402e17 	ldw	r17,184(sp)
 1008728:	dc002d17 	ldw	r16,180(sp)
 100872c:	dec03704 	addi	sp,sp,220
 1008730:	f800283a 	ret
 1008734:	10050400 	call	1005040 <__sinit>
 1008738:	003f2f06 	br	10083f8 <___vfiprintf_internal_r+0x48>
 100873c:	0463c83a 	sub	r17,zero,r17
 1008740:	d8802215 	stw	r2,136(sp)
 1008744:	a5000114 	ori	r20,r20,4
 1008748:	80c00007 	ldb	r3,0(r16)
 100874c:	003f7706 	br	100852c <___vfiprintf_internal_r+0x17c>
 1008750:	00800c04 	movi	r2,48
 1008754:	da802217 	ldw	r10,136(sp)
 1008758:	d8801d05 	stb	r2,116(sp)
 100875c:	00801e04 	movi	r2,120
 1008760:	d8801d45 	stb	r2,117(sp)
 1008764:	d8001d85 	stb	zero,118(sp)
 1008768:	50c00104 	addi	r3,r10,4
 100876c:	54800017 	ldw	r18,0(r10)
 1008770:	0027883a 	mov	r19,zero
 1008774:	a0800094 	ori	r2,r20,2
 1008778:	48030b16 	blt	r9,zero,10093a8 <___vfiprintf_internal_r+0xff8>
 100877c:	00bfdfc4 	movi	r2,-129
 1008780:	a096703a 	and	r11,r20,r2
 1008784:	d8c02215 	stw	r3,136(sp)
 1008788:	5d000094 	ori	r20,r11,2
 100878c:	90032b1e 	bne	r18,zero,100943c <___vfiprintf_internal_r+0x108c>
 1008790:	00804074 	movhi	r2,257
 1008794:	10bf5e04 	addi	r2,r2,-648
 1008798:	d8802615 	stw	r2,152(sp)
 100879c:	0039883a 	mov	fp,zero
 10087a0:	48017b1e 	bne	r9,zero,1008d90 <___vfiprintf_internal_r+0x9e0>
 10087a4:	0013883a 	mov	r9,zero
 10087a8:	0027883a 	mov	r19,zero
 10087ac:	dd401a04 	addi	r21,sp,104
 10087b0:	4825883a 	mov	r18,r9
 10087b4:	4cc0010e 	bge	r9,r19,10087bc <___vfiprintf_internal_r+0x40c>
 10087b8:	9825883a 	mov	r18,r19
 10087bc:	e7003fcc 	andi	fp,fp,255
 10087c0:	e700201c 	xori	fp,fp,128
 10087c4:	e73fe004 	addi	fp,fp,-128
 10087c8:	e0000126 	beq	fp,zero,10087d0 <___vfiprintf_internal_r+0x420>
 10087cc:	94800044 	addi	r18,r18,1
 10087d0:	a380008c 	andi	r14,r20,2
 10087d4:	70000126 	beq	r14,zero,10087dc <___vfiprintf_internal_r+0x42c>
 10087d8:	94800084 	addi	r18,r18,2
 10087dc:	a700210c 	andi	fp,r20,132
 10087e0:	e001df1e 	bne	fp,zero,1008f60 <___vfiprintf_internal_r+0xbb0>
 10087e4:	8c87c83a 	sub	r3,r17,r18
 10087e8:	00c1dd0e 	bge	zero,r3,1008f60 <___vfiprintf_internal_r+0xbb0>
 10087ec:	01c00404 	movi	r7,16
 10087f0:	d8801c17 	ldw	r2,112(sp)
 10087f4:	38c3ad0e 	bge	r7,r3,10096ac <___vfiprintf_internal_r+0x12fc>
 10087f8:	02804074 	movhi	r10,257
 10087fc:	52bfc304 	addi	r10,r10,-244
 1008800:	dc002915 	stw	r16,164(sp)
 1008804:	d9801b17 	ldw	r6,108(sp)
 1008808:	da802415 	stw	r10,144(sp)
 100880c:	03c001c4 	movi	r15,7
 1008810:	da402515 	stw	r9,148(sp)
 1008814:	db802815 	stw	r14,160(sp)
 1008818:	1821883a 	mov	r16,r3
 100881c:	00000506 	br	1008834 <___vfiprintf_internal_r+0x484>
 1008820:	31400084 	addi	r5,r6,2
 1008824:	42000204 	addi	r8,r8,8
 1008828:	200d883a 	mov	r6,r4
 100882c:	843ffc04 	addi	r16,r16,-16
 1008830:	3c000d0e 	bge	r7,r16,1008868 <___vfiprintf_internal_r+0x4b8>
 1008834:	10800404 	addi	r2,r2,16
 1008838:	31000044 	addi	r4,r6,1
 100883c:	45800015 	stw	r22,0(r8)
 1008840:	41c00115 	stw	r7,4(r8)
 1008844:	d8801c15 	stw	r2,112(sp)
 1008848:	d9001b15 	stw	r4,108(sp)
 100884c:	793ff40e 	bge	r15,r4,1008820 <___vfiprintf_internal_r+0x470>
 1008850:	1001b51e 	bne	r2,zero,1008f28 <___vfiprintf_internal_r+0xb78>
 1008854:	843ffc04 	addi	r16,r16,-16
 1008858:	000d883a 	mov	r6,zero
 100885c:	01400044 	movi	r5,1
 1008860:	d811883a 	mov	r8,sp
 1008864:	3c3ff316 	blt	r7,r16,1008834 <___vfiprintf_internal_r+0x484>
 1008868:	8007883a 	mov	r3,r16
 100886c:	da402517 	ldw	r9,148(sp)
 1008870:	db802817 	ldw	r14,160(sp)
 1008874:	dc002917 	ldw	r16,164(sp)
 1008878:	da802417 	ldw	r10,144(sp)
 100887c:	1885883a 	add	r2,r3,r2
 1008880:	40c00115 	stw	r3,4(r8)
 1008884:	42800015 	stw	r10,0(r8)
 1008888:	d8801c15 	stw	r2,112(sp)
 100888c:	d9401b15 	stw	r5,108(sp)
 1008890:	00c001c4 	movi	r3,7
 1008894:	19426016 	blt	r3,r5,1009218 <___vfiprintf_internal_r+0xe68>
 1008898:	d8c01d87 	ldb	r3,118(sp)
 100889c:	42000204 	addi	r8,r8,8
 10088a0:	29000044 	addi	r4,r5,1
 10088a4:	1801b31e 	bne	r3,zero,1008f74 <___vfiprintf_internal_r+0xbc4>
 10088a8:	7001c026 	beq	r14,zero,1008fac <___vfiprintf_internal_r+0xbfc>
 10088ac:	d8c01d04 	addi	r3,sp,116
 10088b0:	10800084 	addi	r2,r2,2
 10088b4:	40c00015 	stw	r3,0(r8)
 10088b8:	00c00084 	movi	r3,2
 10088bc:	40c00115 	stw	r3,4(r8)
 10088c0:	d8801c15 	stw	r2,112(sp)
 10088c4:	d9001b15 	stw	r4,108(sp)
 10088c8:	00c001c4 	movi	r3,7
 10088cc:	1902650e 	bge	r3,r4,1009264 <___vfiprintf_internal_r+0xeb4>
 10088d0:	10029a1e 	bne	r2,zero,100933c <___vfiprintf_internal_r+0xf8c>
 10088d4:	00c02004 	movi	r3,128
 10088d8:	01000044 	movi	r4,1
 10088dc:	000b883a 	mov	r5,zero
 10088e0:	d811883a 	mov	r8,sp
 10088e4:	e0c1b31e 	bne	fp,r3,1008fb4 <___vfiprintf_internal_r+0xc04>
 10088e8:	8cb9c83a 	sub	fp,r17,r18
 10088ec:	0701b10e 	bge	zero,fp,1008fb4 <___vfiprintf_internal_r+0xc04>
 10088f0:	01c00404 	movi	r7,16
 10088f4:	3f03890e 	bge	r7,fp,100971c <___vfiprintf_internal_r+0x136c>
 10088f8:	00c04074 	movhi	r3,257
 10088fc:	18ffbf04 	addi	r3,r3,-260
 1008900:	d8c02415 	stw	r3,144(sp)
 1008904:	8007883a 	mov	r3,r16
 1008908:	034001c4 	movi	r13,7
 100890c:	e021883a 	mov	r16,fp
 1008910:	da402515 	stw	r9,148(sp)
 1008914:	1839883a 	mov	fp,r3
 1008918:	00000506 	br	1008930 <___vfiprintf_internal_r+0x580>
 100891c:	29800084 	addi	r6,r5,2
 1008920:	42000204 	addi	r8,r8,8
 1008924:	180b883a 	mov	r5,r3
 1008928:	843ffc04 	addi	r16,r16,-16
 100892c:	3c000d0e 	bge	r7,r16,1008964 <___vfiprintf_internal_r+0x5b4>
 1008930:	10800404 	addi	r2,r2,16
 1008934:	28c00044 	addi	r3,r5,1
 1008938:	45c00015 	stw	r23,0(r8)
 100893c:	41c00115 	stw	r7,4(r8)
 1008940:	d8801c15 	stw	r2,112(sp)
 1008944:	d8c01b15 	stw	r3,108(sp)
 1008948:	68fff40e 	bge	r13,r3,100891c <___vfiprintf_internal_r+0x56c>
 100894c:	1002241e 	bne	r2,zero,10091e0 <___vfiprintf_internal_r+0xe30>
 1008950:	843ffc04 	addi	r16,r16,-16
 1008954:	01800044 	movi	r6,1
 1008958:	000b883a 	mov	r5,zero
 100895c:	d811883a 	mov	r8,sp
 1008960:	3c3ff316 	blt	r7,r16,1008930 <___vfiprintf_internal_r+0x580>
 1008964:	da402517 	ldw	r9,148(sp)
 1008968:	e007883a 	mov	r3,fp
 100896c:	8039883a 	mov	fp,r16
 1008970:	1821883a 	mov	r16,r3
 1008974:	d8c02417 	ldw	r3,144(sp)
 1008978:	1705883a 	add	r2,r2,fp
 100897c:	47000115 	stw	fp,4(r8)
 1008980:	40c00015 	stw	r3,0(r8)
 1008984:	d8801c15 	stw	r2,112(sp)
 1008988:	d9801b15 	stw	r6,108(sp)
 100898c:	00c001c4 	movi	r3,7
 1008990:	19827616 	blt	r3,r6,100936c <___vfiprintf_internal_r+0xfbc>
 1008994:	4cf9c83a 	sub	fp,r9,r19
 1008998:	42000204 	addi	r8,r8,8
 100899c:	31000044 	addi	r4,r6,1
 10089a0:	300b883a 	mov	r5,r6
 10089a4:	07018516 	blt	zero,fp,1008fbc <___vfiprintf_internal_r+0xc0c>
 10089a8:	9885883a 	add	r2,r19,r2
 10089ac:	45400015 	stw	r21,0(r8)
 10089b0:	44c00115 	stw	r19,4(r8)
 10089b4:	d8801c15 	stw	r2,112(sp)
 10089b8:	d9001b15 	stw	r4,108(sp)
 10089bc:	00c001c4 	movi	r3,7
 10089c0:	1901dd0e 	bge	r3,r4,1009138 <___vfiprintf_internal_r+0xd88>
 10089c4:	1002401e 	bne	r2,zero,10092c8 <___vfiprintf_internal_r+0xf18>
 10089c8:	d8001b15 	stw	zero,108(sp)
 10089cc:	a2c0010c 	andi	r11,r20,4
 10089d0:	58000226 	beq	r11,zero,10089dc <___vfiprintf_internal_r+0x62c>
 10089d4:	8ca7c83a 	sub	r19,r17,r18
 10089d8:	04c2f216 	blt	zero,r19,10095a4 <___vfiprintf_internal_r+0x11f4>
 10089dc:	8c80010e 	bge	r17,r18,10089e4 <___vfiprintf_internal_r+0x634>
 10089e0:	9023883a 	mov	r17,r18
 10089e4:	da802317 	ldw	r10,140(sp)
 10089e8:	5455883a 	add	r10,r10,r17
 10089ec:	da802315 	stw	r10,140(sp)
 10089f0:	d8001b15 	stw	zero,108(sp)
 10089f4:	d811883a 	mov	r8,sp
 10089f8:	003ea206 	br	1008484 <___vfiprintf_internal_r+0xd4>
 10089fc:	a5000814 	ori	r20,r20,32
 1008a00:	80c00007 	ldb	r3,0(r16)
 1008a04:	003ec906 	br	100852c <___vfiprintf_internal_r+0x17c>
 1008a08:	80c00007 	ldb	r3,0(r16)
 1008a0c:	1b030926 	beq	r3,r12,1009634 <___vfiprintf_internal_r+0x1284>
 1008a10:	a5000414 	ori	r20,r20,16
 1008a14:	003ec506 	br	100852c <___vfiprintf_internal_r+0x17c>
 1008a18:	21003fcc 	andi	r4,r4,255
 1008a1c:	20035e1e 	bne	r4,zero,1009798 <___vfiprintf_internal_r+0x13e8>
 1008a20:	a080080c 	andi	r2,r20,32
 1008a24:	1002a526 	beq	r2,zero,10094bc <___vfiprintf_internal_r+0x110c>
 1008a28:	da802217 	ldw	r10,136(sp)
 1008a2c:	50800017 	ldw	r2,0(r10)
 1008a30:	da802317 	ldw	r10,140(sp)
 1008a34:	5007d7fa 	srai	r3,r10,31
 1008a38:	da802217 	ldw	r10,136(sp)
 1008a3c:	10c00115 	stw	r3,4(r2)
 1008a40:	52800104 	addi	r10,r10,4
 1008a44:	da802215 	stw	r10,136(sp)
 1008a48:	da802317 	ldw	r10,140(sp)
 1008a4c:	12800015 	stw	r10,0(r2)
 1008a50:	003e8c06 	br	1008484 <___vfiprintf_internal_r+0xd4>
 1008a54:	21003fcc 	andi	r4,r4,255
 1008a58:	2003511e 	bne	r4,zero,10097a0 <___vfiprintf_internal_r+0x13f0>
 1008a5c:	a080080c 	andi	r2,r20,32
 1008a60:	1000a126 	beq	r2,zero,1008ce8 <___vfiprintf_internal_r+0x938>
 1008a64:	da802217 	ldw	r10,136(sp)
 1008a68:	d8001d85 	stb	zero,118(sp)
 1008a6c:	50800204 	addi	r2,r10,8
 1008a70:	54800017 	ldw	r18,0(r10)
 1008a74:	54c00117 	ldw	r19,4(r10)
 1008a78:	4802b416 	blt	r9,zero,100954c <___vfiprintf_internal_r+0x119c>
 1008a7c:	013fdfc4 	movi	r4,-129
 1008a80:	94c6b03a 	or	r3,r18,r19
 1008a84:	d8802215 	stw	r2,136(sp)
 1008a88:	a128703a 	and	r20,r20,r4
 1008a8c:	1800a226 	beq	r3,zero,1008d18 <___vfiprintf_internal_r+0x968>
 1008a90:	0039883a 	mov	fp,zero
 1008a94:	dd401a04 	addi	r21,sp,104
 1008a98:	9006d0fa 	srli	r3,r18,3
 1008a9c:	9808977a 	slli	r4,r19,29
 1008aa0:	9826d0fa 	srli	r19,r19,3
 1008aa4:	948001cc 	andi	r18,r18,7
 1008aa8:	90800c04 	addi	r2,r18,48
 1008aac:	ad7fffc4 	addi	r21,r21,-1
 1008ab0:	20e4b03a 	or	r18,r4,r3
 1008ab4:	a8800005 	stb	r2,0(r21)
 1008ab8:	94c6b03a 	or	r3,r18,r19
 1008abc:	183ff61e 	bne	r3,zero,1008a98 <___vfiprintf_internal_r+0x6e8>
 1008ac0:	a0c0004c 	andi	r3,r20,1
 1008ac4:	18005926 	beq	r3,zero,1008c2c <___vfiprintf_internal_r+0x87c>
 1008ac8:	10803fcc 	andi	r2,r2,255
 1008acc:	1080201c 	xori	r2,r2,128
 1008ad0:	10bfe004 	addi	r2,r2,-128
 1008ad4:	00c00c04 	movi	r3,48
 1008ad8:	10c05426 	beq	r2,r3,1008c2c <___vfiprintf_internal_r+0x87c>
 1008adc:	da801e17 	ldw	r10,120(sp)
 1008ae0:	a8bfffc4 	addi	r2,r21,-1
 1008ae4:	a8ffffc5 	stb	r3,-1(r21)
 1008ae8:	50a7c83a 	sub	r19,r10,r2
 1008aec:	102b883a 	mov	r21,r2
 1008af0:	003f2f06 	br	10087b0 <___vfiprintf_internal_r+0x400>
 1008af4:	21003fcc 	andi	r4,r4,255
 1008af8:	2003421e 	bne	r4,zero,1009804 <___vfiprintf_internal_r+0x1454>
 1008afc:	00804074 	movhi	r2,257
 1008b00:	10bf5e04 	addi	r2,r2,-648
 1008b04:	d8802615 	stw	r2,152(sp)
 1008b08:	a080080c 	andi	r2,r20,32
 1008b0c:	1000aa26 	beq	r2,zero,1008db8 <___vfiprintf_internal_r+0xa08>
 1008b10:	da802217 	ldw	r10,136(sp)
 1008b14:	54800017 	ldw	r18,0(r10)
 1008b18:	54c00117 	ldw	r19,4(r10)
 1008b1c:	52800204 	addi	r10,r10,8
 1008b20:	da802215 	stw	r10,136(sp)
 1008b24:	a080004c 	andi	r2,r20,1
 1008b28:	1001d226 	beq	r2,zero,1009274 <___vfiprintf_internal_r+0xec4>
 1008b2c:	94c4b03a 	or	r2,r18,r19
 1008b30:	1002351e 	bne	r2,zero,1009408 <___vfiprintf_internal_r+0x1058>
 1008b34:	d8001d85 	stb	zero,118(sp)
 1008b38:	48022216 	blt	r9,zero,10093c4 <___vfiprintf_internal_r+0x1014>
 1008b3c:	00bfdfc4 	movi	r2,-129
 1008b40:	a0a8703a 	and	r20,r20,r2
 1008b44:	003f1506 	br	100879c <___vfiprintf_internal_r+0x3ec>
 1008b48:	da802217 	ldw	r10,136(sp)
 1008b4c:	04800044 	movi	r18,1
 1008b50:	d8001d85 	stb	zero,118(sp)
 1008b54:	50800017 	ldw	r2,0(r10)
 1008b58:	52800104 	addi	r10,r10,4
 1008b5c:	da802215 	stw	r10,136(sp)
 1008b60:	d8801005 	stb	r2,64(sp)
 1008b64:	9027883a 	mov	r19,r18
 1008b68:	dd401004 	addi	r21,sp,64
 1008b6c:	0013883a 	mov	r9,zero
 1008b70:	003f1706 	br	10087d0 <___vfiprintf_internal_r+0x420>
 1008b74:	21003fcc 	andi	r4,r4,255
 1008b78:	2003201e 	bne	r4,zero,10097fc <___vfiprintf_internal_r+0x144c>
 1008b7c:	a080080c 	andi	r2,r20,32
 1008b80:	10004b26 	beq	r2,zero,1008cb0 <___vfiprintf_internal_r+0x900>
 1008b84:	da802217 	ldw	r10,136(sp)
 1008b88:	50800117 	ldw	r2,4(r10)
 1008b8c:	54800017 	ldw	r18,0(r10)
 1008b90:	52800204 	addi	r10,r10,8
 1008b94:	da802215 	stw	r10,136(sp)
 1008b98:	1027883a 	mov	r19,r2
 1008b9c:	10022c16 	blt	r2,zero,1009450 <___vfiprintf_internal_r+0x10a0>
 1008ba0:	df001d83 	ldbu	fp,118(sp)
 1008ba4:	48007216 	blt	r9,zero,1008d70 <___vfiprintf_internal_r+0x9c0>
 1008ba8:	00ffdfc4 	movi	r3,-129
 1008bac:	94c4b03a 	or	r2,r18,r19
 1008bb0:	a0e8703a 	and	r20,r20,r3
 1008bb4:	1000cc26 	beq	r2,zero,1008ee8 <___vfiprintf_internal_r+0xb38>
 1008bb8:	98021026 	beq	r19,zero,10093fc <___vfiprintf_internal_r+0x104c>
 1008bbc:	dc402415 	stw	r17,144(sp)
 1008bc0:	dc002515 	stw	r16,148(sp)
 1008bc4:	9823883a 	mov	r17,r19
 1008bc8:	9021883a 	mov	r16,r18
 1008bcc:	dd401a04 	addi	r21,sp,104
 1008bd0:	4825883a 	mov	r18,r9
 1008bd4:	4027883a 	mov	r19,r8
 1008bd8:	8009883a 	mov	r4,r16
 1008bdc:	880b883a 	mov	r5,r17
 1008be0:	01800284 	movi	r6,10
 1008be4:	000f883a 	mov	r7,zero
 1008be8:	100a7900 	call	100a790 <__umoddi3>
 1008bec:	10800c04 	addi	r2,r2,48
 1008bf0:	ad7fffc4 	addi	r21,r21,-1
 1008bf4:	8009883a 	mov	r4,r16
 1008bf8:	880b883a 	mov	r5,r17
 1008bfc:	a8800005 	stb	r2,0(r21)
 1008c00:	01800284 	movi	r6,10
 1008c04:	000f883a 	mov	r7,zero
 1008c08:	100a2180 	call	100a218 <__udivdi3>
 1008c0c:	1021883a 	mov	r16,r2
 1008c10:	10c4b03a 	or	r2,r2,r3
 1008c14:	1823883a 	mov	r17,r3
 1008c18:	103fef1e 	bne	r2,zero,1008bd8 <___vfiprintf_internal_r+0x828>
 1008c1c:	dc402417 	ldw	r17,144(sp)
 1008c20:	dc002517 	ldw	r16,148(sp)
 1008c24:	9013883a 	mov	r9,r18
 1008c28:	9811883a 	mov	r8,r19
 1008c2c:	da801e17 	ldw	r10,120(sp)
 1008c30:	5567c83a 	sub	r19,r10,r21
 1008c34:	003ede06 	br	10087b0 <___vfiprintf_internal_r+0x400>
 1008c38:	38803fcc 	andi	r2,r7,255
 1008c3c:	1080201c 	xori	r2,r2,128
 1008c40:	10bfe004 	addi	r2,r2,-128
 1008c44:	1002371e 	bne	r2,zero,1009524 <___vfiprintf_internal_r+0x1174>
 1008c48:	01000044 	movi	r4,1
 1008c4c:	01c00804 	movi	r7,32
 1008c50:	80c00007 	ldb	r3,0(r16)
 1008c54:	003e3506 	br	100852c <___vfiprintf_internal_r+0x17c>
 1008c58:	a5000054 	ori	r20,r20,1
 1008c5c:	80c00007 	ldb	r3,0(r16)
 1008c60:	003e3206 	br	100852c <___vfiprintf_internal_r+0x17c>
 1008c64:	a5002014 	ori	r20,r20,128
 1008c68:	80c00007 	ldb	r3,0(r16)
 1008c6c:	003e2f06 	br	100852c <___vfiprintf_internal_r+0x17c>
 1008c70:	8015883a 	mov	r10,r16
 1008c74:	0023883a 	mov	r17,zero
 1008c78:	18bff404 	addi	r2,r3,-48
 1008c7c:	50c00007 	ldb	r3,0(r10)
 1008c80:	8c4002a4 	muli	r17,r17,10
 1008c84:	84000044 	addi	r16,r16,1
 1008c88:	8015883a 	mov	r10,r16
 1008c8c:	1463883a 	add	r17,r2,r17
 1008c90:	18bff404 	addi	r2,r3,-48
 1008c94:	30bff92e 	bgeu	r6,r2,1008c7c <___vfiprintf_internal_r+0x8cc>
 1008c98:	003e2506 	br	1008530 <___vfiprintf_internal_r+0x180>
 1008c9c:	21003fcc 	andi	r4,r4,255
 1008ca0:	2002d41e 	bne	r4,zero,10097f4 <___vfiprintf_internal_r+0x1444>
 1008ca4:	a5000414 	ori	r20,r20,16
 1008ca8:	a080080c 	andi	r2,r20,32
 1008cac:	103fb51e 	bne	r2,zero,1008b84 <___vfiprintf_internal_r+0x7d4>
 1008cb0:	a080040c 	andi	r2,r20,16
 1008cb4:	1001f826 	beq	r2,zero,1009498 <___vfiprintf_internal_r+0x10e8>
 1008cb8:	da802217 	ldw	r10,136(sp)
 1008cbc:	54800017 	ldw	r18,0(r10)
 1008cc0:	52800104 	addi	r10,r10,4
 1008cc4:	da802215 	stw	r10,136(sp)
 1008cc8:	9027d7fa 	srai	r19,r18,31
 1008ccc:	9805883a 	mov	r2,r19
 1008cd0:	003fb206 	br	1008b9c <___vfiprintf_internal_r+0x7ec>
 1008cd4:	21003fcc 	andi	r4,r4,255
 1008cd8:	2002c41e 	bne	r4,zero,10097ec <___vfiprintf_internal_r+0x143c>
 1008cdc:	a5000414 	ori	r20,r20,16
 1008ce0:	a080080c 	andi	r2,r20,32
 1008ce4:	103f5f1e 	bne	r2,zero,1008a64 <___vfiprintf_internal_r+0x6b4>
 1008ce8:	a080040c 	andi	r2,r20,16
 1008cec:	10020f26 	beq	r2,zero,100952c <___vfiprintf_internal_r+0x117c>
 1008cf0:	da802217 	ldw	r10,136(sp)
 1008cf4:	d8001d85 	stb	zero,118(sp)
 1008cf8:	0027883a 	mov	r19,zero
 1008cfc:	50800104 	addi	r2,r10,4
 1008d00:	54800017 	ldw	r18,0(r10)
 1008d04:	48021116 	blt	r9,zero,100954c <___vfiprintf_internal_r+0x119c>
 1008d08:	00ffdfc4 	movi	r3,-129
 1008d0c:	d8802215 	stw	r2,136(sp)
 1008d10:	a0e8703a 	and	r20,r20,r3
 1008d14:	903f5e1e 	bne	r18,zero,1008a90 <___vfiprintf_internal_r+0x6e0>
 1008d18:	0039883a 	mov	fp,zero
 1008d1c:	4802a626 	beq	r9,zero,10097b8 <___vfiprintf_internal_r+0x1408>
 1008d20:	0025883a 	mov	r18,zero
 1008d24:	0027883a 	mov	r19,zero
 1008d28:	003f5a06 	br	1008a94 <___vfiprintf_internal_r+0x6e4>
 1008d2c:	21003fcc 	andi	r4,r4,255
 1008d30:	20029f1e 	bne	r4,zero,10097b0 <___vfiprintf_internal_r+0x1400>
 1008d34:	a5000414 	ori	r20,r20,16
 1008d38:	a080080c 	andi	r2,r20,32
 1008d3c:	10005e1e 	bne	r2,zero,1008eb8 <___vfiprintf_internal_r+0xb08>
 1008d40:	a080040c 	andi	r2,r20,16
 1008d44:	1001a21e 	bne	r2,zero,10093d0 <___vfiprintf_internal_r+0x1020>
 1008d48:	a080100c 	andi	r2,r20,64
 1008d4c:	d8001d85 	stb	zero,118(sp)
 1008d50:	da802217 	ldw	r10,136(sp)
 1008d54:	1002231e 	bne	r2,zero,10095e4 <___vfiprintf_internal_r+0x1234>
 1008d58:	50800104 	addi	r2,r10,4
 1008d5c:	54800017 	ldw	r18,0(r10)
 1008d60:	0027883a 	mov	r19,zero
 1008d64:	4801a00e 	bge	r9,zero,10093e8 <___vfiprintf_internal_r+0x1038>
 1008d68:	d8802215 	stw	r2,136(sp)
 1008d6c:	0039883a 	mov	fp,zero
 1008d70:	94c4b03a 	or	r2,r18,r19
 1008d74:	103f901e 	bne	r2,zero,1008bb8 <___vfiprintf_internal_r+0x808>
 1008d78:	00800044 	movi	r2,1
 1008d7c:	10803fcc 	andi	r2,r2,255
 1008d80:	00c00044 	movi	r3,1
 1008d84:	10c05926 	beq	r2,r3,1008eec <___vfiprintf_internal_r+0xb3c>
 1008d88:	00c00084 	movi	r3,2
 1008d8c:	10ffe41e 	bne	r2,r3,1008d20 <___vfiprintf_internal_r+0x970>
 1008d90:	0025883a 	mov	r18,zero
 1008d94:	0027883a 	mov	r19,zero
 1008d98:	00013d06 	br	1009290 <___vfiprintf_internal_r+0xee0>
 1008d9c:	21003fcc 	andi	r4,r4,255
 1008da0:	2002811e 	bne	r4,zero,10097a8 <___vfiprintf_internal_r+0x13f8>
 1008da4:	00804074 	movhi	r2,257
 1008da8:	10bf5904 	addi	r2,r2,-668
 1008dac:	d8802615 	stw	r2,152(sp)
 1008db0:	a080080c 	andi	r2,r20,32
 1008db4:	103f561e 	bne	r2,zero,1008b10 <___vfiprintf_internal_r+0x760>
 1008db8:	a080040c 	andi	r2,r20,16
 1008dbc:	1001d126 	beq	r2,zero,1009504 <___vfiprintf_internal_r+0x1154>
 1008dc0:	da802217 	ldw	r10,136(sp)
 1008dc4:	0027883a 	mov	r19,zero
 1008dc8:	54800017 	ldw	r18,0(r10)
 1008dcc:	52800104 	addi	r10,r10,4
 1008dd0:	da802215 	stw	r10,136(sp)
 1008dd4:	003f5306 	br	1008b24 <___vfiprintf_internal_r+0x774>
 1008dd8:	da802217 	ldw	r10,136(sp)
 1008ddc:	d8001d85 	stb	zero,118(sp)
 1008de0:	55400017 	ldw	r21,0(r10)
 1008de4:	50c00104 	addi	r3,r10,4
 1008de8:	a8024226 	beq	r21,zero,10096f4 <___vfiprintf_internal_r+0x1344>
 1008dec:	48021816 	blt	r9,zero,1009650 <___vfiprintf_internal_r+0x12a0>
 1008df0:	480d883a 	mov	r6,r9
 1008df4:	000b883a 	mov	r5,zero
 1008df8:	a809883a 	mov	r4,r21
 1008dfc:	d8c02a15 	stw	r3,168(sp)
 1008e00:	da002b15 	stw	r8,172(sp)
 1008e04:	da402c15 	stw	r9,176(sp)
 1008e08:	10065ac0 	call	10065ac <memchr>
 1008e0c:	d8c02a17 	ldw	r3,168(sp)
 1008e10:	da002b17 	ldw	r8,172(sp)
 1008e14:	da402c17 	ldw	r9,176(sp)
 1008e18:	10024826 	beq	r2,zero,100973c <___vfiprintf_internal_r+0x138c>
 1008e1c:	1567c83a 	sub	r19,r2,r21
 1008e20:	df001d83 	ldbu	fp,118(sp)
 1008e24:	d8c02215 	stw	r3,136(sp)
 1008e28:	0013883a 	mov	r9,zero
 1008e2c:	003e6006 	br	10087b0 <___vfiprintf_internal_r+0x400>
 1008e30:	21003fcc 	andi	r4,r4,255
 1008e34:	203fc026 	beq	r4,zero,1008d38 <___vfiprintf_internal_r+0x988>
 1008e38:	d9c01d85 	stb	r7,118(sp)
 1008e3c:	003fbe06 	br	1008d38 <___vfiprintf_internal_r+0x988>
 1008e40:	da802217 	ldw	r10,136(sp)
 1008e44:	54400017 	ldw	r17,0(r10)
 1008e48:	50800104 	addi	r2,r10,4
 1008e4c:	883e3b16 	blt	r17,zero,100873c <___vfiprintf_internal_r+0x38c>
 1008e50:	d8802215 	stw	r2,136(sp)
 1008e54:	80c00007 	ldb	r3,0(r16)
 1008e58:	003db406 	br	100852c <___vfiprintf_internal_r+0x17c>
 1008e5c:	01000044 	movi	r4,1
 1008e60:	01c00ac4 	movi	r7,43
 1008e64:	80c00007 	ldb	r3,0(r16)
 1008e68:	003db006 	br	100852c <___vfiprintf_internal_r+0x17c>
 1008e6c:	80c00007 	ldb	r3,0(r16)
 1008e70:	82800044 	addi	r10,r16,1
 1008e74:	1b423c26 	beq	r3,r13,1009768 <___vfiprintf_internal_r+0x13b8>
 1008e78:	18bff404 	addi	r2,r3,-48
 1008e7c:	0013883a 	mov	r9,zero
 1008e80:	30822b36 	bltu	r6,r2,1009730 <___vfiprintf_internal_r+0x1380>
 1008e84:	50c00007 	ldb	r3,0(r10)
 1008e88:	4a4002a4 	muli	r9,r9,10
 1008e8c:	54000044 	addi	r16,r10,1
 1008e90:	8015883a 	mov	r10,r16
 1008e94:	4893883a 	add	r9,r9,r2
 1008e98:	18bff404 	addi	r2,r3,-48
 1008e9c:	30bff92e 	bgeu	r6,r2,1008e84 <___vfiprintf_internal_r+0xad4>
 1008ea0:	483da30e 	bge	r9,zero,1008530 <___vfiprintf_internal_r+0x180>
 1008ea4:	027fffc4 	movi	r9,-1
 1008ea8:	003da106 	br	1008530 <___vfiprintf_internal_r+0x180>
 1008eac:	a5001014 	ori	r20,r20,64
 1008eb0:	80c00007 	ldb	r3,0(r16)
 1008eb4:	003d9d06 	br	100852c <___vfiprintf_internal_r+0x17c>
 1008eb8:	da802217 	ldw	r10,136(sp)
 1008ebc:	d8001d85 	stb	zero,118(sp)
 1008ec0:	50c00204 	addi	r3,r10,8
 1008ec4:	54800017 	ldw	r18,0(r10)
 1008ec8:	54c00117 	ldw	r19,4(r10)
 1008ecc:	4801ca16 	blt	r9,zero,10095f8 <___vfiprintf_internal_r+0x1248>
 1008ed0:	013fdfc4 	movi	r4,-129
 1008ed4:	94c4b03a 	or	r2,r18,r19
 1008ed8:	d8c02215 	stw	r3,136(sp)
 1008edc:	a128703a 	and	r20,r20,r4
 1008ee0:	0039883a 	mov	fp,zero
 1008ee4:	103f341e 	bne	r2,zero,1008bb8 <___vfiprintf_internal_r+0x808>
 1008ee8:	483e2e26 	beq	r9,zero,10087a4 <___vfiprintf_internal_r+0x3f4>
 1008eec:	0025883a 	mov	r18,zero
 1008ef0:	94800c04 	addi	r18,r18,48
 1008ef4:	dc8019c5 	stb	r18,103(sp)
 1008ef8:	dcc02717 	ldw	r19,156(sp)
 1008efc:	dd4019c4 	addi	r21,sp,103
 1008f00:	003e2b06 	br	10087b0 <___vfiprintf_internal_r+0x400>
 1008f04:	21003fcc 	andi	r4,r4,255
 1008f08:	2002361e 	bne	r4,zero,10097e4 <___vfiprintf_internal_r+0x1434>
 1008f0c:	1801c126 	beq	r3,zero,1009614 <___vfiprintf_internal_r+0x1264>
 1008f10:	04800044 	movi	r18,1
 1008f14:	d8c01005 	stb	r3,64(sp)
 1008f18:	d8001d85 	stb	zero,118(sp)
 1008f1c:	9027883a 	mov	r19,r18
 1008f20:	dd401004 	addi	r21,sp,64
 1008f24:	003f1106 	br	1008b6c <___vfiprintf_internal_r+0x7bc>
 1008f28:	d9402117 	ldw	r5,132(sp)
 1008f2c:	d9002017 	ldw	r4,128(sp)
 1008f30:	d9801a04 	addi	r6,sp,104
 1008f34:	d9c02b15 	stw	r7,172(sp)
 1008f38:	dbc02a15 	stw	r15,168(sp)
 1008f3c:	100829c0 	call	100829c <__sprint_r.part.0>
 1008f40:	d9c02b17 	ldw	r7,172(sp)
 1008f44:	dbc02a17 	ldw	r15,168(sp)
 1008f48:	10006d1e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 1008f4c:	d9801b17 	ldw	r6,108(sp)
 1008f50:	d8801c17 	ldw	r2,112(sp)
 1008f54:	d811883a 	mov	r8,sp
 1008f58:	31400044 	addi	r5,r6,1
 1008f5c:	003e3306 	br	100882c <___vfiprintf_internal_r+0x47c>
 1008f60:	d9401b17 	ldw	r5,108(sp)
 1008f64:	d8801c17 	ldw	r2,112(sp)
 1008f68:	29000044 	addi	r4,r5,1
 1008f6c:	d8c01d87 	ldb	r3,118(sp)
 1008f70:	183e4d26 	beq	r3,zero,10088a8 <___vfiprintf_internal_r+0x4f8>
 1008f74:	00c00044 	movi	r3,1
 1008f78:	d9401d84 	addi	r5,sp,118
 1008f7c:	10c5883a 	add	r2,r2,r3
 1008f80:	41400015 	stw	r5,0(r8)
 1008f84:	40c00115 	stw	r3,4(r8)
 1008f88:	d8801c15 	stw	r2,112(sp)
 1008f8c:	d9001b15 	stw	r4,108(sp)
 1008f90:	014001c4 	movi	r5,7
 1008f94:	2900a90e 	bge	r5,r4,100923c <___vfiprintf_internal_r+0xe8c>
 1008f98:	1000da1e 	bne	r2,zero,1009304 <___vfiprintf_internal_r+0xf54>
 1008f9c:	7000ab1e 	bne	r14,zero,100924c <___vfiprintf_internal_r+0xe9c>
 1008fa0:	000b883a 	mov	r5,zero
 1008fa4:	1809883a 	mov	r4,r3
 1008fa8:	d811883a 	mov	r8,sp
 1008fac:	00c02004 	movi	r3,128
 1008fb0:	e0fe4d26 	beq	fp,r3,10088e8 <___vfiprintf_internal_r+0x538>
 1008fb4:	4cf9c83a 	sub	fp,r9,r19
 1008fb8:	073e7b0e 	bge	zero,fp,10089a8 <___vfiprintf_internal_r+0x5f8>
 1008fbc:	01c00404 	movi	r7,16
 1008fc0:	3f01900e 	bge	r7,fp,1009604 <___vfiprintf_internal_r+0x1254>
 1008fc4:	00c04074 	movhi	r3,257
 1008fc8:	18ffbf04 	addi	r3,r3,-260
 1008fcc:	d8c02415 	stw	r3,144(sp)
 1008fd0:	034001c4 	movi	r13,7
 1008fd4:	00000506 	br	1008fec <___vfiprintf_internal_r+0xc3c>
 1008fd8:	29000084 	addi	r4,r5,2
 1008fdc:	42000204 	addi	r8,r8,8
 1008fe0:	180b883a 	mov	r5,r3
 1008fe4:	e73ffc04 	addi	fp,fp,-16
 1008fe8:	3f000d0e 	bge	r7,fp,1009020 <___vfiprintf_internal_r+0xc70>
 1008fec:	10800404 	addi	r2,r2,16
 1008ff0:	28c00044 	addi	r3,r5,1
 1008ff4:	45c00015 	stw	r23,0(r8)
 1008ff8:	41c00115 	stw	r7,4(r8)
 1008ffc:	d8801c15 	stw	r2,112(sp)
 1009000:	d8c01b15 	stw	r3,108(sp)
 1009004:	68fff40e 	bge	r13,r3,1008fd8 <___vfiprintf_internal_r+0xc28>
 1009008:	1000101e 	bne	r2,zero,100904c <___vfiprintf_internal_r+0xc9c>
 100900c:	e73ffc04 	addi	fp,fp,-16
 1009010:	01000044 	movi	r4,1
 1009014:	000b883a 	mov	r5,zero
 1009018:	d811883a 	mov	r8,sp
 100901c:	3f3ff316 	blt	r7,fp,1008fec <___vfiprintf_internal_r+0xc3c>
 1009020:	da802417 	ldw	r10,144(sp)
 1009024:	1705883a 	add	r2,r2,fp
 1009028:	47000115 	stw	fp,4(r8)
 100902c:	42800015 	stw	r10,0(r8)
 1009030:	d8801c15 	stw	r2,112(sp)
 1009034:	d9001b15 	stw	r4,108(sp)
 1009038:	00c001c4 	movi	r3,7
 100903c:	19003616 	blt	r3,r4,1009118 <___vfiprintf_internal_r+0xd68>
 1009040:	42000204 	addi	r8,r8,8
 1009044:	21000044 	addi	r4,r4,1
 1009048:	003e5706 	br	10089a8 <___vfiprintf_internal_r+0x5f8>
 100904c:	d9402117 	ldw	r5,132(sp)
 1009050:	d9002017 	ldw	r4,128(sp)
 1009054:	d9801a04 	addi	r6,sp,104
 1009058:	d9c02b15 	stw	r7,172(sp)
 100905c:	db402a15 	stw	r13,168(sp)
 1009060:	100829c0 	call	100829c <__sprint_r.part.0>
 1009064:	d9c02b17 	ldw	r7,172(sp)
 1009068:	db402a17 	ldw	r13,168(sp)
 100906c:	1000241e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 1009070:	d9401b17 	ldw	r5,108(sp)
 1009074:	d8801c17 	ldw	r2,112(sp)
 1009078:	d811883a 	mov	r8,sp
 100907c:	29000044 	addi	r4,r5,1
 1009080:	003fd806 	br	1008fe4 <___vfiprintf_internal_r+0xc34>
 1009084:	d9401b17 	ldw	r5,108(sp)
 1009088:	00c04074 	movhi	r3,257
 100908c:	18ffc304 	addi	r3,r3,-244
 1009090:	d8c02415 	stw	r3,144(sp)
 1009094:	29400044 	addi	r5,r5,1
 1009098:	d8c02417 	ldw	r3,144(sp)
 100909c:	14c5883a 	add	r2,r2,r19
 10090a0:	44c00115 	stw	r19,4(r8)
 10090a4:	40c00015 	stw	r3,0(r8)
 10090a8:	d8801c15 	stw	r2,112(sp)
 10090ac:	d9401b15 	stw	r5,108(sp)
 10090b0:	00c001c4 	movi	r3,7
 10090b4:	1940070e 	bge	r3,r5,10090d4 <___vfiprintf_internal_r+0xd24>
 10090b8:	103e4826 	beq	r2,zero,10089dc <___vfiprintf_internal_r+0x62c>
 10090bc:	d9402117 	ldw	r5,132(sp)
 10090c0:	d9002017 	ldw	r4,128(sp)
 10090c4:	d9801a04 	addi	r6,sp,104
 10090c8:	100829c0 	call	100829c <__sprint_r.part.0>
 10090cc:	10000c1e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 10090d0:	d8801c17 	ldw	r2,112(sp)
 10090d4:	8c80010e 	bge	r17,r18,10090dc <___vfiprintf_internal_r+0xd2c>
 10090d8:	9023883a 	mov	r17,r18
 10090dc:	da802317 	ldw	r10,140(sp)
 10090e0:	5455883a 	add	r10,r10,r17
 10090e4:	da802315 	stw	r10,140(sp)
 10090e8:	103e4126 	beq	r2,zero,10089f0 <___vfiprintf_internal_r+0x640>
 10090ec:	d9402117 	ldw	r5,132(sp)
 10090f0:	d9002017 	ldw	r4,128(sp)
 10090f4:	d9801a04 	addi	r6,sp,104
 10090f8:	100829c0 	call	100829c <__sprint_r.part.0>
 10090fc:	103e3c26 	beq	r2,zero,10089f0 <___vfiprintf_internal_r+0x640>
 1009100:	dd002117 	ldw	r20,132(sp)
 1009104:	a080030b 	ldhu	r2,12(r20)
 1009108:	1080100c 	andi	r2,r2,64
 100910c:	1001231e 	bne	r2,zero,100959c <___vfiprintf_internal_r+0x11ec>
 1009110:	d8802317 	ldw	r2,140(sp)
 1009114:	003d7b06 	br	1008704 <___vfiprintf_internal_r+0x354>
 1009118:	1000991e 	bne	r2,zero,1009380 <___vfiprintf_internal_r+0xfd0>
 100911c:	00c00044 	movi	r3,1
 1009120:	9805883a 	mov	r2,r19
 1009124:	dd400015 	stw	r21,0(sp)
 1009128:	dcc00115 	stw	r19,4(sp)
 100912c:	dcc01c15 	stw	r19,112(sp)
 1009130:	d8c01b15 	stw	r3,108(sp)
 1009134:	d811883a 	mov	r8,sp
 1009138:	42000204 	addi	r8,r8,8
 100913c:	a2c0010c 	andi	r11,r20,4
 1009140:	583fe426 	beq	r11,zero,10090d4 <___vfiprintf_internal_r+0xd24>
 1009144:	8ca7c83a 	sub	r19,r17,r18
 1009148:	04ffe20e 	bge	zero,r19,10090d4 <___vfiprintf_internal_r+0xd24>
 100914c:	01c00404 	movi	r7,16
 1009150:	3cffcc0e 	bge	r7,r19,1009084 <___vfiprintf_internal_r+0xcd4>
 1009154:	02804074 	movhi	r10,257
 1009158:	52bfc304 	addi	r10,r10,-244
 100915c:	d9001b17 	ldw	r4,108(sp)
 1009160:	da802415 	stw	r10,144(sp)
 1009164:	382b883a 	mov	r21,r7
 1009168:	050001c4 	movi	r20,7
 100916c:	df002017 	ldw	fp,128(sp)
 1009170:	00000506 	br	1009188 <___vfiprintf_internal_r+0xdd8>
 1009174:	21400084 	addi	r5,r4,2
 1009178:	42000204 	addi	r8,r8,8
 100917c:	1809883a 	mov	r4,r3
 1009180:	9cfffc04 	addi	r19,r19,-16
 1009184:	acffc40e 	bge	r21,r19,1009098 <___vfiprintf_internal_r+0xce8>
 1009188:	10800404 	addi	r2,r2,16
 100918c:	20c00044 	addi	r3,r4,1
 1009190:	45800015 	stw	r22,0(r8)
 1009194:	45400115 	stw	r21,4(r8)
 1009198:	d8801c15 	stw	r2,112(sp)
 100919c:	d8c01b15 	stw	r3,108(sp)
 10091a0:	a0fff40e 	bge	r20,r3,1009174 <___vfiprintf_internal_r+0xdc4>
 10091a4:	1000041e 	bne	r2,zero,10091b8 <___vfiprintf_internal_r+0xe08>
 10091a8:	01400044 	movi	r5,1
 10091ac:	0009883a 	mov	r4,zero
 10091b0:	d811883a 	mov	r8,sp
 10091b4:	003ff206 	br	1009180 <___vfiprintf_internal_r+0xdd0>
 10091b8:	d9402117 	ldw	r5,132(sp)
 10091bc:	d9801a04 	addi	r6,sp,104
 10091c0:	e009883a 	mov	r4,fp
 10091c4:	100829c0 	call	100829c <__sprint_r.part.0>
 10091c8:	103fcd1e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 10091cc:	d9001b17 	ldw	r4,108(sp)
 10091d0:	d8801c17 	ldw	r2,112(sp)
 10091d4:	d811883a 	mov	r8,sp
 10091d8:	21400044 	addi	r5,r4,1
 10091dc:	003fe806 	br	1009180 <___vfiprintf_internal_r+0xdd0>
 10091e0:	d9402117 	ldw	r5,132(sp)
 10091e4:	d9002017 	ldw	r4,128(sp)
 10091e8:	d9801a04 	addi	r6,sp,104
 10091ec:	d9c02b15 	stw	r7,172(sp)
 10091f0:	db402a15 	stw	r13,168(sp)
 10091f4:	100829c0 	call	100829c <__sprint_r.part.0>
 10091f8:	d9c02b17 	ldw	r7,172(sp)
 10091fc:	db402a17 	ldw	r13,168(sp)
 1009200:	103fbf1e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 1009204:	d9401b17 	ldw	r5,108(sp)
 1009208:	d8801c17 	ldw	r2,112(sp)
 100920c:	d811883a 	mov	r8,sp
 1009210:	29800044 	addi	r6,r5,1
 1009214:	003dc406 	br	1008928 <___vfiprintf_internal_r+0x578>
 1009218:	1000d21e 	bne	r2,zero,1009564 <___vfiprintf_internal_r+0x11b4>
 100921c:	d8c01d87 	ldb	r3,118(sp)
 1009220:	18009526 	beq	r3,zero,1009478 <___vfiprintf_internal_r+0x10c8>
 1009224:	00800044 	movi	r2,1
 1009228:	d8c01d84 	addi	r3,sp,118
 100922c:	1009883a 	mov	r4,r2
 1009230:	d8c00015 	stw	r3,0(sp)
 1009234:	d8800115 	stw	r2,4(sp)
 1009238:	d811883a 	mov	r8,sp
 100923c:	200b883a 	mov	r5,r4
 1009240:	42000204 	addi	r8,r8,8
 1009244:	21000044 	addi	r4,r4,1
 1009248:	003d9706 	br	10088a8 <___vfiprintf_internal_r+0x4f8>
 100924c:	d9001d04 	addi	r4,sp,116
 1009250:	00800084 	movi	r2,2
 1009254:	d9000015 	stw	r4,0(sp)
 1009258:	d8800115 	stw	r2,4(sp)
 100925c:	1809883a 	mov	r4,r3
 1009260:	d811883a 	mov	r8,sp
 1009264:	200b883a 	mov	r5,r4
 1009268:	42000204 	addi	r8,r8,8
 100926c:	21000044 	addi	r4,r4,1
 1009270:	003f4e06 	br	1008fac <___vfiprintf_internal_r+0xbfc>
 1009274:	d8001d85 	stb	zero,118(sp)
 1009278:	48005016 	blt	r9,zero,10093bc <___vfiprintf_internal_r+0x100c>
 100927c:	00ffdfc4 	movi	r3,-129
 1009280:	94c4b03a 	or	r2,r18,r19
 1009284:	a0e8703a 	and	r20,r20,r3
 1009288:	103d4426 	beq	r2,zero,100879c <___vfiprintf_internal_r+0x3ec>
 100928c:	0039883a 	mov	fp,zero
 1009290:	d9002617 	ldw	r4,152(sp)
 1009294:	dd401a04 	addi	r21,sp,104
 1009298:	908003cc 	andi	r2,r18,15
 100929c:	9806973a 	slli	r3,r19,28
 10092a0:	2085883a 	add	r2,r4,r2
 10092a4:	9024d13a 	srli	r18,r18,4
 10092a8:	10800003 	ldbu	r2,0(r2)
 10092ac:	9826d13a 	srli	r19,r19,4
 10092b0:	ad7fffc4 	addi	r21,r21,-1
 10092b4:	1ca4b03a 	or	r18,r3,r18
 10092b8:	a8800005 	stb	r2,0(r21)
 10092bc:	94c4b03a 	or	r2,r18,r19
 10092c0:	103ff51e 	bne	r2,zero,1009298 <___vfiprintf_internal_r+0xee8>
 10092c4:	003e5906 	br	1008c2c <___vfiprintf_internal_r+0x87c>
 10092c8:	d9402117 	ldw	r5,132(sp)
 10092cc:	d9002017 	ldw	r4,128(sp)
 10092d0:	d9801a04 	addi	r6,sp,104
 10092d4:	100829c0 	call	100829c <__sprint_r.part.0>
 10092d8:	103f891e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 10092dc:	d8801c17 	ldw	r2,112(sp)
 10092e0:	d811883a 	mov	r8,sp
 10092e4:	003f9506 	br	100913c <___vfiprintf_internal_r+0xd8c>
 10092e8:	d9402117 	ldw	r5,132(sp)
 10092ec:	d9002017 	ldw	r4,128(sp)
 10092f0:	d9801a04 	addi	r6,sp,104
 10092f4:	100829c0 	call	100829c <__sprint_r.part.0>
 10092f8:	103f811e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 10092fc:	d811883a 	mov	r8,sp
 1009300:	003ced06 	br	10086b8 <___vfiprintf_internal_r+0x308>
 1009304:	d9402117 	ldw	r5,132(sp)
 1009308:	d9002017 	ldw	r4,128(sp)
 100930c:	d9801a04 	addi	r6,sp,104
 1009310:	da402c15 	stw	r9,176(sp)
 1009314:	db802a15 	stw	r14,168(sp)
 1009318:	100829c0 	call	100829c <__sprint_r.part.0>
 100931c:	da402c17 	ldw	r9,176(sp)
 1009320:	db802a17 	ldw	r14,168(sp)
 1009324:	103f761e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 1009328:	d9401b17 	ldw	r5,108(sp)
 100932c:	d8801c17 	ldw	r2,112(sp)
 1009330:	d811883a 	mov	r8,sp
 1009334:	29000044 	addi	r4,r5,1
 1009338:	003d5b06 	br	10088a8 <___vfiprintf_internal_r+0x4f8>
 100933c:	d9402117 	ldw	r5,132(sp)
 1009340:	d9002017 	ldw	r4,128(sp)
 1009344:	d9801a04 	addi	r6,sp,104
 1009348:	da402c15 	stw	r9,176(sp)
 100934c:	100829c0 	call	100829c <__sprint_r.part.0>
 1009350:	da402c17 	ldw	r9,176(sp)
 1009354:	103f6a1e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 1009358:	d9401b17 	ldw	r5,108(sp)
 100935c:	d8801c17 	ldw	r2,112(sp)
 1009360:	d811883a 	mov	r8,sp
 1009364:	29000044 	addi	r4,r5,1
 1009368:	003f1006 	br	1008fac <___vfiprintf_internal_r+0xbfc>
 100936c:	1000c31e 	bne	r2,zero,100967c <___vfiprintf_internal_r+0x12cc>
 1009370:	01000044 	movi	r4,1
 1009374:	000b883a 	mov	r5,zero
 1009378:	d811883a 	mov	r8,sp
 100937c:	003f0d06 	br	1008fb4 <___vfiprintf_internal_r+0xc04>
 1009380:	d9402117 	ldw	r5,132(sp)
 1009384:	d9002017 	ldw	r4,128(sp)
 1009388:	d9801a04 	addi	r6,sp,104
 100938c:	100829c0 	call	100829c <__sprint_r.part.0>
 1009390:	103f5b1e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 1009394:	d9001b17 	ldw	r4,108(sp)
 1009398:	d8801c17 	ldw	r2,112(sp)
 100939c:	d811883a 	mov	r8,sp
 10093a0:	21000044 	addi	r4,r4,1
 10093a4:	003d8006 	br	10089a8 <___vfiprintf_internal_r+0x5f8>
 10093a8:	01004074 	movhi	r4,257
 10093ac:	213f5e04 	addi	r4,r4,-648
 10093b0:	d9002615 	stw	r4,152(sp)
 10093b4:	d8c02215 	stw	r3,136(sp)
 10093b8:	1029883a 	mov	r20,r2
 10093bc:	94c4b03a 	or	r2,r18,r19
 10093c0:	103fb21e 	bne	r2,zero,100928c <___vfiprintf_internal_r+0xedc>
 10093c4:	0039883a 	mov	fp,zero
 10093c8:	00800084 	movi	r2,2
 10093cc:	003e6b06 	br	1008d7c <___vfiprintf_internal_r+0x9cc>
 10093d0:	da802217 	ldw	r10,136(sp)
 10093d4:	d8001d85 	stb	zero,118(sp)
 10093d8:	0027883a 	mov	r19,zero
 10093dc:	50800104 	addi	r2,r10,4
 10093e0:	54800017 	ldw	r18,0(r10)
 10093e4:	483e6016 	blt	r9,zero,1008d68 <___vfiprintf_internal_r+0x9b8>
 10093e8:	00ffdfc4 	movi	r3,-129
 10093ec:	d8802215 	stw	r2,136(sp)
 10093f0:	a0e8703a 	and	r20,r20,r3
 10093f4:	0039883a 	mov	fp,zero
 10093f8:	903ebb26 	beq	r18,zero,1008ee8 <___vfiprintf_internal_r+0xb38>
 10093fc:	00800244 	movi	r2,9
 1009400:	14bdee36 	bltu	r2,r18,1008bbc <___vfiprintf_internal_r+0x80c>
 1009404:	003eba06 	br	1008ef0 <___vfiprintf_internal_r+0xb40>
 1009408:	00800c04 	movi	r2,48
 100940c:	d8c01d45 	stb	r3,117(sp)
 1009410:	d8801d05 	stb	r2,116(sp)
 1009414:	d8001d85 	stb	zero,118(sp)
 1009418:	a0c00094 	ori	r3,r20,2
 100941c:	4800a916 	blt	r9,zero,10096c4 <___vfiprintf_internal_r+0x1314>
 1009420:	00bfdfc4 	movi	r2,-129
 1009424:	a096703a 	and	r11,r20,r2
 1009428:	5d000094 	ori	r20,r11,2
 100942c:	0039883a 	mov	fp,zero
 1009430:	003f9706 	br	1009290 <___vfiprintf_internal_r+0xee0>
 1009434:	8025883a 	mov	r18,r16
 1009438:	003c2e06 	br	10084f4 <___vfiprintf_internal_r+0x144>
 100943c:	00804074 	movhi	r2,257
 1009440:	10bf5e04 	addi	r2,r2,-648
 1009444:	0039883a 	mov	fp,zero
 1009448:	d8802615 	stw	r2,152(sp)
 100944c:	003f9006 	br	1009290 <___vfiprintf_internal_r+0xee0>
 1009450:	04a5c83a 	sub	r18,zero,r18
 1009454:	07000b44 	movi	fp,45
 1009458:	9004c03a 	cmpne	r2,r18,zero
 100945c:	04e7c83a 	sub	r19,zero,r19
 1009460:	df001d85 	stb	fp,118(sp)
 1009464:	98a7c83a 	sub	r19,r19,r2
 1009468:	48009f16 	blt	r9,zero,10096e8 <___vfiprintf_internal_r+0x1338>
 100946c:	00bfdfc4 	movi	r2,-129
 1009470:	a0a8703a 	and	r20,r20,r2
 1009474:	003dd006 	br	1008bb8 <___vfiprintf_internal_r+0x808>
 1009478:	70004c26 	beq	r14,zero,10095ac <___vfiprintf_internal_r+0x11fc>
 100947c:	00800084 	movi	r2,2
 1009480:	d8c01d04 	addi	r3,sp,116
 1009484:	d8c00015 	stw	r3,0(sp)
 1009488:	d8800115 	stw	r2,4(sp)
 100948c:	01000044 	movi	r4,1
 1009490:	d811883a 	mov	r8,sp
 1009494:	003f7306 	br	1009264 <___vfiprintf_internal_r+0xeb4>
 1009498:	a080100c 	andi	r2,r20,64
 100949c:	da802217 	ldw	r10,136(sp)
 10094a0:	103e0626 	beq	r2,zero,1008cbc <___vfiprintf_internal_r+0x90c>
 10094a4:	5480000f 	ldh	r18,0(r10)
 10094a8:	52800104 	addi	r10,r10,4
 10094ac:	da802215 	stw	r10,136(sp)
 10094b0:	9027d7fa 	srai	r19,r18,31
 10094b4:	9805883a 	mov	r2,r19
 10094b8:	003db806 	br	1008b9c <___vfiprintf_internal_r+0x7ec>
 10094bc:	a080040c 	andi	r2,r20,16
 10094c0:	1000091e 	bne	r2,zero,10094e8 <___vfiprintf_internal_r+0x1138>
 10094c4:	a2c0100c 	andi	r11,r20,64
 10094c8:	58000726 	beq	r11,zero,10094e8 <___vfiprintf_internal_r+0x1138>
 10094cc:	da802217 	ldw	r10,136(sp)
 10094d0:	50800017 	ldw	r2,0(r10)
 10094d4:	52800104 	addi	r10,r10,4
 10094d8:	da802215 	stw	r10,136(sp)
 10094dc:	da802317 	ldw	r10,140(sp)
 10094e0:	1280000d 	sth	r10,0(r2)
 10094e4:	003be706 	br	1008484 <___vfiprintf_internal_r+0xd4>
 10094e8:	da802217 	ldw	r10,136(sp)
 10094ec:	50800017 	ldw	r2,0(r10)
 10094f0:	52800104 	addi	r10,r10,4
 10094f4:	da802215 	stw	r10,136(sp)
 10094f8:	da802317 	ldw	r10,140(sp)
 10094fc:	12800015 	stw	r10,0(r2)
 1009500:	003be006 	br	1008484 <___vfiprintf_internal_r+0xd4>
 1009504:	a080100c 	andi	r2,r20,64
 1009508:	da802217 	ldw	r10,136(sp)
 100950c:	10003026 	beq	r2,zero,10095d0 <___vfiprintf_internal_r+0x1220>
 1009510:	5480000b 	ldhu	r18,0(r10)
 1009514:	52800104 	addi	r10,r10,4
 1009518:	0027883a 	mov	r19,zero
 100951c:	da802215 	stw	r10,136(sp)
 1009520:	003d8006 	br	1008b24 <___vfiprintf_internal_r+0x774>
 1009524:	80c00007 	ldb	r3,0(r16)
 1009528:	003c0006 	br	100852c <___vfiprintf_internal_r+0x17c>
 100952c:	a080100c 	andi	r2,r20,64
 1009530:	d8001d85 	stb	zero,118(sp)
 1009534:	da802217 	ldw	r10,136(sp)
 1009538:	1000201e 	bne	r2,zero,10095bc <___vfiprintf_internal_r+0x120c>
 100953c:	50800104 	addi	r2,r10,4
 1009540:	54800017 	ldw	r18,0(r10)
 1009544:	0027883a 	mov	r19,zero
 1009548:	483def0e 	bge	r9,zero,1008d08 <___vfiprintf_internal_r+0x958>
 100954c:	94c6b03a 	or	r3,r18,r19
 1009550:	d8802215 	stw	r2,136(sp)
 1009554:	183d4e1e 	bne	r3,zero,1008a90 <___vfiprintf_internal_r+0x6e0>
 1009558:	0039883a 	mov	fp,zero
 100955c:	0005883a 	mov	r2,zero
 1009560:	003e0606 	br	1008d7c <___vfiprintf_internal_r+0x9cc>
 1009564:	d9402117 	ldw	r5,132(sp)
 1009568:	d9002017 	ldw	r4,128(sp)
 100956c:	d9801a04 	addi	r6,sp,104
 1009570:	da402c15 	stw	r9,176(sp)
 1009574:	db802a15 	stw	r14,168(sp)
 1009578:	100829c0 	call	100829c <__sprint_r.part.0>
 100957c:	da402c17 	ldw	r9,176(sp)
 1009580:	db802a17 	ldw	r14,168(sp)
 1009584:	103ede1e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 1009588:	d9401b17 	ldw	r5,108(sp)
 100958c:	d8801c17 	ldw	r2,112(sp)
 1009590:	d811883a 	mov	r8,sp
 1009594:	29000044 	addi	r4,r5,1
 1009598:	003e7406 	br	1008f6c <___vfiprintf_internal_r+0xbbc>
 100959c:	00bfffc4 	movi	r2,-1
 10095a0:	003c5806 	br	1008704 <___vfiprintf_internal_r+0x354>
 10095a4:	d811883a 	mov	r8,sp
 10095a8:	003ee806 	br	100914c <___vfiprintf_internal_r+0xd9c>
 10095ac:	000b883a 	mov	r5,zero
 10095b0:	01000044 	movi	r4,1
 10095b4:	d811883a 	mov	r8,sp
 10095b8:	003e7c06 	br	1008fac <___vfiprintf_internal_r+0xbfc>
 10095bc:	50800104 	addi	r2,r10,4
 10095c0:	5480000b 	ldhu	r18,0(r10)
 10095c4:	0027883a 	mov	r19,zero
 10095c8:	483dcf0e 	bge	r9,zero,1008d08 <___vfiprintf_internal_r+0x958>
 10095cc:	003fdf06 	br	100954c <___vfiprintf_internal_r+0x119c>
 10095d0:	54800017 	ldw	r18,0(r10)
 10095d4:	52800104 	addi	r10,r10,4
 10095d8:	0027883a 	mov	r19,zero
 10095dc:	da802215 	stw	r10,136(sp)
 10095e0:	003d5006 	br	1008b24 <___vfiprintf_internal_r+0x774>
 10095e4:	50800104 	addi	r2,r10,4
 10095e8:	5480000b 	ldhu	r18,0(r10)
 10095ec:	0027883a 	mov	r19,zero
 10095f0:	483f7d0e 	bge	r9,zero,10093e8 <___vfiprintf_internal_r+0x1038>
 10095f4:	003ddc06 	br	1008d68 <___vfiprintf_internal_r+0x9b8>
 10095f8:	d8c02215 	stw	r3,136(sp)
 10095fc:	0039883a 	mov	fp,zero
 1009600:	003ddb06 	br	1008d70 <___vfiprintf_internal_r+0x9c0>
 1009604:	02804074 	movhi	r10,257
 1009608:	52bfbf04 	addi	r10,r10,-260
 100960c:	da802415 	stw	r10,144(sp)
 1009610:	003e8306 	br	1009020 <___vfiprintf_internal_r+0xc70>
 1009614:	d8801c17 	ldw	r2,112(sp)
 1009618:	dd002117 	ldw	r20,132(sp)
 100961c:	103eb926 	beq	r2,zero,1009104 <___vfiprintf_internal_r+0xd54>
 1009620:	d9002017 	ldw	r4,128(sp)
 1009624:	d9801a04 	addi	r6,sp,104
 1009628:	a00b883a 	mov	r5,r20
 100962c:	100829c0 	call	100829c <__sprint_r.part.0>
 1009630:	003eb406 	br	1009104 <___vfiprintf_internal_r+0xd54>
 1009634:	80c00043 	ldbu	r3,1(r16)
 1009638:	a5000814 	ori	r20,r20,32
 100963c:	84000044 	addi	r16,r16,1
 1009640:	18c03fcc 	andi	r3,r3,255
 1009644:	18c0201c 	xori	r3,r3,128
 1009648:	18ffe004 	addi	r3,r3,-128
 100964c:	003bb706 	br	100852c <___vfiprintf_internal_r+0x17c>
 1009650:	a809883a 	mov	r4,r21
 1009654:	d8c02a15 	stw	r3,168(sp)
 1009658:	da002b15 	stw	r8,172(sp)
 100965c:	1000d040 	call	1000d04 <strlen>
 1009660:	d8c02a17 	ldw	r3,168(sp)
 1009664:	1027883a 	mov	r19,r2
 1009668:	df001d83 	ldbu	fp,118(sp)
 100966c:	d8c02215 	stw	r3,136(sp)
 1009670:	0013883a 	mov	r9,zero
 1009674:	da002b17 	ldw	r8,172(sp)
 1009678:	003c4d06 	br	10087b0 <___vfiprintf_internal_r+0x400>
 100967c:	d9402117 	ldw	r5,132(sp)
 1009680:	d9002017 	ldw	r4,128(sp)
 1009684:	d9801a04 	addi	r6,sp,104
 1009688:	da402c15 	stw	r9,176(sp)
 100968c:	100829c0 	call	100829c <__sprint_r.part.0>
 1009690:	da402c17 	ldw	r9,176(sp)
 1009694:	103e9a1e 	bne	r2,zero,1009100 <___vfiprintf_internal_r+0xd50>
 1009698:	d9401b17 	ldw	r5,108(sp)
 100969c:	d8801c17 	ldw	r2,112(sp)
 10096a0:	d811883a 	mov	r8,sp
 10096a4:	29000044 	addi	r4,r5,1
 10096a8:	003e4206 	br	1008fb4 <___vfiprintf_internal_r+0xc04>
 10096ac:	d9401b17 	ldw	r5,108(sp)
 10096b0:	01004074 	movhi	r4,257
 10096b4:	213fc304 	addi	r4,r4,-244
 10096b8:	d9002415 	stw	r4,144(sp)
 10096bc:	29400044 	addi	r5,r5,1
 10096c0:	003c6d06 	br	1008878 <___vfiprintf_internal_r+0x4c8>
 10096c4:	0039883a 	mov	fp,zero
 10096c8:	00800084 	movi	r2,2
 10096cc:	10803fcc 	andi	r2,r2,255
 10096d0:	01000044 	movi	r4,1
 10096d4:	11001e26 	beq	r2,r4,1009750 <___vfiprintf_internal_r+0x13a0>
 10096d8:	01000084 	movi	r4,2
 10096dc:	11001e1e 	bne	r2,r4,1009758 <___vfiprintf_internal_r+0x13a8>
 10096e0:	1829883a 	mov	r20,r3
 10096e4:	003eea06 	br	1009290 <___vfiprintf_internal_r+0xee0>
 10096e8:	a007883a 	mov	r3,r20
 10096ec:	00800044 	movi	r2,1
 10096f0:	003ff606 	br	10096cc <___vfiprintf_internal_r+0x131c>
 10096f4:	00800184 	movi	r2,6
 10096f8:	1240012e 	bgeu	r2,r9,1009700 <___vfiprintf_internal_r+0x1350>
 10096fc:	1013883a 	mov	r9,r2
 1009700:	4827883a 	mov	r19,r9
 1009704:	4825883a 	mov	r18,r9
 1009708:	48001516 	blt	r9,zero,1009760 <___vfiprintf_internal_r+0x13b0>
 100970c:	05404074 	movhi	r21,257
 1009710:	d8c02215 	stw	r3,136(sp)
 1009714:	ad7f6304 	addi	r21,r21,-628
 1009718:	003d1406 	br	1008b6c <___vfiprintf_internal_r+0x7bc>
 100971c:	02804074 	movhi	r10,257
 1009720:	52bfbf04 	addi	r10,r10,-260
 1009724:	da802415 	stw	r10,144(sp)
 1009728:	200d883a 	mov	r6,r4
 100972c:	003c9106 	br	1008974 <___vfiprintf_internal_r+0x5c4>
 1009730:	5021883a 	mov	r16,r10
 1009734:	0013883a 	mov	r9,zero
 1009738:	003b7d06 	br	1008530 <___vfiprintf_internal_r+0x180>
 100973c:	4827883a 	mov	r19,r9
 1009740:	df001d83 	ldbu	fp,118(sp)
 1009744:	d8c02215 	stw	r3,136(sp)
 1009748:	0013883a 	mov	r9,zero
 100974c:	003c1806 	br	10087b0 <___vfiprintf_internal_r+0x400>
 1009750:	1829883a 	mov	r20,r3
 1009754:	003d1806 	br	1008bb8 <___vfiprintf_internal_r+0x808>
 1009758:	1829883a 	mov	r20,r3
 100975c:	003ccd06 	br	1008a94 <___vfiprintf_internal_r+0x6e4>
 1009760:	0025883a 	mov	r18,zero
 1009764:	003fe906 	br	100970c <___vfiprintf_internal_r+0x135c>
 1009768:	d8802217 	ldw	r2,136(sp)
 100976c:	80c00043 	ldbu	r3,1(r16)
 1009770:	5021883a 	mov	r16,r10
 1009774:	12400017 	ldw	r9,0(r2)
 1009778:	10800104 	addi	r2,r2,4
 100977c:	d8802215 	stw	r2,136(sp)
 1009780:	483faf0e 	bge	r9,zero,1009640 <___vfiprintf_internal_r+0x1290>
 1009784:	18c03fcc 	andi	r3,r3,255
 1009788:	18c0201c 	xori	r3,r3,128
 100978c:	027fffc4 	movi	r9,-1
 1009790:	18ffe004 	addi	r3,r3,-128
 1009794:	003b6506 	br	100852c <___vfiprintf_internal_r+0x17c>
 1009798:	d9c01d85 	stb	r7,118(sp)
 100979c:	003ca006 	br	1008a20 <___vfiprintf_internal_r+0x670>
 10097a0:	d9c01d85 	stb	r7,118(sp)
 10097a4:	003cad06 	br	1008a5c <___vfiprintf_internal_r+0x6ac>
 10097a8:	d9c01d85 	stb	r7,118(sp)
 10097ac:	003d7d06 	br	1008da4 <___vfiprintf_internal_r+0x9f4>
 10097b0:	d9c01d85 	stb	r7,118(sp)
 10097b4:	003d5f06 	br	1008d34 <___vfiprintf_internal_r+0x984>
 10097b8:	a080004c 	andi	r2,r20,1
 10097bc:	0039883a 	mov	fp,zero
 10097c0:	10000526 	beq	r2,zero,10097d8 <___vfiprintf_internal_r+0x1428>
 10097c4:	00800c04 	movi	r2,48
 10097c8:	d88019c5 	stb	r2,103(sp)
 10097cc:	dcc02717 	ldw	r19,156(sp)
 10097d0:	dd4019c4 	addi	r21,sp,103
 10097d4:	003bf606 	br	10087b0 <___vfiprintf_internal_r+0x400>
 10097d8:	0027883a 	mov	r19,zero
 10097dc:	dd401a04 	addi	r21,sp,104
 10097e0:	003bf306 	br	10087b0 <___vfiprintf_internal_r+0x400>
 10097e4:	d9c01d85 	stb	r7,118(sp)
 10097e8:	003dc806 	br	1008f0c <___vfiprintf_internal_r+0xb5c>
 10097ec:	d9c01d85 	stb	r7,118(sp)
 10097f0:	003d3a06 	br	1008cdc <___vfiprintf_internal_r+0x92c>
 10097f4:	d9c01d85 	stb	r7,118(sp)
 10097f8:	003d2a06 	br	1008ca4 <___vfiprintf_internal_r+0x8f4>
 10097fc:	d9c01d85 	stb	r7,118(sp)
 1009800:	003cde06 	br	1008b7c <___vfiprintf_internal_r+0x7cc>
 1009804:	d9c01d85 	stb	r7,118(sp)
 1009808:	003cbc06 	br	1008afc <___vfiprintf_internal_r+0x74c>

0100980c <__vfiprintf_internal>:
 100980c:	00804074 	movhi	r2,257
 1009810:	1086be04 	addi	r2,r2,6904
 1009814:	300f883a 	mov	r7,r6
 1009818:	280d883a 	mov	r6,r5
 100981c:	200b883a 	mov	r5,r4
 1009820:	11000017 	ldw	r4,0(r2)
 1009824:	10083b01 	jmpi	10083b0 <___vfiprintf_internal_r>

01009828 <__sbprintf>:
 1009828:	2880030b 	ldhu	r2,12(r5)
 100982c:	2ac01917 	ldw	r11,100(r5)
 1009830:	2a80038b 	ldhu	r10,14(r5)
 1009834:	2a400717 	ldw	r9,28(r5)
 1009838:	2a000917 	ldw	r8,36(r5)
 100983c:	defee204 	addi	sp,sp,-1144
 1009840:	00c10004 	movi	r3,1024
 1009844:	dc011a15 	stw	r16,1128(sp)
 1009848:	10bfff4c 	andi	r2,r2,65533
 100984c:	2821883a 	mov	r16,r5
 1009850:	d8cb883a 	add	r5,sp,r3
 1009854:	dc811c15 	stw	r18,1136(sp)
 1009858:	dc411b15 	stw	r17,1132(sp)
 100985c:	dfc11d15 	stw	ra,1140(sp)
 1009860:	2025883a 	mov	r18,r4
 1009864:	d881030d 	sth	r2,1036(sp)
 1009868:	dac11915 	stw	r11,1124(sp)
 100986c:	da81038d 	sth	r10,1038(sp)
 1009870:	da410715 	stw	r9,1052(sp)
 1009874:	da010915 	stw	r8,1060(sp)
 1009878:	dec10015 	stw	sp,1024(sp)
 100987c:	dec10415 	stw	sp,1040(sp)
 1009880:	d8c10215 	stw	r3,1032(sp)
 1009884:	d8c10515 	stw	r3,1044(sp)
 1009888:	d8010615 	stw	zero,1048(sp)
 100988c:	10083b00 	call	10083b0 <___vfiprintf_internal_r>
 1009890:	1023883a 	mov	r17,r2
 1009894:	10000416 	blt	r2,zero,10098a8 <__sbprintf+0x80>
 1009898:	d9410004 	addi	r5,sp,1024
 100989c:	9009883a 	mov	r4,r18
 10098a0:	1004c640 	call	1004c64 <_fflush_r>
 10098a4:	10000d1e 	bne	r2,zero,10098dc <__sbprintf+0xb4>
 10098a8:	d881030b 	ldhu	r2,1036(sp)
 10098ac:	1080100c 	andi	r2,r2,64
 10098b0:	10000326 	beq	r2,zero,10098c0 <__sbprintf+0x98>
 10098b4:	8080030b 	ldhu	r2,12(r16)
 10098b8:	10801014 	ori	r2,r2,64
 10098bc:	8080030d 	sth	r2,12(r16)
 10098c0:	8805883a 	mov	r2,r17
 10098c4:	dfc11d17 	ldw	ra,1140(sp)
 10098c8:	dc811c17 	ldw	r18,1136(sp)
 10098cc:	dc411b17 	ldw	r17,1132(sp)
 10098d0:	dc011a17 	ldw	r16,1128(sp)
 10098d4:	dec11e04 	addi	sp,sp,1144
 10098d8:	f800283a 	ret
 10098dc:	047fffc4 	movi	r17,-1
 10098e0:	003ff106 	br	10098a8 <__sbprintf+0x80>

010098e4 <_write_r>:
 10098e4:	defffd04 	addi	sp,sp,-12
 10098e8:	2805883a 	mov	r2,r5
 10098ec:	dc000015 	stw	r16,0(sp)
 10098f0:	04004074 	movhi	r16,257
 10098f4:	dc400115 	stw	r17,4(sp)
 10098f8:	300b883a 	mov	r5,r6
 10098fc:	840d8f04 	addi	r16,r16,13884
 1009900:	2023883a 	mov	r17,r4
 1009904:	380d883a 	mov	r6,r7
 1009908:	1009883a 	mov	r4,r2
 100990c:	dfc00215 	stw	ra,8(sp)
 1009910:	80000015 	stw	zero,0(r16)
 1009914:	100deb00 	call	100deb0 <write>
 1009918:	00ffffc4 	movi	r3,-1
 100991c:	10c00526 	beq	r2,r3,1009934 <_write_r+0x50>
 1009920:	dfc00217 	ldw	ra,8(sp)
 1009924:	dc400117 	ldw	r17,4(sp)
 1009928:	dc000017 	ldw	r16,0(sp)
 100992c:	dec00304 	addi	sp,sp,12
 1009930:	f800283a 	ret
 1009934:	80c00017 	ldw	r3,0(r16)
 1009938:	183ff926 	beq	r3,zero,1009920 <_write_r+0x3c>
 100993c:	88c00015 	stw	r3,0(r17)
 1009940:	003ff706 	br	1009920 <_write_r+0x3c>

01009944 <_close_r>:
 1009944:	defffd04 	addi	sp,sp,-12
 1009948:	dc000015 	stw	r16,0(sp)
 100994c:	04004074 	movhi	r16,257
 1009950:	dc400115 	stw	r17,4(sp)
 1009954:	840d8f04 	addi	r16,r16,13884
 1009958:	2023883a 	mov	r17,r4
 100995c:	2809883a 	mov	r4,r5
 1009960:	dfc00215 	stw	ra,8(sp)
 1009964:	80000015 	stw	zero,0(r16)
 1009968:	100d5200 	call	100d520 <close>
 100996c:	00ffffc4 	movi	r3,-1
 1009970:	10c00526 	beq	r2,r3,1009988 <_close_r+0x44>
 1009974:	dfc00217 	ldw	ra,8(sp)
 1009978:	dc400117 	ldw	r17,4(sp)
 100997c:	dc000017 	ldw	r16,0(sp)
 1009980:	dec00304 	addi	sp,sp,12
 1009984:	f800283a 	ret
 1009988:	80c00017 	ldw	r3,0(r16)
 100998c:	183ff926 	beq	r3,zero,1009974 <_close_r+0x30>
 1009990:	88c00015 	stw	r3,0(r17)
 1009994:	003ff706 	br	1009974 <_close_r+0x30>

01009998 <_calloc_r>:
 1009998:	298b383a 	mul	r5,r5,r6
 100999c:	defffe04 	addi	sp,sp,-8
 10099a0:	dfc00115 	stw	ra,4(sp)
 10099a4:	dc000015 	stw	r16,0(sp)
 10099a8:	1005da00 	call	1005da0 <_malloc_r>
 10099ac:	10002926 	beq	r2,zero,1009a54 <_calloc_r+0xbc>
 10099b0:	11bfff17 	ldw	r6,-4(r2)
 10099b4:	1021883a 	mov	r16,r2
 10099b8:	00bfff04 	movi	r2,-4
 10099bc:	308c703a 	and	r6,r6,r2
 10099c0:	00c00904 	movi	r3,36
 10099c4:	308d883a 	add	r6,r6,r2
 10099c8:	19801636 	bltu	r3,r6,1009a24 <_calloc_r+0x8c>
 10099cc:	008004c4 	movi	r2,19
 10099d0:	11800b2e 	bgeu	r2,r6,1009a00 <_calloc_r+0x68>
 10099d4:	80000015 	stw	zero,0(r16)
 10099d8:	80000115 	stw	zero,4(r16)
 10099dc:	008006c4 	movi	r2,27
 10099e0:	11801a2e 	bgeu	r2,r6,1009a4c <_calloc_r+0xb4>
 10099e4:	80000215 	stw	zero,8(r16)
 10099e8:	80000315 	stw	zero,12(r16)
 10099ec:	30c0151e 	bne	r6,r3,1009a44 <_calloc_r+0xac>
 10099f0:	80000415 	stw	zero,16(r16)
 10099f4:	80800604 	addi	r2,r16,24
 10099f8:	80000515 	stw	zero,20(r16)
 10099fc:	00000106 	br	1009a04 <_calloc_r+0x6c>
 1009a00:	8005883a 	mov	r2,r16
 1009a04:	10000015 	stw	zero,0(r2)
 1009a08:	10000115 	stw	zero,4(r2)
 1009a0c:	10000215 	stw	zero,8(r2)
 1009a10:	8005883a 	mov	r2,r16
 1009a14:	dfc00117 	ldw	ra,4(sp)
 1009a18:	dc000017 	ldw	r16,0(sp)
 1009a1c:	dec00204 	addi	sp,sp,8
 1009a20:	f800283a 	ret
 1009a24:	000b883a 	mov	r5,zero
 1009a28:	8009883a 	mov	r4,r16
 1009a2c:	10069340 	call	1006934 <memset>
 1009a30:	8005883a 	mov	r2,r16
 1009a34:	dfc00117 	ldw	ra,4(sp)
 1009a38:	dc000017 	ldw	r16,0(sp)
 1009a3c:	dec00204 	addi	sp,sp,8
 1009a40:	f800283a 	ret
 1009a44:	80800404 	addi	r2,r16,16
 1009a48:	003fee06 	br	1009a04 <_calloc_r+0x6c>
 1009a4c:	80800204 	addi	r2,r16,8
 1009a50:	003fec06 	br	1009a04 <_calloc_r+0x6c>
 1009a54:	0005883a 	mov	r2,zero
 1009a58:	003fee06 	br	1009a14 <_calloc_r+0x7c>

01009a5c <_fclose_r>:
 1009a5c:	28003926 	beq	r5,zero,1009b44 <_fclose_r+0xe8>
 1009a60:	defffc04 	addi	sp,sp,-16
 1009a64:	dc400115 	stw	r17,4(sp)
 1009a68:	dc000015 	stw	r16,0(sp)
 1009a6c:	dfc00315 	stw	ra,12(sp)
 1009a70:	dc800215 	stw	r18,8(sp)
 1009a74:	2023883a 	mov	r17,r4
 1009a78:	2821883a 	mov	r16,r5
 1009a7c:	20000226 	beq	r4,zero,1009a88 <_fclose_r+0x2c>
 1009a80:	20800e17 	ldw	r2,56(r4)
 1009a84:	10002726 	beq	r2,zero,1009b24 <_fclose_r+0xc8>
 1009a88:	8080030f 	ldh	r2,12(r16)
 1009a8c:	1000071e 	bne	r2,zero,1009aac <_fclose_r+0x50>
 1009a90:	0005883a 	mov	r2,zero
 1009a94:	dfc00317 	ldw	ra,12(sp)
 1009a98:	dc800217 	ldw	r18,8(sp)
 1009a9c:	dc400117 	ldw	r17,4(sp)
 1009aa0:	dc000017 	ldw	r16,0(sp)
 1009aa4:	dec00404 	addi	sp,sp,16
 1009aa8:	f800283a 	ret
 1009aac:	800b883a 	mov	r5,r16
 1009ab0:	8809883a 	mov	r4,r17
 1009ab4:	1004a480 	call	1004a48 <__sflush_r>
 1009ab8:	1025883a 	mov	r18,r2
 1009abc:	80800b17 	ldw	r2,44(r16)
 1009ac0:	10000426 	beq	r2,zero,1009ad4 <_fclose_r+0x78>
 1009ac4:	81400717 	ldw	r5,28(r16)
 1009ac8:	8809883a 	mov	r4,r17
 1009acc:	103ee83a 	callr	r2
 1009ad0:	10001616 	blt	r2,zero,1009b2c <_fclose_r+0xd0>
 1009ad4:	8080030b 	ldhu	r2,12(r16)
 1009ad8:	1080200c 	andi	r2,r2,128
 1009adc:	1000151e 	bne	r2,zero,1009b34 <_fclose_r+0xd8>
 1009ae0:	81400c17 	ldw	r5,48(r16)
 1009ae4:	28000526 	beq	r5,zero,1009afc <_fclose_r+0xa0>
 1009ae8:	80801004 	addi	r2,r16,64
 1009aec:	28800226 	beq	r5,r2,1009af8 <_fclose_r+0x9c>
 1009af0:	8809883a 	mov	r4,r17
 1009af4:	10051b40 	call	10051b4 <_free_r>
 1009af8:	80000c15 	stw	zero,48(r16)
 1009afc:	81401117 	ldw	r5,68(r16)
 1009b00:	28000326 	beq	r5,zero,1009b10 <_fclose_r+0xb4>
 1009b04:	8809883a 	mov	r4,r17
 1009b08:	10051b40 	call	10051b4 <_free_r>
 1009b0c:	80001115 	stw	zero,68(r16)
 1009b10:	10050500 	call	1005050 <__sfp_lock_acquire>
 1009b14:	8000030d 	sth	zero,12(r16)
 1009b18:	10050540 	call	1005054 <__sfp_lock_release>
 1009b1c:	9005883a 	mov	r2,r18
 1009b20:	003fdc06 	br	1009a94 <_fclose_r+0x38>
 1009b24:	10050400 	call	1005040 <__sinit>
 1009b28:	003fd706 	br	1009a88 <_fclose_r+0x2c>
 1009b2c:	04bfffc4 	movi	r18,-1
 1009b30:	003fe806 	br	1009ad4 <_fclose_r+0x78>
 1009b34:	81400417 	ldw	r5,16(r16)
 1009b38:	8809883a 	mov	r4,r17
 1009b3c:	10051b40 	call	10051b4 <_free_r>
 1009b40:	003fe706 	br	1009ae0 <_fclose_r+0x84>
 1009b44:	0005883a 	mov	r2,zero
 1009b48:	f800283a 	ret

01009b4c <fclose>:
 1009b4c:	00804074 	movhi	r2,257
 1009b50:	1086be04 	addi	r2,r2,6904
 1009b54:	200b883a 	mov	r5,r4
 1009b58:	11000017 	ldw	r4,0(r2)
 1009b5c:	1009a5c1 	jmpi	1009a5c <_fclose_r>

01009b60 <__fputwc>:
 1009b60:	defff804 	addi	sp,sp,-32
 1009b64:	dcc00415 	stw	r19,16(sp)
 1009b68:	dc800315 	stw	r18,12(sp)
 1009b6c:	dc000115 	stw	r16,4(sp)
 1009b70:	dfc00715 	stw	ra,28(sp)
 1009b74:	dd400615 	stw	r21,24(sp)
 1009b78:	dd000515 	stw	r20,20(sp)
 1009b7c:	dc400215 	stw	r17,8(sp)
 1009b80:	2027883a 	mov	r19,r4
 1009b84:	2825883a 	mov	r18,r5
 1009b88:	3021883a 	mov	r16,r6
 1009b8c:	1005b900 	call	1005b90 <__locale_mb_cur_max>
 1009b90:	00c00044 	movi	r3,1
 1009b94:	10c03e26 	beq	r2,r3,1009c90 <__fputwc+0x130>
 1009b98:	81c01704 	addi	r7,r16,92
 1009b9c:	900d883a 	mov	r6,r18
 1009ba0:	d80b883a 	mov	r5,sp
 1009ba4:	9809883a 	mov	r4,r19
 1009ba8:	100a0300 	call	100a030 <_wcrtomb_r>
 1009bac:	1029883a 	mov	r20,r2
 1009bb0:	00bfffc4 	movi	r2,-1
 1009bb4:	a0802026 	beq	r20,r2,1009c38 <__fputwc+0xd8>
 1009bb8:	d9400003 	ldbu	r5,0(sp)
 1009bbc:	a0001c26 	beq	r20,zero,1009c30 <__fputwc+0xd0>
 1009bc0:	0023883a 	mov	r17,zero
 1009bc4:	05400284 	movi	r21,10
 1009bc8:	00000906 	br	1009bf0 <__fputwc+0x90>
 1009bcc:	80800017 	ldw	r2,0(r16)
 1009bd0:	11400005 	stb	r5,0(r2)
 1009bd4:	80c00017 	ldw	r3,0(r16)
 1009bd8:	18c00044 	addi	r3,r3,1
 1009bdc:	80c00015 	stw	r3,0(r16)
 1009be0:	8c400044 	addi	r17,r17,1
 1009be4:	dc45883a 	add	r2,sp,r17
 1009be8:	8d00112e 	bgeu	r17,r20,1009c30 <__fputwc+0xd0>
 1009bec:	11400003 	ldbu	r5,0(r2)
 1009bf0:	80c00217 	ldw	r3,8(r16)
 1009bf4:	18ffffc4 	addi	r3,r3,-1
 1009bf8:	80c00215 	stw	r3,8(r16)
 1009bfc:	183ff30e 	bge	r3,zero,1009bcc <__fputwc+0x6c>
 1009c00:	80800617 	ldw	r2,24(r16)
 1009c04:	18801916 	blt	r3,r2,1009c6c <__fputwc+0x10c>
 1009c08:	80800017 	ldw	r2,0(r16)
 1009c0c:	11400005 	stb	r5,0(r2)
 1009c10:	80800017 	ldw	r2,0(r16)
 1009c14:	10c00003 	ldbu	r3,0(r2)
 1009c18:	10800044 	addi	r2,r2,1
 1009c1c:	1d402326 	beq	r3,r21,1009cac <__fputwc+0x14c>
 1009c20:	80800015 	stw	r2,0(r16)
 1009c24:	8c400044 	addi	r17,r17,1
 1009c28:	dc45883a 	add	r2,sp,r17
 1009c2c:	8d3fef36 	bltu	r17,r20,1009bec <__fputwc+0x8c>
 1009c30:	9005883a 	mov	r2,r18
 1009c34:	00000406 	br	1009c48 <__fputwc+0xe8>
 1009c38:	80c0030b 	ldhu	r3,12(r16)
 1009c3c:	a005883a 	mov	r2,r20
 1009c40:	18c01014 	ori	r3,r3,64
 1009c44:	80c0030d 	sth	r3,12(r16)
 1009c48:	dfc00717 	ldw	ra,28(sp)
 1009c4c:	dd400617 	ldw	r21,24(sp)
 1009c50:	dd000517 	ldw	r20,20(sp)
 1009c54:	dcc00417 	ldw	r19,16(sp)
 1009c58:	dc800317 	ldw	r18,12(sp)
 1009c5c:	dc400217 	ldw	r17,8(sp)
 1009c60:	dc000117 	ldw	r16,4(sp)
 1009c64:	dec00804 	addi	sp,sp,32
 1009c68:	f800283a 	ret
 1009c6c:	800d883a 	mov	r6,r16
 1009c70:	29403fcc 	andi	r5,r5,255
 1009c74:	9809883a 	mov	r4,r19
 1009c78:	1009ed80 	call	1009ed8 <__swbuf_r>
 1009c7c:	10bfffe0 	cmpeqi	r2,r2,-1
 1009c80:	10803fcc 	andi	r2,r2,255
 1009c84:	103fd626 	beq	r2,zero,1009be0 <__fputwc+0x80>
 1009c88:	00bfffc4 	movi	r2,-1
 1009c8c:	003fee06 	br	1009c48 <__fputwc+0xe8>
 1009c90:	90ffffc4 	addi	r3,r18,-1
 1009c94:	01003f84 	movi	r4,254
 1009c98:	20ffbf36 	bltu	r4,r3,1009b98 <__fputwc+0x38>
 1009c9c:	900b883a 	mov	r5,r18
 1009ca0:	dc800005 	stb	r18,0(sp)
 1009ca4:	1029883a 	mov	r20,r2
 1009ca8:	003fc506 	br	1009bc0 <__fputwc+0x60>
 1009cac:	800d883a 	mov	r6,r16
 1009cb0:	a80b883a 	mov	r5,r21
 1009cb4:	9809883a 	mov	r4,r19
 1009cb8:	1009ed80 	call	1009ed8 <__swbuf_r>
 1009cbc:	10bfffe0 	cmpeqi	r2,r2,-1
 1009cc0:	003fef06 	br	1009c80 <__fputwc+0x120>

01009cc4 <_fputwc_r>:
 1009cc4:	3080030b 	ldhu	r2,12(r6)
 1009cc8:	10c8000c 	andi	r3,r2,8192
 1009ccc:	1800051e 	bne	r3,zero,1009ce4 <_fputwc_r+0x20>
 1009cd0:	30c01917 	ldw	r3,100(r6)
 1009cd4:	10880014 	ori	r2,r2,8192
 1009cd8:	3080030d 	sth	r2,12(r6)
 1009cdc:	18880014 	ori	r2,r3,8192
 1009ce0:	30801915 	stw	r2,100(r6)
 1009ce4:	1009b601 	jmpi	1009b60 <__fputwc>

01009ce8 <fputwc>:
 1009ce8:	00804074 	movhi	r2,257
 1009cec:	defffc04 	addi	sp,sp,-16
 1009cf0:	1086be04 	addi	r2,r2,6904
 1009cf4:	dc000115 	stw	r16,4(sp)
 1009cf8:	14000017 	ldw	r16,0(r2)
 1009cfc:	dc400215 	stw	r17,8(sp)
 1009d00:	dfc00315 	stw	ra,12(sp)
 1009d04:	2023883a 	mov	r17,r4
 1009d08:	80000226 	beq	r16,zero,1009d14 <fputwc+0x2c>
 1009d0c:	80800e17 	ldw	r2,56(r16)
 1009d10:	10001026 	beq	r2,zero,1009d54 <fputwc+0x6c>
 1009d14:	2880030b 	ldhu	r2,12(r5)
 1009d18:	10c8000c 	andi	r3,r2,8192
 1009d1c:	1800051e 	bne	r3,zero,1009d34 <fputwc+0x4c>
 1009d20:	28c01917 	ldw	r3,100(r5)
 1009d24:	10880014 	ori	r2,r2,8192
 1009d28:	2880030d 	sth	r2,12(r5)
 1009d2c:	18880014 	ori	r2,r3,8192
 1009d30:	28801915 	stw	r2,100(r5)
 1009d34:	280d883a 	mov	r6,r5
 1009d38:	8009883a 	mov	r4,r16
 1009d3c:	880b883a 	mov	r5,r17
 1009d40:	dfc00317 	ldw	ra,12(sp)
 1009d44:	dc400217 	ldw	r17,8(sp)
 1009d48:	dc000117 	ldw	r16,4(sp)
 1009d4c:	dec00404 	addi	sp,sp,16
 1009d50:	1009b601 	jmpi	1009b60 <__fputwc>
 1009d54:	8009883a 	mov	r4,r16
 1009d58:	d9400015 	stw	r5,0(sp)
 1009d5c:	10050400 	call	1005040 <__sinit>
 1009d60:	d9400017 	ldw	r5,0(sp)
 1009d64:	003feb06 	br	1009d14 <fputwc+0x2c>

01009d68 <_fstat_r>:
 1009d68:	defffd04 	addi	sp,sp,-12
 1009d6c:	2805883a 	mov	r2,r5
 1009d70:	dc000015 	stw	r16,0(sp)
 1009d74:	04004074 	movhi	r16,257
 1009d78:	dc400115 	stw	r17,4(sp)
 1009d7c:	840d8f04 	addi	r16,r16,13884
 1009d80:	2023883a 	mov	r17,r4
 1009d84:	300b883a 	mov	r5,r6
 1009d88:	1009883a 	mov	r4,r2
 1009d8c:	dfc00215 	stw	ra,8(sp)
 1009d90:	80000015 	stw	zero,0(r16)
 1009d94:	100d6580 	call	100d658 <fstat>
 1009d98:	00ffffc4 	movi	r3,-1
 1009d9c:	10c00526 	beq	r2,r3,1009db4 <_fstat_r+0x4c>
 1009da0:	dfc00217 	ldw	ra,8(sp)
 1009da4:	dc400117 	ldw	r17,4(sp)
 1009da8:	dc000017 	ldw	r16,0(sp)
 1009dac:	dec00304 	addi	sp,sp,12
 1009db0:	f800283a 	ret
 1009db4:	80c00017 	ldw	r3,0(r16)
 1009db8:	183ff926 	beq	r3,zero,1009da0 <_fstat_r+0x38>
 1009dbc:	88c00015 	stw	r3,0(r17)
 1009dc0:	003ff706 	br	1009da0 <_fstat_r+0x38>

01009dc4 <_isatty_r>:
 1009dc4:	defffd04 	addi	sp,sp,-12
 1009dc8:	dc000015 	stw	r16,0(sp)
 1009dcc:	04004074 	movhi	r16,257
 1009dd0:	dc400115 	stw	r17,4(sp)
 1009dd4:	840d8f04 	addi	r16,r16,13884
 1009dd8:	2023883a 	mov	r17,r4
 1009ddc:	2809883a 	mov	r4,r5
 1009de0:	dfc00215 	stw	ra,8(sp)
 1009de4:	80000015 	stw	zero,0(r16)
 1009de8:	100d8c40 	call	100d8c4 <isatty>
 1009dec:	00ffffc4 	movi	r3,-1
 1009df0:	10c00526 	beq	r2,r3,1009e08 <_isatty_r+0x44>
 1009df4:	dfc00217 	ldw	ra,8(sp)
 1009df8:	dc400117 	ldw	r17,4(sp)
 1009dfc:	dc000017 	ldw	r16,0(sp)
 1009e00:	dec00304 	addi	sp,sp,12
 1009e04:	f800283a 	ret
 1009e08:	80c00017 	ldw	r3,0(r16)
 1009e0c:	183ff926 	beq	r3,zero,1009df4 <_isatty_r+0x30>
 1009e10:	88c00015 	stw	r3,0(r17)
 1009e14:	003ff706 	br	1009df4 <_isatty_r+0x30>

01009e18 <_lseek_r>:
 1009e18:	defffd04 	addi	sp,sp,-12
 1009e1c:	2805883a 	mov	r2,r5
 1009e20:	dc000015 	stw	r16,0(sp)
 1009e24:	04004074 	movhi	r16,257
 1009e28:	dc400115 	stw	r17,4(sp)
 1009e2c:	300b883a 	mov	r5,r6
 1009e30:	840d8f04 	addi	r16,r16,13884
 1009e34:	2023883a 	mov	r17,r4
 1009e38:	380d883a 	mov	r6,r7
 1009e3c:	1009883a 	mov	r4,r2
 1009e40:	dfc00215 	stw	ra,8(sp)
 1009e44:	80000015 	stw	zero,0(r16)
 1009e48:	100da900 	call	100da90 <lseek>
 1009e4c:	00ffffc4 	movi	r3,-1
 1009e50:	10c00526 	beq	r2,r3,1009e68 <_lseek_r+0x50>
 1009e54:	dfc00217 	ldw	ra,8(sp)
 1009e58:	dc400117 	ldw	r17,4(sp)
 1009e5c:	dc000017 	ldw	r16,0(sp)
 1009e60:	dec00304 	addi	sp,sp,12
 1009e64:	f800283a 	ret
 1009e68:	80c00017 	ldw	r3,0(r16)
 1009e6c:	183ff926 	beq	r3,zero,1009e54 <_lseek_r+0x3c>
 1009e70:	88c00015 	stw	r3,0(r17)
 1009e74:	003ff706 	br	1009e54 <_lseek_r+0x3c>

01009e78 <_read_r>:
 1009e78:	defffd04 	addi	sp,sp,-12
 1009e7c:	2805883a 	mov	r2,r5
 1009e80:	dc000015 	stw	r16,0(sp)
 1009e84:	04004074 	movhi	r16,257
 1009e88:	dc400115 	stw	r17,4(sp)
 1009e8c:	300b883a 	mov	r5,r6
 1009e90:	840d8f04 	addi	r16,r16,13884
 1009e94:	2023883a 	mov	r17,r4
 1009e98:	380d883a 	mov	r6,r7
 1009e9c:	1009883a 	mov	r4,r2
 1009ea0:	dfc00215 	stw	ra,8(sp)
 1009ea4:	80000015 	stw	zero,0(r16)
 1009ea8:	100dc640 	call	100dc64 <read>
 1009eac:	00ffffc4 	movi	r3,-1
 1009eb0:	10c00526 	beq	r2,r3,1009ec8 <_read_r+0x50>
 1009eb4:	dfc00217 	ldw	ra,8(sp)
 1009eb8:	dc400117 	ldw	r17,4(sp)
 1009ebc:	dc000017 	ldw	r16,0(sp)
 1009ec0:	dec00304 	addi	sp,sp,12
 1009ec4:	f800283a 	ret
 1009ec8:	80c00017 	ldw	r3,0(r16)
 1009ecc:	183ff926 	beq	r3,zero,1009eb4 <_read_r+0x3c>
 1009ed0:	88c00015 	stw	r3,0(r17)
 1009ed4:	003ff706 	br	1009eb4 <_read_r+0x3c>

01009ed8 <__swbuf_r>:
 1009ed8:	defffb04 	addi	sp,sp,-20
 1009edc:	dcc00315 	stw	r19,12(sp)
 1009ee0:	dc800215 	stw	r18,8(sp)
 1009ee4:	dc000015 	stw	r16,0(sp)
 1009ee8:	dfc00415 	stw	ra,16(sp)
 1009eec:	dc400115 	stw	r17,4(sp)
 1009ef0:	2025883a 	mov	r18,r4
 1009ef4:	2827883a 	mov	r19,r5
 1009ef8:	3021883a 	mov	r16,r6
 1009efc:	20000226 	beq	r4,zero,1009f08 <__swbuf_r+0x30>
 1009f00:	20800e17 	ldw	r2,56(r4)
 1009f04:	10004226 	beq	r2,zero,100a010 <__swbuf_r+0x138>
 1009f08:	80800617 	ldw	r2,24(r16)
 1009f0c:	8100030b 	ldhu	r4,12(r16)
 1009f10:	80800215 	stw	r2,8(r16)
 1009f14:	2080020c 	andi	r2,r4,8
 1009f18:	10003626 	beq	r2,zero,1009ff4 <__swbuf_r+0x11c>
 1009f1c:	80c00417 	ldw	r3,16(r16)
 1009f20:	18003426 	beq	r3,zero,1009ff4 <__swbuf_r+0x11c>
 1009f24:	2088000c 	andi	r2,r4,8192
 1009f28:	9c403fcc 	andi	r17,r19,255
 1009f2c:	10001a26 	beq	r2,zero,1009f98 <__swbuf_r+0xc0>
 1009f30:	80800017 	ldw	r2,0(r16)
 1009f34:	81000517 	ldw	r4,20(r16)
 1009f38:	10c7c83a 	sub	r3,r2,r3
 1009f3c:	1900200e 	bge	r3,r4,1009fc0 <__swbuf_r+0xe8>
 1009f40:	18c00044 	addi	r3,r3,1
 1009f44:	81000217 	ldw	r4,8(r16)
 1009f48:	11400044 	addi	r5,r2,1
 1009f4c:	81400015 	stw	r5,0(r16)
 1009f50:	213fffc4 	addi	r4,r4,-1
 1009f54:	81000215 	stw	r4,8(r16)
 1009f58:	14c00005 	stb	r19,0(r2)
 1009f5c:	80800517 	ldw	r2,20(r16)
 1009f60:	10c01e26 	beq	r2,r3,1009fdc <__swbuf_r+0x104>
 1009f64:	8080030b 	ldhu	r2,12(r16)
 1009f68:	1080004c 	andi	r2,r2,1
 1009f6c:	10000226 	beq	r2,zero,1009f78 <__swbuf_r+0xa0>
 1009f70:	00800284 	movi	r2,10
 1009f74:	88801926 	beq	r17,r2,1009fdc <__swbuf_r+0x104>
 1009f78:	8805883a 	mov	r2,r17
 1009f7c:	dfc00417 	ldw	ra,16(sp)
 1009f80:	dcc00317 	ldw	r19,12(sp)
 1009f84:	dc800217 	ldw	r18,8(sp)
 1009f88:	dc400117 	ldw	r17,4(sp)
 1009f8c:	dc000017 	ldw	r16,0(sp)
 1009f90:	dec00504 	addi	sp,sp,20
 1009f94:	f800283a 	ret
 1009f98:	81401917 	ldw	r5,100(r16)
 1009f9c:	00b7ffc4 	movi	r2,-8193
 1009fa0:	21080014 	ori	r4,r4,8192
 1009fa4:	2884703a 	and	r2,r5,r2
 1009fa8:	80801915 	stw	r2,100(r16)
 1009fac:	80800017 	ldw	r2,0(r16)
 1009fb0:	8100030d 	sth	r4,12(r16)
 1009fb4:	81000517 	ldw	r4,20(r16)
 1009fb8:	10c7c83a 	sub	r3,r2,r3
 1009fbc:	193fe016 	blt	r3,r4,1009f40 <__swbuf_r+0x68>
 1009fc0:	800b883a 	mov	r5,r16
 1009fc4:	9009883a 	mov	r4,r18
 1009fc8:	1004c640 	call	1004c64 <_fflush_r>
 1009fcc:	1000071e 	bne	r2,zero,1009fec <__swbuf_r+0x114>
 1009fd0:	80800017 	ldw	r2,0(r16)
 1009fd4:	00c00044 	movi	r3,1
 1009fd8:	003fda06 	br	1009f44 <__swbuf_r+0x6c>
 1009fdc:	800b883a 	mov	r5,r16
 1009fe0:	9009883a 	mov	r4,r18
 1009fe4:	1004c640 	call	1004c64 <_fflush_r>
 1009fe8:	103fe326 	beq	r2,zero,1009f78 <__swbuf_r+0xa0>
 1009fec:	00bfffc4 	movi	r2,-1
 1009ff0:	003fe206 	br	1009f7c <__swbuf_r+0xa4>
 1009ff4:	800b883a 	mov	r5,r16
 1009ff8:	9009883a 	mov	r4,r18
 1009ffc:	100306c0 	call	100306c <__swsetup_r>
 100a000:	103ffa1e 	bne	r2,zero,1009fec <__swbuf_r+0x114>
 100a004:	8100030b 	ldhu	r4,12(r16)
 100a008:	80c00417 	ldw	r3,16(r16)
 100a00c:	003fc506 	br	1009f24 <__swbuf_r+0x4c>
 100a010:	10050400 	call	1005040 <__sinit>
 100a014:	003fbc06 	br	1009f08 <__swbuf_r+0x30>

0100a018 <__swbuf>:
 100a018:	00804074 	movhi	r2,257
 100a01c:	1086be04 	addi	r2,r2,6904
 100a020:	280d883a 	mov	r6,r5
 100a024:	200b883a 	mov	r5,r4
 100a028:	11000017 	ldw	r4,0(r2)
 100a02c:	1009ed81 	jmpi	1009ed8 <__swbuf_r>

0100a030 <_wcrtomb_r>:
 100a030:	defff604 	addi	sp,sp,-40
 100a034:	00804074 	movhi	r2,257
 100a038:	dc800815 	stw	r18,32(sp)
 100a03c:	dc400715 	stw	r17,28(sp)
 100a040:	dc000615 	stw	r16,24(sp)
 100a044:	1086c204 	addi	r2,r2,6920
 100a048:	dfc00915 	stw	ra,36(sp)
 100a04c:	2021883a 	mov	r16,r4
 100a050:	3823883a 	mov	r17,r7
 100a054:	14800017 	ldw	r18,0(r2)
 100a058:	28001426 	beq	r5,zero,100a0ac <_wcrtomb_r+0x7c>
 100a05c:	d9400415 	stw	r5,16(sp)
 100a060:	d9800515 	stw	r6,20(sp)
 100a064:	1005b840 	call	1005b84 <__locale_charset>
 100a068:	d9800517 	ldw	r6,20(sp)
 100a06c:	d9400417 	ldw	r5,16(sp)
 100a070:	100f883a 	mov	r7,r2
 100a074:	dc400015 	stw	r17,0(sp)
 100a078:	8009883a 	mov	r4,r16
 100a07c:	903ee83a 	callr	r18
 100a080:	00ffffc4 	movi	r3,-1
 100a084:	10c0031e 	bne	r2,r3,100a094 <_wcrtomb_r+0x64>
 100a088:	88000015 	stw	zero,0(r17)
 100a08c:	00c02284 	movi	r3,138
 100a090:	80c00015 	stw	r3,0(r16)
 100a094:	dfc00917 	ldw	ra,36(sp)
 100a098:	dc800817 	ldw	r18,32(sp)
 100a09c:	dc400717 	ldw	r17,28(sp)
 100a0a0:	dc000617 	ldw	r16,24(sp)
 100a0a4:	dec00a04 	addi	sp,sp,40
 100a0a8:	f800283a 	ret
 100a0ac:	1005b840 	call	1005b84 <__locale_charset>
 100a0b0:	100f883a 	mov	r7,r2
 100a0b4:	dc400015 	stw	r17,0(sp)
 100a0b8:	000d883a 	mov	r6,zero
 100a0bc:	d9400104 	addi	r5,sp,4
 100a0c0:	8009883a 	mov	r4,r16
 100a0c4:	903ee83a 	callr	r18
 100a0c8:	003fed06 	br	100a080 <_wcrtomb_r+0x50>

0100a0cc <wcrtomb>:
 100a0cc:	defff604 	addi	sp,sp,-40
 100a0d0:	00804074 	movhi	r2,257
 100a0d4:	dc800615 	stw	r18,24(sp)
 100a0d8:	dc400515 	stw	r17,20(sp)
 100a0dc:	1086be04 	addi	r2,r2,6904
 100a0e0:	dfc00915 	stw	ra,36(sp)
 100a0e4:	dd000815 	stw	r20,32(sp)
 100a0e8:	dcc00715 	stw	r19,28(sp)
 100a0ec:	dc000415 	stw	r16,16(sp)
 100a0f0:	3025883a 	mov	r18,r6
 100a0f4:	14400017 	ldw	r17,0(r2)
 100a0f8:	20001926 	beq	r4,zero,100a160 <wcrtomb+0x94>
 100a0fc:	00804074 	movhi	r2,257
 100a100:	1086c204 	addi	r2,r2,6920
 100a104:	15000017 	ldw	r20,0(r2)
 100a108:	2021883a 	mov	r16,r4
 100a10c:	2827883a 	mov	r19,r5
 100a110:	1005b840 	call	1005b84 <__locale_charset>
 100a114:	100f883a 	mov	r7,r2
 100a118:	dc800015 	stw	r18,0(sp)
 100a11c:	980d883a 	mov	r6,r19
 100a120:	800b883a 	mov	r5,r16
 100a124:	8809883a 	mov	r4,r17
 100a128:	a03ee83a 	callr	r20
 100a12c:	00ffffc4 	movi	r3,-1
 100a130:	10c0031e 	bne	r2,r3,100a140 <wcrtomb+0x74>
 100a134:	90000015 	stw	zero,0(r18)
 100a138:	00c02284 	movi	r3,138
 100a13c:	88c00015 	stw	r3,0(r17)
 100a140:	dfc00917 	ldw	ra,36(sp)
 100a144:	dd000817 	ldw	r20,32(sp)
 100a148:	dcc00717 	ldw	r19,28(sp)
 100a14c:	dc800617 	ldw	r18,24(sp)
 100a150:	dc400517 	ldw	r17,20(sp)
 100a154:	dc000417 	ldw	r16,16(sp)
 100a158:	dec00a04 	addi	sp,sp,40
 100a15c:	f800283a 	ret
 100a160:	00804074 	movhi	r2,257
 100a164:	1086c204 	addi	r2,r2,6920
 100a168:	14000017 	ldw	r16,0(r2)
 100a16c:	1005b840 	call	1005b84 <__locale_charset>
 100a170:	100f883a 	mov	r7,r2
 100a174:	dc800015 	stw	r18,0(sp)
 100a178:	000d883a 	mov	r6,zero
 100a17c:	d9400104 	addi	r5,sp,4
 100a180:	8809883a 	mov	r4,r17
 100a184:	803ee83a 	callr	r16
 100a188:	003fe806 	br	100a12c <wcrtomb+0x60>

0100a18c <__ascii_wctomb>:
 100a18c:	28000526 	beq	r5,zero,100a1a4 <__ascii_wctomb+0x18>
 100a190:	00803fc4 	movi	r2,255
 100a194:	11800536 	bltu	r2,r6,100a1ac <__ascii_wctomb+0x20>
 100a198:	29800005 	stb	r6,0(r5)
 100a19c:	00800044 	movi	r2,1
 100a1a0:	f800283a 	ret
 100a1a4:	0005883a 	mov	r2,zero
 100a1a8:	f800283a 	ret
 100a1ac:	00802284 	movi	r2,138
 100a1b0:	20800015 	stw	r2,0(r4)
 100a1b4:	00bfffc4 	movi	r2,-1
 100a1b8:	f800283a 	ret

0100a1bc <_wctomb_r>:
 100a1bc:	00804074 	movhi	r2,257
 100a1c0:	defff904 	addi	sp,sp,-28
 100a1c4:	1086c204 	addi	r2,r2,6920
 100a1c8:	dfc00615 	stw	ra,24(sp)
 100a1cc:	dc400515 	stw	r17,20(sp)
 100a1d0:	dc000415 	stw	r16,16(sp)
 100a1d4:	3823883a 	mov	r17,r7
 100a1d8:	14000017 	ldw	r16,0(r2)
 100a1dc:	d9000115 	stw	r4,4(sp)
 100a1e0:	d9400215 	stw	r5,8(sp)
 100a1e4:	d9800315 	stw	r6,12(sp)
 100a1e8:	1005b840 	call	1005b84 <__locale_charset>
 100a1ec:	d9800317 	ldw	r6,12(sp)
 100a1f0:	d9400217 	ldw	r5,8(sp)
 100a1f4:	d9000117 	ldw	r4,4(sp)
 100a1f8:	100f883a 	mov	r7,r2
 100a1fc:	dc400015 	stw	r17,0(sp)
 100a200:	803ee83a 	callr	r16
 100a204:	dfc00617 	ldw	ra,24(sp)
 100a208:	dc400517 	ldw	r17,20(sp)
 100a20c:	dc000417 	ldw	r16,16(sp)
 100a210:	dec00704 	addi	sp,sp,28
 100a214:	f800283a 	ret

0100a218 <__udivdi3>:
 100a218:	defff504 	addi	sp,sp,-44
 100a21c:	dcc00415 	stw	r19,16(sp)
 100a220:	dc000115 	stw	r16,4(sp)
 100a224:	dfc00a15 	stw	ra,40(sp)
 100a228:	df000915 	stw	fp,36(sp)
 100a22c:	ddc00815 	stw	r23,32(sp)
 100a230:	dd800715 	stw	r22,28(sp)
 100a234:	dd400615 	stw	r21,24(sp)
 100a238:	dd000515 	stw	r20,20(sp)
 100a23c:	dc800315 	stw	r18,12(sp)
 100a240:	dc400215 	stw	r17,8(sp)
 100a244:	2027883a 	mov	r19,r4
 100a248:	2821883a 	mov	r16,r5
 100a24c:	3800411e 	bne	r7,zero,100a354 <__udivdi3+0x13c>
 100a250:	3023883a 	mov	r17,r6
 100a254:	2025883a 	mov	r18,r4
 100a258:	2980522e 	bgeu	r5,r6,100a3a4 <__udivdi3+0x18c>
 100a25c:	00bfffd4 	movui	r2,65535
 100a260:	282d883a 	mov	r22,r5
 100a264:	1180a836 	bltu	r2,r6,100a508 <__udivdi3+0x2f0>
 100a268:	00803fc4 	movi	r2,255
 100a26c:	1185803a 	cmpltu	r2,r2,r6
 100a270:	100490fa 	slli	r2,r2,3
 100a274:	3086d83a 	srl	r3,r6,r2
 100a278:	01004074 	movhi	r4,257
 100a27c:	213fc704 	addi	r4,r4,-228
 100a280:	20c7883a 	add	r3,r4,r3
 100a284:	18c00003 	ldbu	r3,0(r3)
 100a288:	1885883a 	add	r2,r3,r2
 100a28c:	00c00804 	movi	r3,32
 100a290:	1887c83a 	sub	r3,r3,r2
 100a294:	18000526 	beq	r3,zero,100a2ac <__udivdi3+0x94>
 100a298:	80e0983a 	sll	r16,r16,r3
 100a29c:	9884d83a 	srl	r2,r19,r2
 100a2a0:	30e2983a 	sll	r17,r6,r3
 100a2a4:	98e4983a 	sll	r18,r19,r3
 100a2a8:	142cb03a 	or	r22,r2,r16
 100a2ac:	882ad43a 	srli	r21,r17,16
 100a2b0:	b009883a 	mov	r4,r22
 100a2b4:	8d3fffcc 	andi	r20,r17,65535
 100a2b8:	a80b883a 	mov	r5,r21
 100a2bc:	100ae240 	call	100ae24 <__umodsi3>
 100a2c0:	b009883a 	mov	r4,r22
 100a2c4:	a80b883a 	mov	r5,r21
 100a2c8:	1027883a 	mov	r19,r2
 100a2cc:	100adc00 	call	100adc0 <__udivsi3>
 100a2d0:	102d883a 	mov	r22,r2
 100a2d4:	9826943a 	slli	r19,r19,16
 100a2d8:	9004d43a 	srli	r2,r18,16
 100a2dc:	a5a1383a 	mul	r16,r20,r22
 100a2e0:	14c4b03a 	or	r2,r2,r19
 100a2e4:	1400052e 	bgeu	r2,r16,100a2fc <__udivdi3+0xe4>
 100a2e8:	1445883a 	add	r2,r2,r17
 100a2ec:	b0ffffc4 	addi	r3,r22,-1
 100a2f0:	14400136 	bltu	r2,r17,100a2f8 <__udivdi3+0xe0>
 100a2f4:	14012336 	bltu	r2,r16,100a784 <__udivdi3+0x56c>
 100a2f8:	182d883a 	mov	r22,r3
 100a2fc:	1421c83a 	sub	r16,r2,r16
 100a300:	a80b883a 	mov	r5,r21
 100a304:	8009883a 	mov	r4,r16
 100a308:	100ae240 	call	100ae24 <__umodsi3>
 100a30c:	1027883a 	mov	r19,r2
 100a310:	a80b883a 	mov	r5,r21
 100a314:	8009883a 	mov	r4,r16
 100a318:	100adc00 	call	100adc0 <__udivsi3>
 100a31c:	9826943a 	slli	r19,r19,16
 100a320:	a0a9383a 	mul	r20,r20,r2
 100a324:	94bfffcc 	andi	r18,r18,65535
 100a328:	94e4b03a 	or	r18,r18,r19
 100a32c:	9500052e 	bgeu	r18,r20,100a344 <__udivdi3+0x12c>
 100a330:	8ca5883a 	add	r18,r17,r18
 100a334:	10ffffc4 	addi	r3,r2,-1
 100a338:	9440f136 	bltu	r18,r17,100a700 <__udivdi3+0x4e8>
 100a33c:	9500f02e 	bgeu	r18,r20,100a700 <__udivdi3+0x4e8>
 100a340:	10bfff84 	addi	r2,r2,-2
 100a344:	b00c943a 	slli	r6,r22,16
 100a348:	0007883a 	mov	r3,zero
 100a34c:	3084b03a 	or	r2,r6,r2
 100a350:	00005906 	br	100a4b8 <__udivdi3+0x2a0>
 100a354:	29c05636 	bltu	r5,r7,100a4b0 <__udivdi3+0x298>
 100a358:	00bfffd4 	movui	r2,65535
 100a35c:	11c0622e 	bgeu	r2,r7,100a4e8 <__udivdi3+0x2d0>
 100a360:	00804034 	movhi	r2,256
 100a364:	10bfffc4 	addi	r2,r2,-1
 100a368:	11c0ee36 	bltu	r2,r7,100a724 <__udivdi3+0x50c>
 100a36c:	00800404 	movi	r2,16
 100a370:	3886d83a 	srl	r3,r7,r2
 100a374:	01004074 	movhi	r4,257
 100a378:	213fc704 	addi	r4,r4,-228
 100a37c:	20c7883a 	add	r3,r4,r3
 100a380:	18c00003 	ldbu	r3,0(r3)
 100a384:	05400804 	movi	r21,32
 100a388:	1885883a 	add	r2,r3,r2
 100a38c:	a8abc83a 	sub	r21,r21,r2
 100a390:	a800621e 	bne	r21,zero,100a51c <__udivdi3+0x304>
 100a394:	3c00e936 	bltu	r7,r16,100a73c <__udivdi3+0x524>
 100a398:	9985403a 	cmpgeu	r2,r19,r6
 100a39c:	0007883a 	mov	r3,zero
 100a3a0:	00004506 	br	100a4b8 <__udivdi3+0x2a0>
 100a3a4:	3000041e 	bne	r6,zero,100a3b8 <__udivdi3+0x1a0>
 100a3a8:	000b883a 	mov	r5,zero
 100a3ac:	01000044 	movi	r4,1
 100a3b0:	100adc00 	call	100adc0 <__udivsi3>
 100a3b4:	1023883a 	mov	r17,r2
 100a3b8:	00bfffd4 	movui	r2,65535
 100a3bc:	14404e2e 	bgeu	r2,r17,100a4f8 <__udivdi3+0x2e0>
 100a3c0:	00804034 	movhi	r2,256
 100a3c4:	10bfffc4 	addi	r2,r2,-1
 100a3c8:	1440d836 	bltu	r2,r17,100a72c <__udivdi3+0x514>
 100a3cc:	00800404 	movi	r2,16
 100a3d0:	8886d83a 	srl	r3,r17,r2
 100a3d4:	01004074 	movhi	r4,257
 100a3d8:	213fc704 	addi	r4,r4,-228
 100a3dc:	20c7883a 	add	r3,r4,r3
 100a3e0:	18c00003 	ldbu	r3,0(r3)
 100a3e4:	1885883a 	add	r2,r3,r2
 100a3e8:	00c00804 	movi	r3,32
 100a3ec:	1887c83a 	sub	r3,r3,r2
 100a3f0:	18008f1e 	bne	r3,zero,100a630 <__udivdi3+0x418>
 100a3f4:	882ad43a 	srli	r21,r17,16
 100a3f8:	8461c83a 	sub	r16,r16,r17
 100a3fc:	8d3fffcc 	andi	r20,r17,65535
 100a400:	00c00044 	movi	r3,1
 100a404:	8009883a 	mov	r4,r16
 100a408:	a80b883a 	mov	r5,r21
 100a40c:	d8c00015 	stw	r3,0(sp)
 100a410:	100ae240 	call	100ae24 <__umodsi3>
 100a414:	8009883a 	mov	r4,r16
 100a418:	a80b883a 	mov	r5,r21
 100a41c:	1027883a 	mov	r19,r2
 100a420:	100adc00 	call	100adc0 <__udivsi3>
 100a424:	9826943a 	slli	r19,r19,16
 100a428:	9008d43a 	srli	r4,r18,16
 100a42c:	1521383a 	mul	r16,r2,r20
 100a430:	102d883a 	mov	r22,r2
 100a434:	24c8b03a 	or	r4,r4,r19
 100a438:	d8c00017 	ldw	r3,0(sp)
 100a43c:	2400052e 	bgeu	r4,r16,100a454 <__udivdi3+0x23c>
 100a440:	2449883a 	add	r4,r4,r17
 100a444:	b0bfffc4 	addi	r2,r22,-1
 100a448:	24400136 	bltu	r4,r17,100a450 <__udivdi3+0x238>
 100a44c:	2400ca36 	bltu	r4,r16,100a778 <__udivdi3+0x560>
 100a450:	102d883a 	mov	r22,r2
 100a454:	2421c83a 	sub	r16,r4,r16
 100a458:	a80b883a 	mov	r5,r21
 100a45c:	8009883a 	mov	r4,r16
 100a460:	d8c00015 	stw	r3,0(sp)
 100a464:	100ae240 	call	100ae24 <__umodsi3>
 100a468:	1027883a 	mov	r19,r2
 100a46c:	a80b883a 	mov	r5,r21
 100a470:	8009883a 	mov	r4,r16
 100a474:	100adc00 	call	100adc0 <__udivsi3>
 100a478:	9826943a 	slli	r19,r19,16
 100a47c:	1529383a 	mul	r20,r2,r20
 100a480:	94bfffcc 	andi	r18,r18,65535
 100a484:	94e4b03a 	or	r18,r18,r19
 100a488:	d8c00017 	ldw	r3,0(sp)
 100a48c:	9500052e 	bgeu	r18,r20,100a4a4 <__udivdi3+0x28c>
 100a490:	8ca5883a 	add	r18,r17,r18
 100a494:	113fffc4 	addi	r4,r2,-1
 100a498:	94409736 	bltu	r18,r17,100a6f8 <__udivdi3+0x4e0>
 100a49c:	9500962e 	bgeu	r18,r20,100a6f8 <__udivdi3+0x4e0>
 100a4a0:	10bfff84 	addi	r2,r2,-2
 100a4a4:	b00c943a 	slli	r6,r22,16
 100a4a8:	3084b03a 	or	r2,r6,r2
 100a4ac:	00000206 	br	100a4b8 <__udivdi3+0x2a0>
 100a4b0:	0007883a 	mov	r3,zero
 100a4b4:	0005883a 	mov	r2,zero
 100a4b8:	dfc00a17 	ldw	ra,40(sp)
 100a4bc:	df000917 	ldw	fp,36(sp)
 100a4c0:	ddc00817 	ldw	r23,32(sp)
 100a4c4:	dd800717 	ldw	r22,28(sp)
 100a4c8:	dd400617 	ldw	r21,24(sp)
 100a4cc:	dd000517 	ldw	r20,20(sp)
 100a4d0:	dcc00417 	ldw	r19,16(sp)
 100a4d4:	dc800317 	ldw	r18,12(sp)
 100a4d8:	dc400217 	ldw	r17,8(sp)
 100a4dc:	dc000117 	ldw	r16,4(sp)
 100a4e0:	dec00b04 	addi	sp,sp,44
 100a4e4:	f800283a 	ret
 100a4e8:	00803fc4 	movi	r2,255
 100a4ec:	11c5803a 	cmpltu	r2,r2,r7
 100a4f0:	100490fa 	slli	r2,r2,3
 100a4f4:	003f9e06 	br	100a370 <__udivdi3+0x158>
 100a4f8:	00803fc4 	movi	r2,255
 100a4fc:	1445803a 	cmpltu	r2,r2,r17
 100a500:	100490fa 	slli	r2,r2,3
 100a504:	003fb206 	br	100a3d0 <__udivdi3+0x1b8>
 100a508:	00804034 	movhi	r2,256
 100a50c:	10bfffc4 	addi	r2,r2,-1
 100a510:	11808836 	bltu	r2,r6,100a734 <__udivdi3+0x51c>
 100a514:	00800404 	movi	r2,16
 100a518:	003f5606 	br	100a274 <__udivdi3+0x5c>
 100a51c:	30aed83a 	srl	r23,r6,r2
 100a520:	3d4e983a 	sll	r7,r7,r21
 100a524:	80acd83a 	srl	r22,r16,r2
 100a528:	9884d83a 	srl	r2,r19,r2
 100a52c:	3deeb03a 	or	r23,r7,r23
 100a530:	b824d43a 	srli	r18,r23,16
 100a534:	8560983a 	sll	r16,r16,r21
 100a538:	b009883a 	mov	r4,r22
 100a53c:	900b883a 	mov	r5,r18
 100a540:	3568983a 	sll	r20,r6,r21
 100a544:	1420b03a 	or	r16,r2,r16
 100a548:	100ae240 	call	100ae24 <__umodsi3>
 100a54c:	b009883a 	mov	r4,r22
 100a550:	900b883a 	mov	r5,r18
 100a554:	1023883a 	mov	r17,r2
 100a558:	100adc00 	call	100adc0 <__udivsi3>
 100a55c:	8808943a 	slli	r4,r17,16
 100a560:	bf3fffcc 	andi	fp,r23,65535
 100a564:	8006d43a 	srli	r3,r16,16
 100a568:	e0a3383a 	mul	r17,fp,r2
 100a56c:	100d883a 	mov	r6,r2
 100a570:	1906b03a 	or	r3,r3,r4
 100a574:	1c40042e 	bgeu	r3,r17,100a588 <__udivdi3+0x370>
 100a578:	1dc7883a 	add	r3,r3,r23
 100a57c:	10bfffc4 	addi	r2,r2,-1
 100a580:	1dc0752e 	bgeu	r3,r23,100a758 <__udivdi3+0x540>
 100a584:	100d883a 	mov	r6,r2
 100a588:	1c63c83a 	sub	r17,r3,r17
 100a58c:	900b883a 	mov	r5,r18
 100a590:	8809883a 	mov	r4,r17
 100a594:	d9800015 	stw	r6,0(sp)
 100a598:	100ae240 	call	100ae24 <__umodsi3>
 100a59c:	102d883a 	mov	r22,r2
 100a5a0:	8809883a 	mov	r4,r17
 100a5a4:	900b883a 	mov	r5,r18
 100a5a8:	100adc00 	call	100adc0 <__udivsi3>
 100a5ac:	b02c943a 	slli	r22,r22,16
 100a5b0:	e089383a 	mul	r4,fp,r2
 100a5b4:	843fffcc 	andi	r16,r16,65535
 100a5b8:	85a0b03a 	or	r16,r16,r22
 100a5bc:	d9800017 	ldw	r6,0(sp)
 100a5c0:	8100042e 	bgeu	r16,r4,100a5d4 <__udivdi3+0x3bc>
 100a5c4:	85e1883a 	add	r16,r16,r23
 100a5c8:	10ffffc4 	addi	r3,r2,-1
 100a5cc:	85c05e2e 	bgeu	r16,r23,100a748 <__udivdi3+0x530>
 100a5d0:	1805883a 	mov	r2,r3
 100a5d4:	300c943a 	slli	r6,r6,16
 100a5d8:	a17fffcc 	andi	r5,r20,65535
 100a5dc:	a028d43a 	srli	r20,r20,16
 100a5e0:	3084b03a 	or	r2,r6,r2
 100a5e4:	10ffffcc 	andi	r3,r2,65535
 100a5e8:	100cd43a 	srli	r6,r2,16
 100a5ec:	194f383a 	mul	r7,r3,r5
 100a5f0:	1d07383a 	mul	r3,r3,r20
 100a5f4:	314b383a 	mul	r5,r6,r5
 100a5f8:	3810d43a 	srli	r8,r7,16
 100a5fc:	8121c83a 	sub	r16,r16,r4
 100a600:	1947883a 	add	r3,r3,r5
 100a604:	40c7883a 	add	r3,r8,r3
 100a608:	350d383a 	mul	r6,r6,r20
 100a60c:	1940022e 	bgeu	r3,r5,100a618 <__udivdi3+0x400>
 100a610:	01000074 	movhi	r4,1
 100a614:	310d883a 	add	r6,r6,r4
 100a618:	1828d43a 	srli	r20,r3,16
 100a61c:	a18d883a 	add	r6,r20,r6
 100a620:	81803e36 	bltu	r16,r6,100a71c <__udivdi3+0x504>
 100a624:	81803826 	beq	r16,r6,100a708 <__udivdi3+0x4f0>
 100a628:	0007883a 	mov	r3,zero
 100a62c:	003fa206 	br	100a4b8 <__udivdi3+0x2a0>
 100a630:	88e2983a 	sll	r17,r17,r3
 100a634:	80a8d83a 	srl	r20,r16,r2
 100a638:	80e0983a 	sll	r16,r16,r3
 100a63c:	882ad43a 	srli	r21,r17,16
 100a640:	9884d83a 	srl	r2,r19,r2
 100a644:	a009883a 	mov	r4,r20
 100a648:	a80b883a 	mov	r5,r21
 100a64c:	142eb03a 	or	r23,r2,r16
 100a650:	98e4983a 	sll	r18,r19,r3
 100a654:	100ae240 	call	100ae24 <__umodsi3>
 100a658:	a009883a 	mov	r4,r20
 100a65c:	a80b883a 	mov	r5,r21
 100a660:	1021883a 	mov	r16,r2
 100a664:	100adc00 	call	100adc0 <__udivsi3>
 100a668:	1039883a 	mov	fp,r2
 100a66c:	8d3fffcc 	andi	r20,r17,65535
 100a670:	8020943a 	slli	r16,r16,16
 100a674:	b804d43a 	srli	r2,r23,16
 100a678:	a72d383a 	mul	r22,r20,fp
 100a67c:	1404b03a 	or	r2,r2,r16
 100a680:	1580062e 	bgeu	r2,r22,100a69c <__udivdi3+0x484>
 100a684:	1445883a 	add	r2,r2,r17
 100a688:	e0ffffc4 	addi	r3,fp,-1
 100a68c:	14403836 	bltu	r2,r17,100a770 <__udivdi3+0x558>
 100a690:	1580372e 	bgeu	r2,r22,100a770 <__udivdi3+0x558>
 100a694:	e73fff84 	addi	fp,fp,-2
 100a698:	1445883a 	add	r2,r2,r17
 100a69c:	15adc83a 	sub	r22,r2,r22
 100a6a0:	a80b883a 	mov	r5,r21
 100a6a4:	b009883a 	mov	r4,r22
 100a6a8:	100ae240 	call	100ae24 <__umodsi3>
 100a6ac:	1027883a 	mov	r19,r2
 100a6b0:	b009883a 	mov	r4,r22
 100a6b4:	a80b883a 	mov	r5,r21
 100a6b8:	100adc00 	call	100adc0 <__udivsi3>
 100a6bc:	9826943a 	slli	r19,r19,16
 100a6c0:	a0a1383a 	mul	r16,r20,r2
 100a6c4:	b93fffcc 	andi	r4,r23,65535
 100a6c8:	24c8b03a 	or	r4,r4,r19
 100a6cc:	2400062e 	bgeu	r4,r16,100a6e8 <__udivdi3+0x4d0>
 100a6d0:	2449883a 	add	r4,r4,r17
 100a6d4:	10ffffc4 	addi	r3,r2,-1
 100a6d8:	24402336 	bltu	r4,r17,100a768 <__udivdi3+0x550>
 100a6dc:	2400222e 	bgeu	r4,r16,100a768 <__udivdi3+0x550>
 100a6e0:	10bfff84 	addi	r2,r2,-2
 100a6e4:	2449883a 	add	r4,r4,r17
 100a6e8:	e038943a 	slli	fp,fp,16
 100a6ec:	2421c83a 	sub	r16,r4,r16
 100a6f0:	e086b03a 	or	r3,fp,r2
 100a6f4:	003f4306 	br	100a404 <__udivdi3+0x1ec>
 100a6f8:	2005883a 	mov	r2,r4
 100a6fc:	003f6906 	br	100a4a4 <__udivdi3+0x28c>
 100a700:	1805883a 	mov	r2,r3
 100a704:	003f0f06 	br	100a344 <__udivdi3+0x12c>
 100a708:	1806943a 	slli	r3,r3,16
 100a70c:	9d66983a 	sll	r19,r19,r21
 100a710:	39ffffcc 	andi	r7,r7,65535
 100a714:	19c7883a 	add	r3,r3,r7
 100a718:	98ffc32e 	bgeu	r19,r3,100a628 <__udivdi3+0x410>
 100a71c:	10bfffc4 	addi	r2,r2,-1
 100a720:	003fc106 	br	100a628 <__udivdi3+0x410>
 100a724:	00800604 	movi	r2,24
 100a728:	003f1106 	br	100a370 <__udivdi3+0x158>
 100a72c:	00800604 	movi	r2,24
 100a730:	003f2706 	br	100a3d0 <__udivdi3+0x1b8>
 100a734:	00800604 	movi	r2,24
 100a738:	003ece06 	br	100a274 <__udivdi3+0x5c>
 100a73c:	0007883a 	mov	r3,zero
 100a740:	00800044 	movi	r2,1
 100a744:	003f5c06 	br	100a4b8 <__udivdi3+0x2a0>
 100a748:	813fa12e 	bgeu	r16,r4,100a5d0 <__udivdi3+0x3b8>
 100a74c:	10bfff84 	addi	r2,r2,-2
 100a750:	85e1883a 	add	r16,r16,r23
 100a754:	003f9f06 	br	100a5d4 <__udivdi3+0x3bc>
 100a758:	1c7f8a2e 	bgeu	r3,r17,100a584 <__udivdi3+0x36c>
 100a75c:	31bfff84 	addi	r6,r6,-2
 100a760:	1dc7883a 	add	r3,r3,r23
 100a764:	003f8806 	br	100a588 <__udivdi3+0x370>
 100a768:	1805883a 	mov	r2,r3
 100a76c:	003fde06 	br	100a6e8 <__udivdi3+0x4d0>
 100a770:	1839883a 	mov	fp,r3
 100a774:	003fc906 	br	100a69c <__udivdi3+0x484>
 100a778:	b5bfff84 	addi	r22,r22,-2
 100a77c:	2449883a 	add	r4,r4,r17
 100a780:	003f3406 	br	100a454 <__udivdi3+0x23c>
 100a784:	b5bfff84 	addi	r22,r22,-2
 100a788:	1445883a 	add	r2,r2,r17
 100a78c:	003edb06 	br	100a2fc <__udivdi3+0xe4>

0100a790 <__umoddi3>:
 100a790:	defff404 	addi	sp,sp,-48
 100a794:	df000a15 	stw	fp,40(sp)
 100a798:	dc400315 	stw	r17,12(sp)
 100a79c:	dc000215 	stw	r16,8(sp)
 100a7a0:	dfc00b15 	stw	ra,44(sp)
 100a7a4:	ddc00915 	stw	r23,36(sp)
 100a7a8:	dd800815 	stw	r22,32(sp)
 100a7ac:	dd400715 	stw	r21,28(sp)
 100a7b0:	dd000615 	stw	r20,24(sp)
 100a7b4:	dcc00515 	stw	r19,20(sp)
 100a7b8:	dc800415 	stw	r18,16(sp)
 100a7bc:	2021883a 	mov	r16,r4
 100a7c0:	2823883a 	mov	r17,r5
 100a7c4:	2839883a 	mov	fp,r5
 100a7c8:	38003c1e 	bne	r7,zero,100a8bc <__umoddi3+0x12c>
 100a7cc:	3027883a 	mov	r19,r6
 100a7d0:	2029883a 	mov	r20,r4
 100a7d4:	2980512e 	bgeu	r5,r6,100a91c <__umoddi3+0x18c>
 100a7d8:	00bfffd4 	movui	r2,65535
 100a7dc:	11809a36 	bltu	r2,r6,100aa48 <__umoddi3+0x2b8>
 100a7e0:	01003fc4 	movi	r4,255
 100a7e4:	2189803a 	cmpltu	r4,r4,r6
 100a7e8:	200890fa 	slli	r4,r4,3
 100a7ec:	3104d83a 	srl	r2,r6,r4
 100a7f0:	00c04074 	movhi	r3,257
 100a7f4:	18ffc704 	addi	r3,r3,-228
 100a7f8:	1885883a 	add	r2,r3,r2
 100a7fc:	10c00003 	ldbu	r3,0(r2)
 100a800:	00800804 	movi	r2,32
 100a804:	1909883a 	add	r4,r3,r4
 100a808:	1125c83a 	sub	r18,r2,r4
 100a80c:	90000526 	beq	r18,zero,100a824 <__umoddi3+0x94>
 100a810:	8ca2983a 	sll	r17,r17,r18
 100a814:	8108d83a 	srl	r4,r16,r4
 100a818:	34a6983a 	sll	r19,r6,r18
 100a81c:	84a8983a 	sll	r20,r16,r18
 100a820:	2478b03a 	or	fp,r4,r17
 100a824:	982ed43a 	srli	r23,r19,16
 100a828:	e009883a 	mov	r4,fp
 100a82c:	9dbfffcc 	andi	r22,r19,65535
 100a830:	b80b883a 	mov	r5,r23
 100a834:	100ae240 	call	100ae24 <__umodsi3>
 100a838:	e009883a 	mov	r4,fp
 100a83c:	b80b883a 	mov	r5,r23
 100a840:	102b883a 	mov	r21,r2
 100a844:	100adc00 	call	100adc0 <__udivsi3>
 100a848:	a806943a 	slli	r3,r21,16
 100a84c:	a008d43a 	srli	r4,r20,16
 100a850:	b085383a 	mul	r2,r22,r2
 100a854:	20c8b03a 	or	r4,r4,r3
 100a858:	2080032e 	bgeu	r4,r2,100a868 <__umoddi3+0xd8>
 100a85c:	24c9883a 	add	r4,r4,r19
 100a860:	24c00136 	bltu	r4,r19,100a868 <__umoddi3+0xd8>
 100a864:	20811036 	bltu	r4,r2,100aca8 <__umoddi3+0x518>
 100a868:	20abc83a 	sub	r21,r4,r2
 100a86c:	b80b883a 	mov	r5,r23
 100a870:	a809883a 	mov	r4,r21
 100a874:	100ae240 	call	100ae24 <__umodsi3>
 100a878:	1023883a 	mov	r17,r2
 100a87c:	b80b883a 	mov	r5,r23
 100a880:	a809883a 	mov	r4,r21
 100a884:	100adc00 	call	100adc0 <__udivsi3>
 100a888:	8822943a 	slli	r17,r17,16
 100a88c:	b085383a 	mul	r2,r22,r2
 100a890:	a0ffffcc 	andi	r3,r20,65535
 100a894:	1c46b03a 	or	r3,r3,r17
 100a898:	1880042e 	bgeu	r3,r2,100a8ac <__umoddi3+0x11c>
 100a89c:	1cc7883a 	add	r3,r3,r19
 100a8a0:	1cc00236 	bltu	r3,r19,100a8ac <__umoddi3+0x11c>
 100a8a4:	1880012e 	bgeu	r3,r2,100a8ac <__umoddi3+0x11c>
 100a8a8:	1cc7883a 	add	r3,r3,r19
 100a8ac:	1885c83a 	sub	r2,r3,r2
 100a8b0:	1484d83a 	srl	r2,r2,r18
 100a8b4:	0007883a 	mov	r3,zero
 100a8b8:	00004f06 	br	100a9f8 <__umoddi3+0x268>
 100a8bc:	29c04c36 	bltu	r5,r7,100a9f0 <__umoddi3+0x260>
 100a8c0:	00bfffd4 	movui	r2,65535
 100a8c4:	11c0582e 	bgeu	r2,r7,100aa28 <__umoddi3+0x298>
 100a8c8:	00804034 	movhi	r2,256
 100a8cc:	10bfffc4 	addi	r2,r2,-1
 100a8d0:	11c0e736 	bltu	r2,r7,100ac70 <__umoddi3+0x4e0>
 100a8d4:	01000404 	movi	r4,16
 100a8d8:	3904d83a 	srl	r2,r7,r4
 100a8dc:	00c04074 	movhi	r3,257
 100a8e0:	18ffc704 	addi	r3,r3,-228
 100a8e4:	1885883a 	add	r2,r3,r2
 100a8e8:	14c00003 	ldbu	r19,0(r2)
 100a8ec:	00c00804 	movi	r3,32
 100a8f0:	9927883a 	add	r19,r19,r4
 100a8f4:	1ce9c83a 	sub	r20,r3,r19
 100a8f8:	a000581e 	bne	r20,zero,100aa5c <__umoddi3+0x2cc>
 100a8fc:	3c400136 	bltu	r7,r17,100a904 <__umoddi3+0x174>
 100a900:	8180eb36 	bltu	r16,r6,100acb0 <__umoddi3+0x520>
 100a904:	8185c83a 	sub	r2,r16,r6
 100a908:	89e3c83a 	sub	r17,r17,r7
 100a90c:	8089803a 	cmpltu	r4,r16,r2
 100a910:	8939c83a 	sub	fp,r17,r4
 100a914:	e007883a 	mov	r3,fp
 100a918:	00003706 	br	100a9f8 <__umoddi3+0x268>
 100a91c:	3000041e 	bne	r6,zero,100a930 <__umoddi3+0x1a0>
 100a920:	000b883a 	mov	r5,zero
 100a924:	01000044 	movi	r4,1
 100a928:	100adc00 	call	100adc0 <__udivsi3>
 100a92c:	1027883a 	mov	r19,r2
 100a930:	00bfffd4 	movui	r2,65535
 100a934:	14c0402e 	bgeu	r2,r19,100aa38 <__umoddi3+0x2a8>
 100a938:	00804034 	movhi	r2,256
 100a93c:	10bfffc4 	addi	r2,r2,-1
 100a940:	14c0cd36 	bltu	r2,r19,100ac78 <__umoddi3+0x4e8>
 100a944:	00800404 	movi	r2,16
 100a948:	9886d83a 	srl	r3,r19,r2
 100a94c:	01004074 	movhi	r4,257
 100a950:	213fc704 	addi	r4,r4,-228
 100a954:	20c7883a 	add	r3,r4,r3
 100a958:	18c00003 	ldbu	r3,0(r3)
 100a95c:	1887883a 	add	r3,r3,r2
 100a960:	00800804 	movi	r2,32
 100a964:	10e5c83a 	sub	r18,r2,r3
 100a968:	9000901e 	bne	r18,zero,100abac <__umoddi3+0x41c>
 100a96c:	982cd43a 	srli	r22,r19,16
 100a970:	8ce3c83a 	sub	r17,r17,r19
 100a974:	9d7fffcc 	andi	r21,r19,65535
 100a978:	b00b883a 	mov	r5,r22
 100a97c:	8809883a 	mov	r4,r17
 100a980:	100ae240 	call	100ae24 <__umodsi3>
 100a984:	8809883a 	mov	r4,r17
 100a988:	b00b883a 	mov	r5,r22
 100a98c:	1021883a 	mov	r16,r2
 100a990:	100adc00 	call	100adc0 <__udivsi3>
 100a994:	8006943a 	slli	r3,r16,16
 100a998:	a008d43a 	srli	r4,r20,16
 100a99c:	1545383a 	mul	r2,r2,r21
 100a9a0:	20c8b03a 	or	r4,r4,r3
 100a9a4:	2080042e 	bgeu	r4,r2,100a9b8 <__umoddi3+0x228>
 100a9a8:	24c9883a 	add	r4,r4,r19
 100a9ac:	24c00236 	bltu	r4,r19,100a9b8 <__umoddi3+0x228>
 100a9b0:	2080012e 	bgeu	r4,r2,100a9b8 <__umoddi3+0x228>
 100a9b4:	24c9883a 	add	r4,r4,r19
 100a9b8:	20a1c83a 	sub	r16,r4,r2
 100a9bc:	b00b883a 	mov	r5,r22
 100a9c0:	8009883a 	mov	r4,r16
 100a9c4:	100ae240 	call	100ae24 <__umodsi3>
 100a9c8:	1023883a 	mov	r17,r2
 100a9cc:	b00b883a 	mov	r5,r22
 100a9d0:	8009883a 	mov	r4,r16
 100a9d4:	100adc00 	call	100adc0 <__udivsi3>
 100a9d8:	8822943a 	slli	r17,r17,16
 100a9dc:	1545383a 	mul	r2,r2,r21
 100a9e0:	a53fffcc 	andi	r20,r20,65535
 100a9e4:	a446b03a 	or	r3,r20,r17
 100a9e8:	18bfb02e 	bgeu	r3,r2,100a8ac <__umoddi3+0x11c>
 100a9ec:	003fab06 	br	100a89c <__umoddi3+0x10c>
 100a9f0:	2005883a 	mov	r2,r4
 100a9f4:	2807883a 	mov	r3,r5
 100a9f8:	dfc00b17 	ldw	ra,44(sp)
 100a9fc:	df000a17 	ldw	fp,40(sp)
 100aa00:	ddc00917 	ldw	r23,36(sp)
 100aa04:	dd800817 	ldw	r22,32(sp)
 100aa08:	dd400717 	ldw	r21,28(sp)
 100aa0c:	dd000617 	ldw	r20,24(sp)
 100aa10:	dcc00517 	ldw	r19,20(sp)
 100aa14:	dc800417 	ldw	r18,16(sp)
 100aa18:	dc400317 	ldw	r17,12(sp)
 100aa1c:	dc000217 	ldw	r16,8(sp)
 100aa20:	dec00c04 	addi	sp,sp,48
 100aa24:	f800283a 	ret
 100aa28:	04c03fc4 	movi	r19,255
 100aa2c:	99c9803a 	cmpltu	r4,r19,r7
 100aa30:	200890fa 	slli	r4,r4,3
 100aa34:	003fa806 	br	100a8d8 <__umoddi3+0x148>
 100aa38:	00803fc4 	movi	r2,255
 100aa3c:	14c5803a 	cmpltu	r2,r2,r19
 100aa40:	100490fa 	slli	r2,r2,3
 100aa44:	003fc006 	br	100a948 <__umoddi3+0x1b8>
 100aa48:	00804034 	movhi	r2,256
 100aa4c:	10bfffc4 	addi	r2,r2,-1
 100aa50:	11808b36 	bltu	r2,r6,100ac80 <__umoddi3+0x4f0>
 100aa54:	01000404 	movi	r4,16
 100aa58:	003f6406 	br	100a7ec <__umoddi3+0x5c>
 100aa5c:	34c4d83a 	srl	r2,r6,r19
 100aa60:	3d0e983a 	sll	r7,r7,r20
 100aa64:	8cf8d83a 	srl	fp,r17,r19
 100aa68:	8d10983a 	sll	r8,r17,r20
 100aa6c:	38aab03a 	or	r21,r7,r2
 100aa70:	a82cd43a 	srli	r22,r21,16
 100aa74:	84e2d83a 	srl	r17,r16,r19
 100aa78:	e009883a 	mov	r4,fp
 100aa7c:	b00b883a 	mov	r5,r22
 100aa80:	8a22b03a 	or	r17,r17,r8
 100aa84:	3524983a 	sll	r18,r6,r20
 100aa88:	100ae240 	call	100ae24 <__umodsi3>
 100aa8c:	e009883a 	mov	r4,fp
 100aa90:	b00b883a 	mov	r5,r22
 100aa94:	102f883a 	mov	r23,r2
 100aa98:	100adc00 	call	100adc0 <__udivsi3>
 100aa9c:	100d883a 	mov	r6,r2
 100aaa0:	b808943a 	slli	r4,r23,16
 100aaa4:	aa3fffcc 	andi	r8,r21,65535
 100aaa8:	8804d43a 	srli	r2,r17,16
 100aaac:	41af383a 	mul	r23,r8,r6
 100aab0:	8520983a 	sll	r16,r16,r20
 100aab4:	1104b03a 	or	r2,r2,r4
 100aab8:	15c0042e 	bgeu	r2,r23,100aacc <__umoddi3+0x33c>
 100aabc:	1545883a 	add	r2,r2,r21
 100aac0:	30ffffc4 	addi	r3,r6,-1
 100aac4:	1540742e 	bgeu	r2,r21,100ac98 <__umoddi3+0x508>
 100aac8:	180d883a 	mov	r6,r3
 100aacc:	15efc83a 	sub	r23,r2,r23
 100aad0:	b00b883a 	mov	r5,r22
 100aad4:	b809883a 	mov	r4,r23
 100aad8:	d9800115 	stw	r6,4(sp)
 100aadc:	da000015 	stw	r8,0(sp)
 100aae0:	100ae240 	call	100ae24 <__umodsi3>
 100aae4:	b00b883a 	mov	r5,r22
 100aae8:	b809883a 	mov	r4,r23
 100aaec:	1039883a 	mov	fp,r2
 100aaf0:	100adc00 	call	100adc0 <__udivsi3>
 100aaf4:	da000017 	ldw	r8,0(sp)
 100aaf8:	e038943a 	slli	fp,fp,16
 100aafc:	100b883a 	mov	r5,r2
 100ab00:	4089383a 	mul	r4,r8,r2
 100ab04:	8a3fffcc 	andi	r8,r17,65535
 100ab08:	4710b03a 	or	r8,r8,fp
 100ab0c:	d9800117 	ldw	r6,4(sp)
 100ab10:	4100042e 	bgeu	r8,r4,100ab24 <__umoddi3+0x394>
 100ab14:	4551883a 	add	r8,r8,r21
 100ab18:	10bfffc4 	addi	r2,r2,-1
 100ab1c:	45405a2e 	bgeu	r8,r21,100ac88 <__umoddi3+0x4f8>
 100ab20:	100b883a 	mov	r5,r2
 100ab24:	300c943a 	slli	r6,r6,16
 100ab28:	91ffffcc 	andi	r7,r18,65535
 100ab2c:	9004d43a 	srli	r2,r18,16
 100ab30:	314cb03a 	or	r6,r6,r5
 100ab34:	317fffcc 	andi	r5,r6,65535
 100ab38:	300cd43a 	srli	r6,r6,16
 100ab3c:	29d3383a 	mul	r9,r5,r7
 100ab40:	288b383a 	mul	r5,r5,r2
 100ab44:	31cf383a 	mul	r7,r6,r7
 100ab48:	4806d43a 	srli	r3,r9,16
 100ab4c:	4111c83a 	sub	r8,r8,r4
 100ab50:	29cb883a 	add	r5,r5,r7
 100ab54:	194b883a 	add	r5,r3,r5
 100ab58:	3085383a 	mul	r2,r6,r2
 100ab5c:	29c0022e 	bgeu	r5,r7,100ab68 <__umoddi3+0x3d8>
 100ab60:	00c00074 	movhi	r3,1
 100ab64:	10c5883a 	add	r2,r2,r3
 100ab68:	2808d43a 	srli	r4,r5,16
 100ab6c:	280a943a 	slli	r5,r5,16
 100ab70:	4a7fffcc 	andi	r9,r9,65535
 100ab74:	2085883a 	add	r2,r4,r2
 100ab78:	2a4b883a 	add	r5,r5,r9
 100ab7c:	40803636 	bltu	r8,r2,100ac58 <__umoddi3+0x4c8>
 100ab80:	40804d26 	beq	r8,r2,100acb8 <__umoddi3+0x528>
 100ab84:	4089c83a 	sub	r4,r8,r2
 100ab88:	280f883a 	mov	r7,r5
 100ab8c:	81cfc83a 	sub	r7,r16,r7
 100ab90:	81c7803a 	cmpltu	r3,r16,r7
 100ab94:	20c7c83a 	sub	r3,r4,r3
 100ab98:	1cc4983a 	sll	r2,r3,r19
 100ab9c:	3d0ed83a 	srl	r7,r7,r20
 100aba0:	1d06d83a 	srl	r3,r3,r20
 100aba4:	11c4b03a 	or	r2,r2,r7
 100aba8:	003f9306 	br	100a9f8 <__umoddi3+0x268>
 100abac:	9ca6983a 	sll	r19,r19,r18
 100abb0:	88e8d83a 	srl	r20,r17,r3
 100abb4:	80c4d83a 	srl	r2,r16,r3
 100abb8:	982cd43a 	srli	r22,r19,16
 100abbc:	8ca2983a 	sll	r17,r17,r18
 100abc0:	a009883a 	mov	r4,r20
 100abc4:	b00b883a 	mov	r5,r22
 100abc8:	1478b03a 	or	fp,r2,r17
 100abcc:	100ae240 	call	100ae24 <__umodsi3>
 100abd0:	a009883a 	mov	r4,r20
 100abd4:	b00b883a 	mov	r5,r22
 100abd8:	1023883a 	mov	r17,r2
 100abdc:	100adc00 	call	100adc0 <__udivsi3>
 100abe0:	9d7fffcc 	andi	r21,r19,65535
 100abe4:	880a943a 	slli	r5,r17,16
 100abe8:	e008d43a 	srli	r4,fp,16
 100abec:	a885383a 	mul	r2,r21,r2
 100abf0:	84a8983a 	sll	r20,r16,r18
 100abf4:	2148b03a 	or	r4,r4,r5
 100abf8:	2080042e 	bgeu	r4,r2,100ac0c <__umoddi3+0x47c>
 100abfc:	24c9883a 	add	r4,r4,r19
 100ac00:	24c00236 	bltu	r4,r19,100ac0c <__umoddi3+0x47c>
 100ac04:	2080012e 	bgeu	r4,r2,100ac0c <__umoddi3+0x47c>
 100ac08:	24c9883a 	add	r4,r4,r19
 100ac0c:	20a3c83a 	sub	r17,r4,r2
 100ac10:	b00b883a 	mov	r5,r22
 100ac14:	8809883a 	mov	r4,r17
 100ac18:	100ae240 	call	100ae24 <__umodsi3>
 100ac1c:	102f883a 	mov	r23,r2
 100ac20:	8809883a 	mov	r4,r17
 100ac24:	b00b883a 	mov	r5,r22
 100ac28:	100adc00 	call	100adc0 <__udivsi3>
 100ac2c:	b82e943a 	slli	r23,r23,16
 100ac30:	a885383a 	mul	r2,r21,r2
 100ac34:	e13fffcc 	andi	r4,fp,65535
 100ac38:	25c8b03a 	or	r4,r4,r23
 100ac3c:	2080042e 	bgeu	r4,r2,100ac50 <__umoddi3+0x4c0>
 100ac40:	24c9883a 	add	r4,r4,r19
 100ac44:	24c00236 	bltu	r4,r19,100ac50 <__umoddi3+0x4c0>
 100ac48:	2080012e 	bgeu	r4,r2,100ac50 <__umoddi3+0x4c0>
 100ac4c:	24c9883a 	add	r4,r4,r19
 100ac50:	20a3c83a 	sub	r17,r4,r2
 100ac54:	003f4806 	br	100a978 <__umoddi3+0x1e8>
 100ac58:	2c8fc83a 	sub	r7,r5,r18
 100ac5c:	1545c83a 	sub	r2,r2,r21
 100ac60:	29cb803a 	cmpltu	r5,r5,r7
 100ac64:	1145c83a 	sub	r2,r2,r5
 100ac68:	4089c83a 	sub	r4,r8,r2
 100ac6c:	003fc706 	br	100ab8c <__umoddi3+0x3fc>
 100ac70:	01000604 	movi	r4,24
 100ac74:	003f1806 	br	100a8d8 <__umoddi3+0x148>
 100ac78:	00800604 	movi	r2,24
 100ac7c:	003f3206 	br	100a948 <__umoddi3+0x1b8>
 100ac80:	01000604 	movi	r4,24
 100ac84:	003ed906 	br	100a7ec <__umoddi3+0x5c>
 100ac88:	413fa52e 	bgeu	r8,r4,100ab20 <__umoddi3+0x390>
 100ac8c:	297fff84 	addi	r5,r5,-2
 100ac90:	4551883a 	add	r8,r8,r21
 100ac94:	003fa306 	br	100ab24 <__umoddi3+0x394>
 100ac98:	15ff8b2e 	bgeu	r2,r23,100aac8 <__umoddi3+0x338>
 100ac9c:	31bfff84 	addi	r6,r6,-2
 100aca0:	1545883a 	add	r2,r2,r21
 100aca4:	003f8906 	br	100aacc <__umoddi3+0x33c>
 100aca8:	24c9883a 	add	r4,r4,r19
 100acac:	003eee06 	br	100a868 <__umoddi3+0xd8>
 100acb0:	8005883a 	mov	r2,r16
 100acb4:	003f1706 	br	100a914 <__umoddi3+0x184>
 100acb8:	817fe736 	bltu	r16,r5,100ac58 <__umoddi3+0x4c8>
 100acbc:	280f883a 	mov	r7,r5
 100acc0:	0009883a 	mov	r4,zero
 100acc4:	003fb106 	br	100ab8c <__umoddi3+0x3fc>

0100acc8 <__divsi3>:
 100acc8:	20001b16 	blt	r4,zero,100ad38 <__divsi3+0x70>
 100accc:	000f883a 	mov	r7,zero
 100acd0:	28001616 	blt	r5,zero,100ad2c <__divsi3+0x64>
 100acd4:	200d883a 	mov	r6,r4
 100acd8:	29001a2e 	bgeu	r5,r4,100ad44 <__divsi3+0x7c>
 100acdc:	00800804 	movi	r2,32
 100ace0:	00c00044 	movi	r3,1
 100ace4:	00000106 	br	100acec <__divsi3+0x24>
 100ace8:	10000d26 	beq	r2,zero,100ad20 <__divsi3+0x58>
 100acec:	294b883a 	add	r5,r5,r5
 100acf0:	10bfffc4 	addi	r2,r2,-1
 100acf4:	18c7883a 	add	r3,r3,r3
 100acf8:	293ffb36 	bltu	r5,r4,100ace8 <__divsi3+0x20>
 100acfc:	0005883a 	mov	r2,zero
 100ad00:	18000726 	beq	r3,zero,100ad20 <__divsi3+0x58>
 100ad04:	0005883a 	mov	r2,zero
 100ad08:	31400236 	bltu	r6,r5,100ad14 <__divsi3+0x4c>
 100ad0c:	314dc83a 	sub	r6,r6,r5
 100ad10:	10c4b03a 	or	r2,r2,r3
 100ad14:	1806d07a 	srli	r3,r3,1
 100ad18:	280ad07a 	srli	r5,r5,1
 100ad1c:	183ffa1e 	bne	r3,zero,100ad08 <__divsi3+0x40>
 100ad20:	38000126 	beq	r7,zero,100ad28 <__divsi3+0x60>
 100ad24:	0085c83a 	sub	r2,zero,r2
 100ad28:	f800283a 	ret
 100ad2c:	014bc83a 	sub	r5,zero,r5
 100ad30:	39c0005c 	xori	r7,r7,1
 100ad34:	003fe706 	br	100acd4 <__divsi3+0xc>
 100ad38:	0109c83a 	sub	r4,zero,r4
 100ad3c:	01c00044 	movi	r7,1
 100ad40:	003fe306 	br	100acd0 <__divsi3+0x8>
 100ad44:	00c00044 	movi	r3,1
 100ad48:	003fee06 	br	100ad04 <__divsi3+0x3c>

0100ad4c <__modsi3>:
 100ad4c:	20001716 	blt	r4,zero,100adac <__modsi3+0x60>
 100ad50:	000f883a 	mov	r7,zero
 100ad54:	2005883a 	mov	r2,r4
 100ad58:	28001216 	blt	r5,zero,100ada4 <__modsi3+0x58>
 100ad5c:	2900162e 	bgeu	r5,r4,100adb8 <__modsi3+0x6c>
 100ad60:	01800804 	movi	r6,32
 100ad64:	00c00044 	movi	r3,1
 100ad68:	00000106 	br	100ad70 <__modsi3+0x24>
 100ad6c:	30000a26 	beq	r6,zero,100ad98 <__modsi3+0x4c>
 100ad70:	294b883a 	add	r5,r5,r5
 100ad74:	31bfffc4 	addi	r6,r6,-1
 100ad78:	18c7883a 	add	r3,r3,r3
 100ad7c:	293ffb36 	bltu	r5,r4,100ad6c <__modsi3+0x20>
 100ad80:	18000526 	beq	r3,zero,100ad98 <__modsi3+0x4c>
 100ad84:	1806d07a 	srli	r3,r3,1
 100ad88:	11400136 	bltu	r2,r5,100ad90 <__modsi3+0x44>
 100ad8c:	1145c83a 	sub	r2,r2,r5
 100ad90:	280ad07a 	srli	r5,r5,1
 100ad94:	183ffb1e 	bne	r3,zero,100ad84 <__modsi3+0x38>
 100ad98:	38000126 	beq	r7,zero,100ada0 <__modsi3+0x54>
 100ad9c:	0085c83a 	sub	r2,zero,r2
 100ada0:	f800283a 	ret
 100ada4:	014bc83a 	sub	r5,zero,r5
 100ada8:	003fec06 	br	100ad5c <__modsi3+0x10>
 100adac:	0109c83a 	sub	r4,zero,r4
 100adb0:	01c00044 	movi	r7,1
 100adb4:	003fe706 	br	100ad54 <__modsi3+0x8>
 100adb8:	00c00044 	movi	r3,1
 100adbc:	003ff106 	br	100ad84 <__modsi3+0x38>

0100adc0 <__udivsi3>:
 100adc0:	200d883a 	mov	r6,r4
 100adc4:	2900152e 	bgeu	r5,r4,100ae1c <__udivsi3+0x5c>
 100adc8:	28001416 	blt	r5,zero,100ae1c <__udivsi3+0x5c>
 100adcc:	00800804 	movi	r2,32
 100add0:	00c00044 	movi	r3,1
 100add4:	00000206 	br	100ade0 <__udivsi3+0x20>
 100add8:	10000e26 	beq	r2,zero,100ae14 <__udivsi3+0x54>
 100addc:	28000516 	blt	r5,zero,100adf4 <__udivsi3+0x34>
 100ade0:	294b883a 	add	r5,r5,r5
 100ade4:	10bfffc4 	addi	r2,r2,-1
 100ade8:	18c7883a 	add	r3,r3,r3
 100adec:	293ffa36 	bltu	r5,r4,100add8 <__udivsi3+0x18>
 100adf0:	18000826 	beq	r3,zero,100ae14 <__udivsi3+0x54>
 100adf4:	0005883a 	mov	r2,zero
 100adf8:	31400236 	bltu	r6,r5,100ae04 <__udivsi3+0x44>
 100adfc:	314dc83a 	sub	r6,r6,r5
 100ae00:	10c4b03a 	or	r2,r2,r3
 100ae04:	1806d07a 	srli	r3,r3,1
 100ae08:	280ad07a 	srli	r5,r5,1
 100ae0c:	183ffa1e 	bne	r3,zero,100adf8 <__udivsi3+0x38>
 100ae10:	f800283a 	ret
 100ae14:	0005883a 	mov	r2,zero
 100ae18:	f800283a 	ret
 100ae1c:	00c00044 	movi	r3,1
 100ae20:	003ff406 	br	100adf4 <__udivsi3+0x34>

0100ae24 <__umodsi3>:
 100ae24:	2005883a 	mov	r2,r4
 100ae28:	2900122e 	bgeu	r5,r4,100ae74 <__umodsi3+0x50>
 100ae2c:	28001116 	blt	r5,zero,100ae74 <__umodsi3+0x50>
 100ae30:	01800804 	movi	r6,32
 100ae34:	00c00044 	movi	r3,1
 100ae38:	00000206 	br	100ae44 <__umodsi3+0x20>
 100ae3c:	30000c26 	beq	r6,zero,100ae70 <__umodsi3+0x4c>
 100ae40:	28000516 	blt	r5,zero,100ae58 <__umodsi3+0x34>
 100ae44:	294b883a 	add	r5,r5,r5
 100ae48:	31bfffc4 	addi	r6,r6,-1
 100ae4c:	18c7883a 	add	r3,r3,r3
 100ae50:	293ffa36 	bltu	r5,r4,100ae3c <__umodsi3+0x18>
 100ae54:	18000626 	beq	r3,zero,100ae70 <__umodsi3+0x4c>
 100ae58:	1806d07a 	srli	r3,r3,1
 100ae5c:	11400136 	bltu	r2,r5,100ae64 <__umodsi3+0x40>
 100ae60:	1145c83a 	sub	r2,r2,r5
 100ae64:	280ad07a 	srli	r5,r5,1
 100ae68:	183ffb1e 	bne	r3,zero,100ae58 <__umodsi3+0x34>
 100ae6c:	f800283a 	ret
 100ae70:	f800283a 	ret
 100ae74:	00c00044 	movi	r3,1
 100ae78:	003ff706 	br	100ae58 <__umodsi3+0x34>

0100ae7c <__adddf3>:
 100ae7c:	02c00434 	movhi	r11,16
 100ae80:	5affffc4 	addi	r11,r11,-1
 100ae84:	2806d7fa 	srli	r3,r5,31
 100ae88:	2ad4703a 	and	r10,r5,r11
 100ae8c:	3ad2703a 	and	r9,r7,r11
 100ae90:	3804d53a 	srli	r2,r7,20
 100ae94:	3018d77a 	srli	r12,r6,29
 100ae98:	280ad53a 	srli	r5,r5,20
 100ae9c:	501490fa 	slli	r10,r10,3
 100aea0:	2010d77a 	srli	r8,r4,29
 100aea4:	481290fa 	slli	r9,r9,3
 100aea8:	380ed7fa 	srli	r7,r7,31
 100aeac:	defffb04 	addi	sp,sp,-20
 100aeb0:	dc800215 	stw	r18,8(sp)
 100aeb4:	dc400115 	stw	r17,4(sp)
 100aeb8:	dc000015 	stw	r16,0(sp)
 100aebc:	dfc00415 	stw	ra,16(sp)
 100aec0:	dcc00315 	stw	r19,12(sp)
 100aec4:	1c803fcc 	andi	r18,r3,255
 100aec8:	2c01ffcc 	andi	r16,r5,2047
 100aecc:	5210b03a 	or	r8,r10,r8
 100aed0:	202290fa 	slli	r17,r4,3
 100aed4:	1081ffcc 	andi	r2,r2,2047
 100aed8:	4b12b03a 	or	r9,r9,r12
 100aedc:	300c90fa 	slli	r6,r6,3
 100aee0:	91c07526 	beq	r18,r7,100b0b8 <__adddf3+0x23c>
 100aee4:	8087c83a 	sub	r3,r16,r2
 100aee8:	00c0ab0e 	bge	zero,r3,100b198 <__adddf3+0x31c>
 100aeec:	10002a1e 	bne	r2,zero,100af98 <__adddf3+0x11c>
 100aef0:	4984b03a 	or	r2,r9,r6
 100aef4:	1000961e 	bne	r2,zero,100b150 <__adddf3+0x2d4>
 100aef8:	888001cc 	andi	r2,r17,7
 100aefc:	10000726 	beq	r2,zero,100af1c <__adddf3+0xa0>
 100af00:	888003cc 	andi	r2,r17,15
 100af04:	00c00104 	movi	r3,4
 100af08:	10c00426 	beq	r2,r3,100af1c <__adddf3+0xa0>
 100af0c:	88c7883a 	add	r3,r17,r3
 100af10:	1c63803a 	cmpltu	r17,r3,r17
 100af14:	4451883a 	add	r8,r8,r17
 100af18:	1823883a 	mov	r17,r3
 100af1c:	4080202c 	andhi	r2,r8,128
 100af20:	10005926 	beq	r2,zero,100b088 <__adddf3+0x20c>
 100af24:	84000044 	addi	r16,r16,1
 100af28:	0081ffc4 	movi	r2,2047
 100af2c:	8080ba26 	beq	r16,r2,100b218 <__adddf3+0x39c>
 100af30:	00bfe034 	movhi	r2,65408
 100af34:	10bfffc4 	addi	r2,r2,-1
 100af38:	4090703a 	and	r8,r8,r2
 100af3c:	4004977a 	slli	r2,r8,29
 100af40:	4010927a 	slli	r8,r8,9
 100af44:	8822d0fa 	srli	r17,r17,3
 100af48:	8401ffcc 	andi	r16,r16,2047
 100af4c:	4010d33a 	srli	r8,r8,12
 100af50:	9007883a 	mov	r3,r18
 100af54:	1444b03a 	or	r2,r2,r17
 100af58:	8401ffcc 	andi	r16,r16,2047
 100af5c:	8020953a 	slli	r16,r16,20
 100af60:	18c03fcc 	andi	r3,r3,255
 100af64:	01000434 	movhi	r4,16
 100af68:	213fffc4 	addi	r4,r4,-1
 100af6c:	180697fa 	slli	r3,r3,31
 100af70:	4110703a 	and	r8,r8,r4
 100af74:	4410b03a 	or	r8,r8,r16
 100af78:	40c6b03a 	or	r3,r8,r3
 100af7c:	dfc00417 	ldw	ra,16(sp)
 100af80:	dcc00317 	ldw	r19,12(sp)
 100af84:	dc800217 	ldw	r18,8(sp)
 100af88:	dc400117 	ldw	r17,4(sp)
 100af8c:	dc000017 	ldw	r16,0(sp)
 100af90:	dec00504 	addi	sp,sp,20
 100af94:	f800283a 	ret
 100af98:	0081ffc4 	movi	r2,2047
 100af9c:	80bfd626 	beq	r16,r2,100aef8 <__adddf3+0x7c>
 100afa0:	4a402034 	orhi	r9,r9,128
 100afa4:	00800e04 	movi	r2,56
 100afa8:	10c09f16 	blt	r2,r3,100b228 <__adddf3+0x3ac>
 100afac:	008007c4 	movi	r2,31
 100afb0:	10c0c216 	blt	r2,r3,100b2bc <__adddf3+0x440>
 100afb4:	00800804 	movi	r2,32
 100afb8:	10c5c83a 	sub	r2,r2,r3
 100afbc:	488a983a 	sll	r5,r9,r2
 100afc0:	30c8d83a 	srl	r4,r6,r3
 100afc4:	3084983a 	sll	r2,r6,r2
 100afc8:	48c6d83a 	srl	r3,r9,r3
 100afcc:	290cb03a 	or	r6,r5,r4
 100afd0:	1004c03a 	cmpne	r2,r2,zero
 100afd4:	308cb03a 	or	r6,r6,r2
 100afd8:	898dc83a 	sub	r6,r17,r6
 100afdc:	89a3803a 	cmpltu	r17,r17,r6
 100afe0:	40d1c83a 	sub	r8,r8,r3
 100afe4:	4451c83a 	sub	r8,r8,r17
 100afe8:	3023883a 	mov	r17,r6
 100afec:	4080202c 	andhi	r2,r8,128
 100aff0:	10002326 	beq	r2,zero,100b080 <__adddf3+0x204>
 100aff4:	04c02034 	movhi	r19,128
 100aff8:	9cffffc4 	addi	r19,r19,-1
 100affc:	44e6703a 	and	r19,r8,r19
 100b000:	98007626 	beq	r19,zero,100b1dc <__adddf3+0x360>
 100b004:	9809883a 	mov	r4,r19
 100b008:	100d4800 	call	100d480 <__clzsi2>
 100b00c:	10fffe04 	addi	r3,r2,-8
 100b010:	010007c4 	movi	r4,31
 100b014:	20c07716 	blt	r4,r3,100b1f4 <__adddf3+0x378>
 100b018:	00800804 	movi	r2,32
 100b01c:	10c5c83a 	sub	r2,r2,r3
 100b020:	8884d83a 	srl	r2,r17,r2
 100b024:	98d0983a 	sll	r8,r19,r3
 100b028:	88e2983a 	sll	r17,r17,r3
 100b02c:	1204b03a 	or	r2,r2,r8
 100b030:	1c007416 	blt	r3,r16,100b204 <__adddf3+0x388>
 100b034:	1c21c83a 	sub	r16,r3,r16
 100b038:	82000044 	addi	r8,r16,1
 100b03c:	00c007c4 	movi	r3,31
 100b040:	1a009116 	blt	r3,r8,100b288 <__adddf3+0x40c>
 100b044:	00c00804 	movi	r3,32
 100b048:	1a07c83a 	sub	r3,r3,r8
 100b04c:	8a08d83a 	srl	r4,r17,r8
 100b050:	88e2983a 	sll	r17,r17,r3
 100b054:	10c6983a 	sll	r3,r2,r3
 100b058:	1210d83a 	srl	r8,r2,r8
 100b05c:	8804c03a 	cmpne	r2,r17,zero
 100b060:	1906b03a 	or	r3,r3,r4
 100b064:	18a2b03a 	or	r17,r3,r2
 100b068:	0021883a 	mov	r16,zero
 100b06c:	003fa206 	br	100aef8 <__adddf3+0x7c>
 100b070:	1890b03a 	or	r8,r3,r2
 100b074:	40017d26 	beq	r8,zero,100b66c <__adddf3+0x7f0>
 100b078:	1011883a 	mov	r8,r2
 100b07c:	1823883a 	mov	r17,r3
 100b080:	888001cc 	andi	r2,r17,7
 100b084:	103f9e1e 	bne	r2,zero,100af00 <__adddf3+0x84>
 100b088:	4004977a 	slli	r2,r8,29
 100b08c:	8822d0fa 	srli	r17,r17,3
 100b090:	4010d0fa 	srli	r8,r8,3
 100b094:	9007883a 	mov	r3,r18
 100b098:	1444b03a 	or	r2,r2,r17
 100b09c:	0101ffc4 	movi	r4,2047
 100b0a0:	81002426 	beq	r16,r4,100b134 <__adddf3+0x2b8>
 100b0a4:	8120703a 	and	r16,r16,r4
 100b0a8:	01000434 	movhi	r4,16
 100b0ac:	213fffc4 	addi	r4,r4,-1
 100b0b0:	4110703a 	and	r8,r8,r4
 100b0b4:	003fa806 	br	100af58 <__adddf3+0xdc>
 100b0b8:	8089c83a 	sub	r4,r16,r2
 100b0bc:	01005e0e 	bge	zero,r4,100b238 <__adddf3+0x3bc>
 100b0c0:	10002b26 	beq	r2,zero,100b170 <__adddf3+0x2f4>
 100b0c4:	0081ffc4 	movi	r2,2047
 100b0c8:	80bf8b26 	beq	r16,r2,100aef8 <__adddf3+0x7c>
 100b0cc:	4a402034 	orhi	r9,r9,128
 100b0d0:	00800e04 	movi	r2,56
 100b0d4:	1100a40e 	bge	r2,r4,100b368 <__adddf3+0x4ec>
 100b0d8:	498cb03a 	or	r6,r9,r6
 100b0dc:	300ac03a 	cmpne	r5,r6,zero
 100b0e0:	0013883a 	mov	r9,zero
 100b0e4:	2c4b883a 	add	r5,r5,r17
 100b0e8:	2c63803a 	cmpltu	r17,r5,r17
 100b0ec:	4a11883a 	add	r8,r9,r8
 100b0f0:	8a11883a 	add	r8,r17,r8
 100b0f4:	2823883a 	mov	r17,r5
 100b0f8:	4080202c 	andhi	r2,r8,128
 100b0fc:	103fe026 	beq	r2,zero,100b080 <__adddf3+0x204>
 100b100:	84000044 	addi	r16,r16,1
 100b104:	0081ffc4 	movi	r2,2047
 100b108:	8080d226 	beq	r16,r2,100b454 <__adddf3+0x5d8>
 100b10c:	00bfe034 	movhi	r2,65408
 100b110:	10bfffc4 	addi	r2,r2,-1
 100b114:	4090703a 	and	r8,r8,r2
 100b118:	880ad07a 	srli	r5,r17,1
 100b11c:	400897fa 	slli	r4,r8,31
 100b120:	88c0004c 	andi	r3,r17,1
 100b124:	28e2b03a 	or	r17,r5,r3
 100b128:	4010d07a 	srli	r8,r8,1
 100b12c:	2462b03a 	or	r17,r4,r17
 100b130:	003f7106 	br	100aef8 <__adddf3+0x7c>
 100b134:	4088b03a 	or	r4,r8,r2
 100b138:	20014526 	beq	r4,zero,100b650 <__adddf3+0x7d4>
 100b13c:	01000434 	movhi	r4,16
 100b140:	42000234 	orhi	r8,r8,8
 100b144:	213fffc4 	addi	r4,r4,-1
 100b148:	4110703a 	and	r8,r8,r4
 100b14c:	003f8206 	br	100af58 <__adddf3+0xdc>
 100b150:	18ffffc4 	addi	r3,r3,-1
 100b154:	1800491e 	bne	r3,zero,100b27c <__adddf3+0x400>
 100b158:	898bc83a 	sub	r5,r17,r6
 100b15c:	8963803a 	cmpltu	r17,r17,r5
 100b160:	4251c83a 	sub	r8,r8,r9
 100b164:	4451c83a 	sub	r8,r8,r17
 100b168:	2823883a 	mov	r17,r5
 100b16c:	003f9f06 	br	100afec <__adddf3+0x170>
 100b170:	4984b03a 	or	r2,r9,r6
 100b174:	103f6026 	beq	r2,zero,100aef8 <__adddf3+0x7c>
 100b178:	213fffc4 	addi	r4,r4,-1
 100b17c:	2000931e 	bne	r4,zero,100b3cc <__adddf3+0x550>
 100b180:	898d883a 	add	r6,r17,r6
 100b184:	3463803a 	cmpltu	r17,r6,r17
 100b188:	4251883a 	add	r8,r8,r9
 100b18c:	8a11883a 	add	r8,r17,r8
 100b190:	3023883a 	mov	r17,r6
 100b194:	003fd806 	br	100b0f8 <__adddf3+0x27c>
 100b198:	1800541e 	bne	r3,zero,100b2ec <__adddf3+0x470>
 100b19c:	80800044 	addi	r2,r16,1
 100b1a0:	1081ffcc 	andi	r2,r2,2047
 100b1a4:	00c00044 	movi	r3,1
 100b1a8:	1880a00e 	bge	r3,r2,100b42c <__adddf3+0x5b0>
 100b1ac:	8989c83a 	sub	r4,r17,r6
 100b1b0:	8905803a 	cmpltu	r2,r17,r4
 100b1b4:	4267c83a 	sub	r19,r8,r9
 100b1b8:	98a7c83a 	sub	r19,r19,r2
 100b1bc:	9880202c 	andhi	r2,r19,128
 100b1c0:	10006326 	beq	r2,zero,100b350 <__adddf3+0x4d4>
 100b1c4:	3463c83a 	sub	r17,r6,r17
 100b1c8:	4a07c83a 	sub	r3,r9,r8
 100b1cc:	344d803a 	cmpltu	r6,r6,r17
 100b1d0:	19a7c83a 	sub	r19,r3,r6
 100b1d4:	3825883a 	mov	r18,r7
 100b1d8:	983f8a1e 	bne	r19,zero,100b004 <__adddf3+0x188>
 100b1dc:	8809883a 	mov	r4,r17
 100b1e0:	100d4800 	call	100d480 <__clzsi2>
 100b1e4:	10800804 	addi	r2,r2,32
 100b1e8:	10fffe04 	addi	r3,r2,-8
 100b1ec:	010007c4 	movi	r4,31
 100b1f0:	20ff890e 	bge	r4,r3,100b018 <__adddf3+0x19c>
 100b1f4:	10bff604 	addi	r2,r2,-40
 100b1f8:	8884983a 	sll	r2,r17,r2
 100b1fc:	0023883a 	mov	r17,zero
 100b200:	1c3f8c0e 	bge	r3,r16,100b034 <__adddf3+0x1b8>
 100b204:	023fe034 	movhi	r8,65408
 100b208:	423fffc4 	addi	r8,r8,-1
 100b20c:	80e1c83a 	sub	r16,r16,r3
 100b210:	1210703a 	and	r8,r2,r8
 100b214:	003f3806 	br	100aef8 <__adddf3+0x7c>
 100b218:	9007883a 	mov	r3,r18
 100b21c:	0011883a 	mov	r8,zero
 100b220:	0005883a 	mov	r2,zero
 100b224:	003f4c06 	br	100af58 <__adddf3+0xdc>
 100b228:	498cb03a 	or	r6,r9,r6
 100b22c:	300cc03a 	cmpne	r6,r6,zero
 100b230:	0007883a 	mov	r3,zero
 100b234:	003f6806 	br	100afd8 <__adddf3+0x15c>
 100b238:	20009c1e 	bne	r4,zero,100b4ac <__adddf3+0x630>
 100b23c:	80800044 	addi	r2,r16,1
 100b240:	1141ffcc 	andi	r5,r2,2047
 100b244:	01000044 	movi	r4,1
 100b248:	2140670e 	bge	r4,r5,100b3e8 <__adddf3+0x56c>
 100b24c:	0101ffc4 	movi	r4,2047
 100b250:	11007f26 	beq	r2,r4,100b450 <__adddf3+0x5d4>
 100b254:	898d883a 	add	r6,r17,r6
 100b258:	4247883a 	add	r3,r8,r9
 100b25c:	3451803a 	cmpltu	r8,r6,r17
 100b260:	40d1883a 	add	r8,r8,r3
 100b264:	402297fa 	slli	r17,r8,31
 100b268:	300cd07a 	srli	r6,r6,1
 100b26c:	4010d07a 	srli	r8,r8,1
 100b270:	1021883a 	mov	r16,r2
 100b274:	89a2b03a 	or	r17,r17,r6
 100b278:	003f1f06 	br	100aef8 <__adddf3+0x7c>
 100b27c:	0081ffc4 	movi	r2,2047
 100b280:	80bf481e 	bne	r16,r2,100afa4 <__adddf3+0x128>
 100b284:	003f1c06 	br	100aef8 <__adddf3+0x7c>
 100b288:	843ff844 	addi	r16,r16,-31
 100b28c:	01000804 	movi	r4,32
 100b290:	1406d83a 	srl	r3,r2,r16
 100b294:	41005026 	beq	r8,r4,100b3d8 <__adddf3+0x55c>
 100b298:	01001004 	movi	r4,64
 100b29c:	2211c83a 	sub	r8,r4,r8
 100b2a0:	1204983a 	sll	r2,r2,r8
 100b2a4:	88a2b03a 	or	r17,r17,r2
 100b2a8:	8822c03a 	cmpne	r17,r17,zero
 100b2ac:	1c62b03a 	or	r17,r3,r17
 100b2b0:	0011883a 	mov	r8,zero
 100b2b4:	0021883a 	mov	r16,zero
 100b2b8:	003f7106 	br	100b080 <__adddf3+0x204>
 100b2bc:	193ff804 	addi	r4,r3,-32
 100b2c0:	00800804 	movi	r2,32
 100b2c4:	4908d83a 	srl	r4,r9,r4
 100b2c8:	18804526 	beq	r3,r2,100b3e0 <__adddf3+0x564>
 100b2cc:	00801004 	movi	r2,64
 100b2d0:	10c5c83a 	sub	r2,r2,r3
 100b2d4:	4886983a 	sll	r3,r9,r2
 100b2d8:	198cb03a 	or	r6,r3,r6
 100b2dc:	300cc03a 	cmpne	r6,r6,zero
 100b2e0:	218cb03a 	or	r6,r4,r6
 100b2e4:	0007883a 	mov	r3,zero
 100b2e8:	003f3b06 	br	100afd8 <__adddf3+0x15c>
 100b2ec:	80002a26 	beq	r16,zero,100b398 <__adddf3+0x51c>
 100b2f0:	0101ffc4 	movi	r4,2047
 100b2f4:	11006826 	beq	r2,r4,100b498 <__adddf3+0x61c>
 100b2f8:	00c7c83a 	sub	r3,zero,r3
 100b2fc:	42002034 	orhi	r8,r8,128
 100b300:	01000e04 	movi	r4,56
 100b304:	20c07c16 	blt	r4,r3,100b4f8 <__adddf3+0x67c>
 100b308:	010007c4 	movi	r4,31
 100b30c:	20c0da16 	blt	r4,r3,100b678 <__adddf3+0x7fc>
 100b310:	01000804 	movi	r4,32
 100b314:	20c9c83a 	sub	r4,r4,r3
 100b318:	4114983a 	sll	r10,r8,r4
 100b31c:	88cad83a 	srl	r5,r17,r3
 100b320:	8908983a 	sll	r4,r17,r4
 100b324:	40c6d83a 	srl	r3,r8,r3
 100b328:	5162b03a 	or	r17,r10,r5
 100b32c:	2008c03a 	cmpne	r4,r4,zero
 100b330:	8922b03a 	or	r17,r17,r4
 100b334:	3463c83a 	sub	r17,r6,r17
 100b338:	48c7c83a 	sub	r3,r9,r3
 100b33c:	344d803a 	cmpltu	r6,r6,r17
 100b340:	1991c83a 	sub	r8,r3,r6
 100b344:	1021883a 	mov	r16,r2
 100b348:	3825883a 	mov	r18,r7
 100b34c:	003f2706 	br	100afec <__adddf3+0x170>
 100b350:	24d0b03a 	or	r8,r4,r19
 100b354:	40001b1e 	bne	r8,zero,100b3c4 <__adddf3+0x548>
 100b358:	0005883a 	mov	r2,zero
 100b35c:	0007883a 	mov	r3,zero
 100b360:	0021883a 	mov	r16,zero
 100b364:	003f4d06 	br	100b09c <__adddf3+0x220>
 100b368:	008007c4 	movi	r2,31
 100b36c:	11003c16 	blt	r2,r4,100b460 <__adddf3+0x5e4>
 100b370:	00800804 	movi	r2,32
 100b374:	1105c83a 	sub	r2,r2,r4
 100b378:	488e983a 	sll	r7,r9,r2
 100b37c:	310ad83a 	srl	r5,r6,r4
 100b380:	3084983a 	sll	r2,r6,r2
 100b384:	4912d83a 	srl	r9,r9,r4
 100b388:	394ab03a 	or	r5,r7,r5
 100b38c:	1004c03a 	cmpne	r2,r2,zero
 100b390:	288ab03a 	or	r5,r5,r2
 100b394:	003f5306 	br	100b0e4 <__adddf3+0x268>
 100b398:	4448b03a 	or	r4,r8,r17
 100b39c:	20003e26 	beq	r4,zero,100b498 <__adddf3+0x61c>
 100b3a0:	00c6303a 	nor	r3,zero,r3
 100b3a4:	18003a1e 	bne	r3,zero,100b490 <__adddf3+0x614>
 100b3a8:	3463c83a 	sub	r17,r6,r17
 100b3ac:	4a07c83a 	sub	r3,r9,r8
 100b3b0:	344d803a 	cmpltu	r6,r6,r17
 100b3b4:	1991c83a 	sub	r8,r3,r6
 100b3b8:	1021883a 	mov	r16,r2
 100b3bc:	3825883a 	mov	r18,r7
 100b3c0:	003f0a06 	br	100afec <__adddf3+0x170>
 100b3c4:	2023883a 	mov	r17,r4
 100b3c8:	003f0d06 	br	100b000 <__adddf3+0x184>
 100b3cc:	0081ffc4 	movi	r2,2047
 100b3d0:	80bf3f1e 	bne	r16,r2,100b0d0 <__adddf3+0x254>
 100b3d4:	003ec806 	br	100aef8 <__adddf3+0x7c>
 100b3d8:	0005883a 	mov	r2,zero
 100b3dc:	003fb106 	br	100b2a4 <__adddf3+0x428>
 100b3e0:	0007883a 	mov	r3,zero
 100b3e4:	003fbc06 	br	100b2d8 <__adddf3+0x45c>
 100b3e8:	4444b03a 	or	r2,r8,r17
 100b3ec:	8000871e 	bne	r16,zero,100b60c <__adddf3+0x790>
 100b3f0:	1000ba26 	beq	r2,zero,100b6dc <__adddf3+0x860>
 100b3f4:	4984b03a 	or	r2,r9,r6
 100b3f8:	103ebf26 	beq	r2,zero,100aef8 <__adddf3+0x7c>
 100b3fc:	8985883a 	add	r2,r17,r6
 100b400:	4247883a 	add	r3,r8,r9
 100b404:	1451803a 	cmpltu	r8,r2,r17
 100b408:	40d1883a 	add	r8,r8,r3
 100b40c:	40c0202c 	andhi	r3,r8,128
 100b410:	1023883a 	mov	r17,r2
 100b414:	183f1a26 	beq	r3,zero,100b080 <__adddf3+0x204>
 100b418:	00bfe034 	movhi	r2,65408
 100b41c:	10bfffc4 	addi	r2,r2,-1
 100b420:	2021883a 	mov	r16,r4
 100b424:	4090703a 	and	r8,r8,r2
 100b428:	003eb306 	br	100aef8 <__adddf3+0x7c>
 100b42c:	4444b03a 	or	r2,r8,r17
 100b430:	8000291e 	bne	r16,zero,100b4d8 <__adddf3+0x65c>
 100b434:	10004b1e 	bne	r2,zero,100b564 <__adddf3+0x6e8>
 100b438:	4990b03a 	or	r8,r9,r6
 100b43c:	40008b26 	beq	r8,zero,100b66c <__adddf3+0x7f0>
 100b440:	4811883a 	mov	r8,r9
 100b444:	3023883a 	mov	r17,r6
 100b448:	3825883a 	mov	r18,r7
 100b44c:	003eaa06 	br	100aef8 <__adddf3+0x7c>
 100b450:	1021883a 	mov	r16,r2
 100b454:	0011883a 	mov	r8,zero
 100b458:	0005883a 	mov	r2,zero
 100b45c:	003f0f06 	br	100b09c <__adddf3+0x220>
 100b460:	217ff804 	addi	r5,r4,-32
 100b464:	00800804 	movi	r2,32
 100b468:	494ad83a 	srl	r5,r9,r5
 100b46c:	20807d26 	beq	r4,r2,100b664 <__adddf3+0x7e8>
 100b470:	00801004 	movi	r2,64
 100b474:	1109c83a 	sub	r4,r2,r4
 100b478:	4912983a 	sll	r9,r9,r4
 100b47c:	498cb03a 	or	r6,r9,r6
 100b480:	300cc03a 	cmpne	r6,r6,zero
 100b484:	298ab03a 	or	r5,r5,r6
 100b488:	0013883a 	mov	r9,zero
 100b48c:	003f1506 	br	100b0e4 <__adddf3+0x268>
 100b490:	0101ffc4 	movi	r4,2047
 100b494:	113f9a1e 	bne	r2,r4,100b300 <__adddf3+0x484>
 100b498:	4811883a 	mov	r8,r9
 100b49c:	3023883a 	mov	r17,r6
 100b4a0:	1021883a 	mov	r16,r2
 100b4a4:	3825883a 	mov	r18,r7
 100b4a8:	003e9306 	br	100aef8 <__adddf3+0x7c>
 100b4ac:	8000161e 	bne	r16,zero,100b508 <__adddf3+0x68c>
 100b4b0:	444ab03a 	or	r5,r8,r17
 100b4b4:	28005126 	beq	r5,zero,100b5fc <__adddf3+0x780>
 100b4b8:	0108303a 	nor	r4,zero,r4
 100b4bc:	20004d1e 	bne	r4,zero,100b5f4 <__adddf3+0x778>
 100b4c0:	89a3883a 	add	r17,r17,r6
 100b4c4:	4253883a 	add	r9,r8,r9
 100b4c8:	898d803a 	cmpltu	r6,r17,r6
 100b4cc:	3251883a 	add	r8,r6,r9
 100b4d0:	1021883a 	mov	r16,r2
 100b4d4:	003f0806 	br	100b0f8 <__adddf3+0x27c>
 100b4d8:	1000301e 	bne	r2,zero,100b59c <__adddf3+0x720>
 100b4dc:	4984b03a 	or	r2,r9,r6
 100b4e0:	10007126 	beq	r2,zero,100b6a8 <__adddf3+0x82c>
 100b4e4:	4811883a 	mov	r8,r9
 100b4e8:	3023883a 	mov	r17,r6
 100b4ec:	3825883a 	mov	r18,r7
 100b4f0:	0401ffc4 	movi	r16,2047
 100b4f4:	003e8006 	br	100aef8 <__adddf3+0x7c>
 100b4f8:	4462b03a 	or	r17,r8,r17
 100b4fc:	8822c03a 	cmpne	r17,r17,zero
 100b500:	0007883a 	mov	r3,zero
 100b504:	003f8b06 	br	100b334 <__adddf3+0x4b8>
 100b508:	0141ffc4 	movi	r5,2047
 100b50c:	11403b26 	beq	r2,r5,100b5fc <__adddf3+0x780>
 100b510:	0109c83a 	sub	r4,zero,r4
 100b514:	42002034 	orhi	r8,r8,128
 100b518:	01400e04 	movi	r5,56
 100b51c:	29006716 	blt	r5,r4,100b6bc <__adddf3+0x840>
 100b520:	014007c4 	movi	r5,31
 100b524:	29007016 	blt	r5,r4,100b6e8 <__adddf3+0x86c>
 100b528:	01400804 	movi	r5,32
 100b52c:	290bc83a 	sub	r5,r5,r4
 100b530:	4154983a 	sll	r10,r8,r5
 100b534:	890ed83a 	srl	r7,r17,r4
 100b538:	894a983a 	sll	r5,r17,r5
 100b53c:	4108d83a 	srl	r4,r8,r4
 100b540:	51e2b03a 	or	r17,r10,r7
 100b544:	280ac03a 	cmpne	r5,r5,zero
 100b548:	8962b03a 	or	r17,r17,r5
 100b54c:	89a3883a 	add	r17,r17,r6
 100b550:	2253883a 	add	r9,r4,r9
 100b554:	898d803a 	cmpltu	r6,r17,r6
 100b558:	3251883a 	add	r8,r6,r9
 100b55c:	1021883a 	mov	r16,r2
 100b560:	003ee506 	br	100b0f8 <__adddf3+0x27c>
 100b564:	4984b03a 	or	r2,r9,r6
 100b568:	103e6326 	beq	r2,zero,100aef8 <__adddf3+0x7c>
 100b56c:	8987c83a 	sub	r3,r17,r6
 100b570:	88c9803a 	cmpltu	r4,r17,r3
 100b574:	4245c83a 	sub	r2,r8,r9
 100b578:	1105c83a 	sub	r2,r2,r4
 100b57c:	1100202c 	andhi	r4,r2,128
 100b580:	203ebb26 	beq	r4,zero,100b070 <__adddf3+0x1f4>
 100b584:	3463c83a 	sub	r17,r6,r17
 100b588:	4a07c83a 	sub	r3,r9,r8
 100b58c:	344d803a 	cmpltu	r6,r6,r17
 100b590:	1991c83a 	sub	r8,r3,r6
 100b594:	3825883a 	mov	r18,r7
 100b598:	003e5706 	br	100aef8 <__adddf3+0x7c>
 100b59c:	4984b03a 	or	r2,r9,r6
 100b5a0:	10002e26 	beq	r2,zero,100b65c <__adddf3+0x7e0>
 100b5a4:	4004d0fa 	srli	r2,r8,3
 100b5a8:	8822d0fa 	srli	r17,r17,3
 100b5ac:	4010977a 	slli	r8,r8,29
 100b5b0:	10c0022c 	andhi	r3,r2,8
 100b5b4:	4462b03a 	or	r17,r8,r17
 100b5b8:	18000826 	beq	r3,zero,100b5dc <__adddf3+0x760>
 100b5bc:	4808d0fa 	srli	r4,r9,3
 100b5c0:	20c0022c 	andhi	r3,r4,8
 100b5c4:	1800051e 	bne	r3,zero,100b5dc <__adddf3+0x760>
 100b5c8:	300cd0fa 	srli	r6,r6,3
 100b5cc:	4806977a 	slli	r3,r9,29
 100b5d0:	2005883a 	mov	r2,r4
 100b5d4:	3825883a 	mov	r18,r7
 100b5d8:	19a2b03a 	or	r17,r3,r6
 100b5dc:	8810d77a 	srli	r8,r17,29
 100b5e0:	100490fa 	slli	r2,r2,3
 100b5e4:	882290fa 	slli	r17,r17,3
 100b5e8:	0401ffc4 	movi	r16,2047
 100b5ec:	4090b03a 	or	r8,r8,r2
 100b5f0:	003e4106 	br	100aef8 <__adddf3+0x7c>
 100b5f4:	0141ffc4 	movi	r5,2047
 100b5f8:	117fc71e 	bne	r2,r5,100b518 <__adddf3+0x69c>
 100b5fc:	4811883a 	mov	r8,r9
 100b600:	3023883a 	mov	r17,r6
 100b604:	1021883a 	mov	r16,r2
 100b608:	003e3b06 	br	100aef8 <__adddf3+0x7c>
 100b60c:	10002f26 	beq	r2,zero,100b6cc <__adddf3+0x850>
 100b610:	4984b03a 	or	r2,r9,r6
 100b614:	10001126 	beq	r2,zero,100b65c <__adddf3+0x7e0>
 100b618:	4004d0fa 	srli	r2,r8,3
 100b61c:	8822d0fa 	srli	r17,r17,3
 100b620:	4010977a 	slli	r8,r8,29
 100b624:	10c0022c 	andhi	r3,r2,8
 100b628:	4462b03a 	or	r17,r8,r17
 100b62c:	183feb26 	beq	r3,zero,100b5dc <__adddf3+0x760>
 100b630:	4808d0fa 	srli	r4,r9,3
 100b634:	20c0022c 	andhi	r3,r4,8
 100b638:	183fe81e 	bne	r3,zero,100b5dc <__adddf3+0x760>
 100b63c:	300cd0fa 	srli	r6,r6,3
 100b640:	4806977a 	slli	r3,r9,29
 100b644:	2005883a 	mov	r2,r4
 100b648:	19a2b03a 	or	r17,r3,r6
 100b64c:	003fe306 	br	100b5dc <__adddf3+0x760>
 100b650:	0011883a 	mov	r8,zero
 100b654:	0005883a 	mov	r2,zero
 100b658:	003e3f06 	br	100af58 <__adddf3+0xdc>
 100b65c:	0401ffc4 	movi	r16,2047
 100b660:	003e2506 	br	100aef8 <__adddf3+0x7c>
 100b664:	0013883a 	mov	r9,zero
 100b668:	003f8406 	br	100b47c <__adddf3+0x600>
 100b66c:	0005883a 	mov	r2,zero
 100b670:	0007883a 	mov	r3,zero
 100b674:	003e8906 	br	100b09c <__adddf3+0x220>
 100b678:	197ff804 	addi	r5,r3,-32
 100b67c:	01000804 	movi	r4,32
 100b680:	414ad83a 	srl	r5,r8,r5
 100b684:	19002426 	beq	r3,r4,100b718 <__adddf3+0x89c>
 100b688:	01001004 	movi	r4,64
 100b68c:	20c7c83a 	sub	r3,r4,r3
 100b690:	40c6983a 	sll	r3,r8,r3
 100b694:	1c46b03a 	or	r3,r3,r17
 100b698:	1806c03a 	cmpne	r3,r3,zero
 100b69c:	28e2b03a 	or	r17,r5,r3
 100b6a0:	0007883a 	mov	r3,zero
 100b6a4:	003f2306 	br	100b334 <__adddf3+0x4b8>
 100b6a8:	0007883a 	mov	r3,zero
 100b6ac:	5811883a 	mov	r8,r11
 100b6b0:	00bfffc4 	movi	r2,-1
 100b6b4:	0401ffc4 	movi	r16,2047
 100b6b8:	003e7806 	br	100b09c <__adddf3+0x220>
 100b6bc:	4462b03a 	or	r17,r8,r17
 100b6c0:	8822c03a 	cmpne	r17,r17,zero
 100b6c4:	0009883a 	mov	r4,zero
 100b6c8:	003fa006 	br	100b54c <__adddf3+0x6d0>
 100b6cc:	4811883a 	mov	r8,r9
 100b6d0:	3023883a 	mov	r17,r6
 100b6d4:	0401ffc4 	movi	r16,2047
 100b6d8:	003e0706 	br	100aef8 <__adddf3+0x7c>
 100b6dc:	4811883a 	mov	r8,r9
 100b6e0:	3023883a 	mov	r17,r6
 100b6e4:	003e0406 	br	100aef8 <__adddf3+0x7c>
 100b6e8:	21fff804 	addi	r7,r4,-32
 100b6ec:	01400804 	movi	r5,32
 100b6f0:	41ced83a 	srl	r7,r8,r7
 100b6f4:	21400a26 	beq	r4,r5,100b720 <__adddf3+0x8a4>
 100b6f8:	01401004 	movi	r5,64
 100b6fc:	2909c83a 	sub	r4,r5,r4
 100b700:	4108983a 	sll	r4,r8,r4
 100b704:	2448b03a 	or	r4,r4,r17
 100b708:	2008c03a 	cmpne	r4,r4,zero
 100b70c:	3922b03a 	or	r17,r7,r4
 100b710:	0009883a 	mov	r4,zero
 100b714:	003f8d06 	br	100b54c <__adddf3+0x6d0>
 100b718:	0007883a 	mov	r3,zero
 100b71c:	003fdd06 	br	100b694 <__adddf3+0x818>
 100b720:	0009883a 	mov	r4,zero
 100b724:	003ff706 	br	100b704 <__adddf3+0x888>

0100b728 <__divdf3>:
 100b728:	defff204 	addi	sp,sp,-56
 100b72c:	dd400915 	stw	r21,36(sp)
 100b730:	282ad53a 	srli	r21,r5,20
 100b734:	dd000815 	stw	r20,32(sp)
 100b738:	2828d7fa 	srli	r20,r5,31
 100b73c:	dc000415 	stw	r16,16(sp)
 100b740:	04000434 	movhi	r16,16
 100b744:	df000c15 	stw	fp,48(sp)
 100b748:	843fffc4 	addi	r16,r16,-1
 100b74c:	dfc00d15 	stw	ra,52(sp)
 100b750:	ddc00b15 	stw	r23,44(sp)
 100b754:	dd800a15 	stw	r22,40(sp)
 100b758:	dcc00715 	stw	r19,28(sp)
 100b75c:	dc800615 	stw	r18,24(sp)
 100b760:	dc400515 	stw	r17,20(sp)
 100b764:	ad41ffcc 	andi	r21,r21,2047
 100b768:	2c20703a 	and	r16,r5,r16
 100b76c:	a7003fcc 	andi	fp,r20,255
 100b770:	a8006126 	beq	r21,zero,100b8f8 <__divdf3+0x1d0>
 100b774:	0081ffc4 	movi	r2,2047
 100b778:	2025883a 	mov	r18,r4
 100b77c:	a8803726 	beq	r21,r2,100b85c <__divdf3+0x134>
 100b780:	80800434 	orhi	r2,r16,16
 100b784:	100490fa 	slli	r2,r2,3
 100b788:	2020d77a 	srli	r16,r4,29
 100b78c:	202490fa 	slli	r18,r4,3
 100b790:	ad7f0044 	addi	r21,r21,-1023
 100b794:	80a0b03a 	or	r16,r16,r2
 100b798:	0027883a 	mov	r19,zero
 100b79c:	0013883a 	mov	r9,zero
 100b7a0:	3804d53a 	srli	r2,r7,20
 100b7a4:	382cd7fa 	srli	r22,r7,31
 100b7a8:	04400434 	movhi	r17,16
 100b7ac:	8c7fffc4 	addi	r17,r17,-1
 100b7b0:	1081ffcc 	andi	r2,r2,2047
 100b7b4:	3011883a 	mov	r8,r6
 100b7b8:	3c62703a 	and	r17,r7,r17
 100b7bc:	b5c03fcc 	andi	r23,r22,255
 100b7c0:	10006c26 	beq	r2,zero,100b974 <__divdf3+0x24c>
 100b7c4:	00c1ffc4 	movi	r3,2047
 100b7c8:	10c06426 	beq	r2,r3,100b95c <__divdf3+0x234>
 100b7cc:	88c00434 	orhi	r3,r17,16
 100b7d0:	180690fa 	slli	r3,r3,3
 100b7d4:	3022d77a 	srli	r17,r6,29
 100b7d8:	301090fa 	slli	r8,r6,3
 100b7dc:	10bf0044 	addi	r2,r2,-1023
 100b7e0:	88e2b03a 	or	r17,r17,r3
 100b7e4:	000f883a 	mov	r7,zero
 100b7e8:	a58cf03a 	xor	r6,r20,r22
 100b7ec:	3cc8b03a 	or	r4,r7,r19
 100b7f0:	a8abc83a 	sub	r21,r21,r2
 100b7f4:	008003c4 	movi	r2,15
 100b7f8:	3007883a 	mov	r3,r6
 100b7fc:	34c03fcc 	andi	r19,r6,255
 100b800:	11009036 	bltu	r2,r4,100ba44 <__divdf3+0x31c>
 100b804:	200890ba 	slli	r4,r4,2
 100b808:	00804074 	movhi	r2,257
 100b80c:	10ae0704 	addi	r2,r2,-18404
 100b810:	2089883a 	add	r4,r4,r2
 100b814:	20800017 	ldw	r2,0(r4)
 100b818:	1000683a 	jmp	r2
 100b81c:	0100ba44 	movi	r4,745
 100b820:	0100b894 	movui	r4,738
 100b824:	0100ba34 	movhi	r4,744
 100b828:	0100b888 	cmpgei	r4,zero,738
 100b82c:	0100ba34 	movhi	r4,744
 100b830:	0100ba08 	cmpgei	r4,zero,744
 100b834:	0100ba34 	movhi	r4,744
 100b838:	0100b888 	cmpgei	r4,zero,738
 100b83c:	0100b894 	movui	r4,738
 100b840:	0100b894 	movui	r4,738
 100b844:	0100ba08 	cmpgei	r4,zero,744
 100b848:	0100b888 	cmpgei	r4,zero,738
 100b84c:	0100b878 	rdprs	r4,zero,737
 100b850:	0100b878 	rdprs	r4,zero,737
 100b854:	0100b878 	rdprs	r4,zero,737
 100b858:	0100bd28 	cmpgeui	r4,zero,756
 100b85c:	2404b03a 	or	r2,r4,r16
 100b860:	1000661e 	bne	r2,zero,100b9fc <__divdf3+0x2d4>
 100b864:	04c00204 	movi	r19,8
 100b868:	0021883a 	mov	r16,zero
 100b86c:	0025883a 	mov	r18,zero
 100b870:	02400084 	movi	r9,2
 100b874:	003fca06 	br	100b7a0 <__divdf3+0x78>
 100b878:	8023883a 	mov	r17,r16
 100b87c:	9011883a 	mov	r8,r18
 100b880:	e02f883a 	mov	r23,fp
 100b884:	480f883a 	mov	r7,r9
 100b888:	00800084 	movi	r2,2
 100b88c:	3881311e 	bne	r7,r2,100bd54 <__divdf3+0x62c>
 100b890:	b827883a 	mov	r19,r23
 100b894:	98c0004c 	andi	r3,r19,1
 100b898:	0081ffc4 	movi	r2,2047
 100b89c:	000b883a 	mov	r5,zero
 100b8a0:	0025883a 	mov	r18,zero
 100b8a4:	1004953a 	slli	r2,r2,20
 100b8a8:	18c03fcc 	andi	r3,r3,255
 100b8ac:	04400434 	movhi	r17,16
 100b8b0:	8c7fffc4 	addi	r17,r17,-1
 100b8b4:	180697fa 	slli	r3,r3,31
 100b8b8:	2c4a703a 	and	r5,r5,r17
 100b8bc:	288ab03a 	or	r5,r5,r2
 100b8c0:	28c6b03a 	or	r3,r5,r3
 100b8c4:	9005883a 	mov	r2,r18
 100b8c8:	dfc00d17 	ldw	ra,52(sp)
 100b8cc:	df000c17 	ldw	fp,48(sp)
 100b8d0:	ddc00b17 	ldw	r23,44(sp)
 100b8d4:	dd800a17 	ldw	r22,40(sp)
 100b8d8:	dd400917 	ldw	r21,36(sp)
 100b8dc:	dd000817 	ldw	r20,32(sp)
 100b8e0:	dcc00717 	ldw	r19,28(sp)
 100b8e4:	dc800617 	ldw	r18,24(sp)
 100b8e8:	dc400517 	ldw	r17,20(sp)
 100b8ec:	dc000417 	ldw	r16,16(sp)
 100b8f0:	dec00e04 	addi	sp,sp,56
 100b8f4:	f800283a 	ret
 100b8f8:	2404b03a 	or	r2,r4,r16
 100b8fc:	2027883a 	mov	r19,r4
 100b900:	10003926 	beq	r2,zero,100b9e8 <__divdf3+0x2c0>
 100b904:	80012e26 	beq	r16,zero,100bdc0 <__divdf3+0x698>
 100b908:	8009883a 	mov	r4,r16
 100b90c:	d9800315 	stw	r6,12(sp)
 100b910:	d9c00215 	stw	r7,8(sp)
 100b914:	100d4800 	call	100d480 <__clzsi2>
 100b918:	d9800317 	ldw	r6,12(sp)
 100b91c:	d9c00217 	ldw	r7,8(sp)
 100b920:	113ffd44 	addi	r4,r2,-11
 100b924:	00c00704 	movi	r3,28
 100b928:	19012116 	blt	r3,r4,100bdb0 <__divdf3+0x688>
 100b92c:	00c00744 	movi	r3,29
 100b930:	147ffe04 	addi	r17,r2,-8
 100b934:	1907c83a 	sub	r3,r3,r4
 100b938:	8460983a 	sll	r16,r16,r17
 100b93c:	98c6d83a 	srl	r3,r19,r3
 100b940:	9c64983a 	sll	r18,r19,r17
 100b944:	1c20b03a 	or	r16,r3,r16
 100b948:	1080fcc4 	addi	r2,r2,1011
 100b94c:	00abc83a 	sub	r21,zero,r2
 100b950:	0027883a 	mov	r19,zero
 100b954:	0013883a 	mov	r9,zero
 100b958:	003f9106 	br	100b7a0 <__divdf3+0x78>
 100b95c:	3446b03a 	or	r3,r6,r17
 100b960:	18001f1e 	bne	r3,zero,100b9e0 <__divdf3+0x2b8>
 100b964:	0023883a 	mov	r17,zero
 100b968:	0011883a 	mov	r8,zero
 100b96c:	01c00084 	movi	r7,2
 100b970:	003f9d06 	br	100b7e8 <__divdf3+0xc0>
 100b974:	3446b03a 	or	r3,r6,r17
 100b978:	18001526 	beq	r3,zero,100b9d0 <__divdf3+0x2a8>
 100b97c:	88011b26 	beq	r17,zero,100bdec <__divdf3+0x6c4>
 100b980:	8809883a 	mov	r4,r17
 100b984:	d9800315 	stw	r6,12(sp)
 100b988:	da400115 	stw	r9,4(sp)
 100b98c:	100d4800 	call	100d480 <__clzsi2>
 100b990:	d9800317 	ldw	r6,12(sp)
 100b994:	da400117 	ldw	r9,4(sp)
 100b998:	113ffd44 	addi	r4,r2,-11
 100b99c:	00c00704 	movi	r3,28
 100b9a0:	19010e16 	blt	r3,r4,100bddc <__divdf3+0x6b4>
 100b9a4:	00c00744 	movi	r3,29
 100b9a8:	123ffe04 	addi	r8,r2,-8
 100b9ac:	1907c83a 	sub	r3,r3,r4
 100b9b0:	8a22983a 	sll	r17,r17,r8
 100b9b4:	30c6d83a 	srl	r3,r6,r3
 100b9b8:	3210983a 	sll	r8,r6,r8
 100b9bc:	1c62b03a 	or	r17,r3,r17
 100b9c0:	1080fcc4 	addi	r2,r2,1011
 100b9c4:	0085c83a 	sub	r2,zero,r2
 100b9c8:	000f883a 	mov	r7,zero
 100b9cc:	003f8606 	br	100b7e8 <__divdf3+0xc0>
 100b9d0:	0023883a 	mov	r17,zero
 100b9d4:	0011883a 	mov	r8,zero
 100b9d8:	01c00044 	movi	r7,1
 100b9dc:	003f8206 	br	100b7e8 <__divdf3+0xc0>
 100b9e0:	01c000c4 	movi	r7,3
 100b9e4:	003f8006 	br	100b7e8 <__divdf3+0xc0>
 100b9e8:	04c00104 	movi	r19,4
 100b9ec:	0021883a 	mov	r16,zero
 100b9f0:	0025883a 	mov	r18,zero
 100b9f4:	02400044 	movi	r9,1
 100b9f8:	003f6906 	br	100b7a0 <__divdf3+0x78>
 100b9fc:	04c00304 	movi	r19,12
 100ba00:	024000c4 	movi	r9,3
 100ba04:	003f6606 	br	100b7a0 <__divdf3+0x78>
 100ba08:	01400434 	movhi	r5,16
 100ba0c:	0007883a 	mov	r3,zero
 100ba10:	297fffc4 	addi	r5,r5,-1
 100ba14:	04bfffc4 	movi	r18,-1
 100ba18:	0081ffc4 	movi	r2,2047
 100ba1c:	003fa106 	br	100b8a4 <__divdf3+0x17c>
 100ba20:	00c00044 	movi	r3,1
 100ba24:	1887c83a 	sub	r3,r3,r2
 100ba28:	01000e04 	movi	r4,56
 100ba2c:	20c1210e 	bge	r4,r3,100beb4 <__divdf3+0x78c>
 100ba30:	98c0004c 	andi	r3,r19,1
 100ba34:	0005883a 	mov	r2,zero
 100ba38:	000b883a 	mov	r5,zero
 100ba3c:	0025883a 	mov	r18,zero
 100ba40:	003f9806 	br	100b8a4 <__divdf3+0x17c>
 100ba44:	8c00fd36 	bltu	r17,r16,100be3c <__divdf3+0x714>
 100ba48:	8440fb26 	beq	r16,r17,100be38 <__divdf3+0x710>
 100ba4c:	8007883a 	mov	r3,r16
 100ba50:	ad7fffc4 	addi	r21,r21,-1
 100ba54:	0021883a 	mov	r16,zero
 100ba58:	4004d63a 	srli	r2,r8,24
 100ba5c:	8822923a 	slli	r17,r17,8
 100ba60:	1809883a 	mov	r4,r3
 100ba64:	402c923a 	slli	r22,r8,8
 100ba68:	88b8b03a 	or	fp,r17,r2
 100ba6c:	e028d43a 	srli	r20,fp,16
 100ba70:	d8c00015 	stw	r3,0(sp)
 100ba74:	e5ffffcc 	andi	r23,fp,65535
 100ba78:	a00b883a 	mov	r5,r20
 100ba7c:	100adc00 	call	100adc0 <__udivsi3>
 100ba80:	d8c00017 	ldw	r3,0(sp)
 100ba84:	a00b883a 	mov	r5,r20
 100ba88:	d8800315 	stw	r2,12(sp)
 100ba8c:	1809883a 	mov	r4,r3
 100ba90:	100ae240 	call	100ae24 <__umodsi3>
 100ba94:	d9800317 	ldw	r6,12(sp)
 100ba98:	1006943a 	slli	r3,r2,16
 100ba9c:	9004d43a 	srli	r2,r18,16
 100baa0:	b9a3383a 	mul	r17,r23,r6
 100baa4:	10c4b03a 	or	r2,r2,r3
 100baa8:	1440062e 	bgeu	r2,r17,100bac4 <__divdf3+0x39c>
 100baac:	1705883a 	add	r2,r2,fp
 100bab0:	30ffffc4 	addi	r3,r6,-1
 100bab4:	1700ee36 	bltu	r2,fp,100be70 <__divdf3+0x748>
 100bab8:	1440ed2e 	bgeu	r2,r17,100be70 <__divdf3+0x748>
 100babc:	31bfff84 	addi	r6,r6,-2
 100bac0:	1705883a 	add	r2,r2,fp
 100bac4:	1463c83a 	sub	r17,r2,r17
 100bac8:	a00b883a 	mov	r5,r20
 100bacc:	8809883a 	mov	r4,r17
 100bad0:	d9800315 	stw	r6,12(sp)
 100bad4:	100adc00 	call	100adc0 <__udivsi3>
 100bad8:	a00b883a 	mov	r5,r20
 100badc:	8809883a 	mov	r4,r17
 100bae0:	d8800215 	stw	r2,8(sp)
 100bae4:	100ae240 	call	100ae24 <__umodsi3>
 100bae8:	d9c00217 	ldw	r7,8(sp)
 100baec:	1004943a 	slli	r2,r2,16
 100baf0:	94bfffcc 	andi	r18,r18,65535
 100baf4:	b9d1383a 	mul	r8,r23,r7
 100baf8:	90a4b03a 	or	r18,r18,r2
 100bafc:	d9800317 	ldw	r6,12(sp)
 100bb00:	9200062e 	bgeu	r18,r8,100bb1c <__divdf3+0x3f4>
 100bb04:	9725883a 	add	r18,r18,fp
 100bb08:	38bfffc4 	addi	r2,r7,-1
 100bb0c:	9700d636 	bltu	r18,fp,100be68 <__divdf3+0x740>
 100bb10:	9200d52e 	bgeu	r18,r8,100be68 <__divdf3+0x740>
 100bb14:	39ffff84 	addi	r7,r7,-2
 100bb18:	9725883a 	add	r18,r18,fp
 100bb1c:	3004943a 	slli	r2,r6,16
 100bb20:	b012d43a 	srli	r9,r22,16
 100bb24:	b1bfffcc 	andi	r6,r22,65535
 100bb28:	11e2b03a 	or	r17,r2,r7
 100bb2c:	8806d43a 	srli	r3,r17,16
 100bb30:	893fffcc 	andi	r4,r17,65535
 100bb34:	218b383a 	mul	r5,r4,r6
 100bb38:	30c5383a 	mul	r2,r6,r3
 100bb3c:	2249383a 	mul	r4,r4,r9
 100bb40:	280ed43a 	srli	r7,r5,16
 100bb44:	9225c83a 	sub	r18,r18,r8
 100bb48:	2089883a 	add	r4,r4,r2
 100bb4c:	3909883a 	add	r4,r7,r4
 100bb50:	1a47383a 	mul	r3,r3,r9
 100bb54:	2080022e 	bgeu	r4,r2,100bb60 <__divdf3+0x438>
 100bb58:	00800074 	movhi	r2,1
 100bb5c:	1887883a 	add	r3,r3,r2
 100bb60:	2004d43a 	srli	r2,r4,16
 100bb64:	2008943a 	slli	r4,r4,16
 100bb68:	297fffcc 	andi	r5,r5,65535
 100bb6c:	10c7883a 	add	r3,r2,r3
 100bb70:	2149883a 	add	r4,r4,r5
 100bb74:	90c0a536 	bltu	r18,r3,100be0c <__divdf3+0x6e4>
 100bb78:	90c0bf26 	beq	r18,r3,100be78 <__divdf3+0x750>
 100bb7c:	90c7c83a 	sub	r3,r18,r3
 100bb80:	810fc83a 	sub	r7,r16,r4
 100bb84:	81e5803a 	cmpltu	r18,r16,r7
 100bb88:	1ca5c83a 	sub	r18,r3,r18
 100bb8c:	e480c126 	beq	fp,r18,100be94 <__divdf3+0x76c>
 100bb90:	a00b883a 	mov	r5,r20
 100bb94:	9009883a 	mov	r4,r18
 100bb98:	d9800315 	stw	r6,12(sp)
 100bb9c:	d9c00215 	stw	r7,8(sp)
 100bba0:	da400115 	stw	r9,4(sp)
 100bba4:	100adc00 	call	100adc0 <__udivsi3>
 100bba8:	a00b883a 	mov	r5,r20
 100bbac:	9009883a 	mov	r4,r18
 100bbb0:	d8800015 	stw	r2,0(sp)
 100bbb4:	100ae240 	call	100ae24 <__umodsi3>
 100bbb8:	d9c00217 	ldw	r7,8(sp)
 100bbbc:	da000017 	ldw	r8,0(sp)
 100bbc0:	1006943a 	slli	r3,r2,16
 100bbc4:	3804d43a 	srli	r2,r7,16
 100bbc8:	ba21383a 	mul	r16,r23,r8
 100bbcc:	d9800317 	ldw	r6,12(sp)
 100bbd0:	10c4b03a 	or	r2,r2,r3
 100bbd4:	da400117 	ldw	r9,4(sp)
 100bbd8:	1400062e 	bgeu	r2,r16,100bbf4 <__divdf3+0x4cc>
 100bbdc:	1705883a 	add	r2,r2,fp
 100bbe0:	40ffffc4 	addi	r3,r8,-1
 100bbe4:	1700ad36 	bltu	r2,fp,100be9c <__divdf3+0x774>
 100bbe8:	1400ac2e 	bgeu	r2,r16,100be9c <__divdf3+0x774>
 100bbec:	423fff84 	addi	r8,r8,-2
 100bbf0:	1705883a 	add	r2,r2,fp
 100bbf4:	1421c83a 	sub	r16,r2,r16
 100bbf8:	a00b883a 	mov	r5,r20
 100bbfc:	8009883a 	mov	r4,r16
 100bc00:	d9800315 	stw	r6,12(sp)
 100bc04:	d9c00215 	stw	r7,8(sp)
 100bc08:	da000015 	stw	r8,0(sp)
 100bc0c:	da400115 	stw	r9,4(sp)
 100bc10:	100adc00 	call	100adc0 <__udivsi3>
 100bc14:	8009883a 	mov	r4,r16
 100bc18:	a00b883a 	mov	r5,r20
 100bc1c:	1025883a 	mov	r18,r2
 100bc20:	100ae240 	call	100ae24 <__umodsi3>
 100bc24:	d9c00217 	ldw	r7,8(sp)
 100bc28:	1004943a 	slli	r2,r2,16
 100bc2c:	bcaf383a 	mul	r23,r23,r18
 100bc30:	393fffcc 	andi	r4,r7,65535
 100bc34:	2088b03a 	or	r4,r4,r2
 100bc38:	d9800317 	ldw	r6,12(sp)
 100bc3c:	da000017 	ldw	r8,0(sp)
 100bc40:	da400117 	ldw	r9,4(sp)
 100bc44:	25c0062e 	bgeu	r4,r23,100bc60 <__divdf3+0x538>
 100bc48:	2709883a 	add	r4,r4,fp
 100bc4c:	90bfffc4 	addi	r2,r18,-1
 100bc50:	27009436 	bltu	r4,fp,100bea4 <__divdf3+0x77c>
 100bc54:	25c0932e 	bgeu	r4,r23,100bea4 <__divdf3+0x77c>
 100bc58:	94bfff84 	addi	r18,r18,-2
 100bc5c:	2709883a 	add	r4,r4,fp
 100bc60:	4004943a 	slli	r2,r8,16
 100bc64:	25efc83a 	sub	r23,r4,r23
 100bc68:	1490b03a 	or	r8,r2,r18
 100bc6c:	4008d43a 	srli	r4,r8,16
 100bc70:	40ffffcc 	andi	r3,r8,65535
 100bc74:	30c5383a 	mul	r2,r6,r3
 100bc78:	1a47383a 	mul	r3,r3,r9
 100bc7c:	310d383a 	mul	r6,r6,r4
 100bc80:	100ad43a 	srli	r5,r2,16
 100bc84:	4913383a 	mul	r9,r9,r4
 100bc88:	1987883a 	add	r3,r3,r6
 100bc8c:	28c7883a 	add	r3,r5,r3
 100bc90:	1980022e 	bgeu	r3,r6,100bc9c <__divdf3+0x574>
 100bc94:	01000074 	movhi	r4,1
 100bc98:	4913883a 	add	r9,r9,r4
 100bc9c:	1808d43a 	srli	r4,r3,16
 100bca0:	1806943a 	slli	r3,r3,16
 100bca4:	10bfffcc 	andi	r2,r2,65535
 100bca8:	2253883a 	add	r9,r4,r9
 100bcac:	1887883a 	add	r3,r3,r2
 100bcb0:	ba403836 	bltu	r23,r9,100bd94 <__divdf3+0x66c>
 100bcb4:	ba403626 	beq	r23,r9,100bd90 <__divdf3+0x668>
 100bcb8:	42000054 	ori	r8,r8,1
 100bcbc:	a880ffc4 	addi	r2,r21,1023
 100bcc0:	00bf570e 	bge	zero,r2,100ba20 <__divdf3+0x2f8>
 100bcc4:	40c001cc 	andi	r3,r8,7
 100bcc8:	18000726 	beq	r3,zero,100bce8 <__divdf3+0x5c0>
 100bccc:	40c003cc 	andi	r3,r8,15
 100bcd0:	01000104 	movi	r4,4
 100bcd4:	19000426 	beq	r3,r4,100bce8 <__divdf3+0x5c0>
 100bcd8:	4107883a 	add	r3,r8,r4
 100bcdc:	1a11803a 	cmpltu	r8,r3,r8
 100bce0:	8a23883a 	add	r17,r17,r8
 100bce4:	1811883a 	mov	r8,r3
 100bce8:	88c0402c 	andhi	r3,r17,256
 100bcec:	18000426 	beq	r3,zero,100bd00 <__divdf3+0x5d8>
 100bcf0:	00ffc034 	movhi	r3,65280
 100bcf4:	18ffffc4 	addi	r3,r3,-1
 100bcf8:	a8810004 	addi	r2,r21,1024
 100bcfc:	88e2703a 	and	r17,r17,r3
 100bd00:	00c1ff84 	movi	r3,2046
 100bd04:	18bee316 	blt	r3,r2,100b894 <__divdf3+0x16c>
 100bd08:	8824977a 	slli	r18,r17,29
 100bd0c:	4010d0fa 	srli	r8,r8,3
 100bd10:	8822927a 	slli	r17,r17,9
 100bd14:	1081ffcc 	andi	r2,r2,2047
 100bd18:	9224b03a 	or	r18,r18,r8
 100bd1c:	880ad33a 	srli	r5,r17,12
 100bd20:	98c0004c 	andi	r3,r19,1
 100bd24:	003edf06 	br	100b8a4 <__divdf3+0x17c>
 100bd28:	8080022c 	andhi	r2,r16,8
 100bd2c:	10001226 	beq	r2,zero,100bd78 <__divdf3+0x650>
 100bd30:	8880022c 	andhi	r2,r17,8
 100bd34:	1000101e 	bne	r2,zero,100bd78 <__divdf3+0x650>
 100bd38:	00800434 	movhi	r2,16
 100bd3c:	89400234 	orhi	r5,r17,8
 100bd40:	10bfffc4 	addi	r2,r2,-1
 100bd44:	b007883a 	mov	r3,r22
 100bd48:	288a703a 	and	r5,r5,r2
 100bd4c:	4025883a 	mov	r18,r8
 100bd50:	003f3106 	br	100ba18 <__divdf3+0x2f0>
 100bd54:	008000c4 	movi	r2,3
 100bd58:	3880a626 	beq	r7,r2,100bff4 <__divdf3+0x8cc>
 100bd5c:	00800044 	movi	r2,1
 100bd60:	3880521e 	bne	r7,r2,100beac <__divdf3+0x784>
 100bd64:	b807883a 	mov	r3,r23
 100bd68:	0005883a 	mov	r2,zero
 100bd6c:	000b883a 	mov	r5,zero
 100bd70:	0025883a 	mov	r18,zero
 100bd74:	003ecb06 	br	100b8a4 <__divdf3+0x17c>
 100bd78:	00800434 	movhi	r2,16
 100bd7c:	81400234 	orhi	r5,r16,8
 100bd80:	10bfffc4 	addi	r2,r2,-1
 100bd84:	a007883a 	mov	r3,r20
 100bd88:	288a703a 	and	r5,r5,r2
 100bd8c:	003f2206 	br	100ba18 <__divdf3+0x2f0>
 100bd90:	183fca26 	beq	r3,zero,100bcbc <__divdf3+0x594>
 100bd94:	e5ef883a 	add	r23,fp,r23
 100bd98:	40bfffc4 	addi	r2,r8,-1
 100bd9c:	bf00392e 	bgeu	r23,fp,100be84 <__divdf3+0x75c>
 100bda0:	1011883a 	mov	r8,r2
 100bda4:	ba7fc41e 	bne	r23,r9,100bcb8 <__divdf3+0x590>
 100bda8:	b0ffc31e 	bne	r22,r3,100bcb8 <__divdf3+0x590>
 100bdac:	003fc306 	br	100bcbc <__divdf3+0x594>
 100bdb0:	143ff604 	addi	r16,r2,-40
 100bdb4:	9c20983a 	sll	r16,r19,r16
 100bdb8:	0025883a 	mov	r18,zero
 100bdbc:	003ee206 	br	100b948 <__divdf3+0x220>
 100bdc0:	d9800315 	stw	r6,12(sp)
 100bdc4:	d9c00215 	stw	r7,8(sp)
 100bdc8:	100d4800 	call	100d480 <__clzsi2>
 100bdcc:	10800804 	addi	r2,r2,32
 100bdd0:	d9c00217 	ldw	r7,8(sp)
 100bdd4:	d9800317 	ldw	r6,12(sp)
 100bdd8:	003ed106 	br	100b920 <__divdf3+0x1f8>
 100bddc:	147ff604 	addi	r17,r2,-40
 100bde0:	3462983a 	sll	r17,r6,r17
 100bde4:	0011883a 	mov	r8,zero
 100bde8:	003ef506 	br	100b9c0 <__divdf3+0x298>
 100bdec:	3009883a 	mov	r4,r6
 100bdf0:	d9800315 	stw	r6,12(sp)
 100bdf4:	da400115 	stw	r9,4(sp)
 100bdf8:	100d4800 	call	100d480 <__clzsi2>
 100bdfc:	10800804 	addi	r2,r2,32
 100be00:	da400117 	ldw	r9,4(sp)
 100be04:	d9800317 	ldw	r6,12(sp)
 100be08:	003ee306 	br	100b998 <__divdf3+0x270>
 100be0c:	85a1883a 	add	r16,r16,r22
 100be10:	8585803a 	cmpltu	r2,r16,r22
 100be14:	1705883a 	add	r2,r2,fp
 100be18:	14a5883a 	add	r18,r2,r18
 100be1c:	88bfffc4 	addi	r2,r17,-1
 100be20:	e4800c2e 	bgeu	fp,r18,100be54 <__divdf3+0x72c>
 100be24:	90c03e36 	bltu	r18,r3,100bf20 <__divdf3+0x7f8>
 100be28:	1c806926 	beq	r3,r18,100bfd0 <__divdf3+0x8a8>
 100be2c:	90c7c83a 	sub	r3,r18,r3
 100be30:	1023883a 	mov	r17,r2
 100be34:	003f5206 	br	100bb80 <__divdf3+0x458>
 100be38:	923f0436 	bltu	r18,r8,100ba4c <__divdf3+0x324>
 100be3c:	800897fa 	slli	r4,r16,31
 100be40:	9004d07a 	srli	r2,r18,1
 100be44:	8006d07a 	srli	r3,r16,1
 100be48:	902097fa 	slli	r16,r18,31
 100be4c:	20a4b03a 	or	r18,r4,r2
 100be50:	003f0106 	br	100ba58 <__divdf3+0x330>
 100be54:	e4bff51e 	bne	fp,r18,100be2c <__divdf3+0x704>
 100be58:	85bff22e 	bgeu	r16,r22,100be24 <__divdf3+0x6fc>
 100be5c:	e0c7c83a 	sub	r3,fp,r3
 100be60:	1023883a 	mov	r17,r2
 100be64:	003f4606 	br	100bb80 <__divdf3+0x458>
 100be68:	100f883a 	mov	r7,r2
 100be6c:	003f2b06 	br	100bb1c <__divdf3+0x3f4>
 100be70:	180d883a 	mov	r6,r3
 100be74:	003f1306 	br	100bac4 <__divdf3+0x39c>
 100be78:	813fe436 	bltu	r16,r4,100be0c <__divdf3+0x6e4>
 100be7c:	0007883a 	mov	r3,zero
 100be80:	003f3f06 	br	100bb80 <__divdf3+0x458>
 100be84:	ba402c36 	bltu	r23,r9,100bf38 <__divdf3+0x810>
 100be88:	4dc05426 	beq	r9,r23,100bfdc <__divdf3+0x8b4>
 100be8c:	1011883a 	mov	r8,r2
 100be90:	003f8906 	br	100bcb8 <__divdf3+0x590>
 100be94:	023fffc4 	movi	r8,-1
 100be98:	003f8806 	br	100bcbc <__divdf3+0x594>
 100be9c:	1811883a 	mov	r8,r3
 100bea0:	003f5406 	br	100bbf4 <__divdf3+0x4cc>
 100bea4:	1025883a 	mov	r18,r2
 100bea8:	003f6d06 	br	100bc60 <__divdf3+0x538>
 100beac:	b827883a 	mov	r19,r23
 100beb0:	003f8206 	br	100bcbc <__divdf3+0x594>
 100beb4:	010007c4 	movi	r4,31
 100beb8:	20c02616 	blt	r4,r3,100bf54 <__divdf3+0x82c>
 100bebc:	00800804 	movi	r2,32
 100bec0:	10c5c83a 	sub	r2,r2,r3
 100bec4:	888a983a 	sll	r5,r17,r2
 100bec8:	40c8d83a 	srl	r4,r8,r3
 100becc:	4084983a 	sll	r2,r8,r2
 100bed0:	88e2d83a 	srl	r17,r17,r3
 100bed4:	2906b03a 	or	r3,r5,r4
 100bed8:	1004c03a 	cmpne	r2,r2,zero
 100bedc:	1886b03a 	or	r3,r3,r2
 100bee0:	188001cc 	andi	r2,r3,7
 100bee4:	10000726 	beq	r2,zero,100bf04 <__divdf3+0x7dc>
 100bee8:	188003cc 	andi	r2,r3,15
 100beec:	01000104 	movi	r4,4
 100bef0:	11000426 	beq	r2,r4,100bf04 <__divdf3+0x7dc>
 100bef4:	1805883a 	mov	r2,r3
 100bef8:	10c00104 	addi	r3,r2,4
 100befc:	1885803a 	cmpltu	r2,r3,r2
 100bf00:	88a3883a 	add	r17,r17,r2
 100bf04:	8880202c 	andhi	r2,r17,128
 100bf08:	10002726 	beq	r2,zero,100bfa8 <__divdf3+0x880>
 100bf0c:	98c0004c 	andi	r3,r19,1
 100bf10:	00800044 	movi	r2,1
 100bf14:	000b883a 	mov	r5,zero
 100bf18:	0025883a 	mov	r18,zero
 100bf1c:	003e6106 	br	100b8a4 <__divdf3+0x17c>
 100bf20:	85a1883a 	add	r16,r16,r22
 100bf24:	8585803a 	cmpltu	r2,r16,r22
 100bf28:	1705883a 	add	r2,r2,fp
 100bf2c:	14a5883a 	add	r18,r2,r18
 100bf30:	8c7fff84 	addi	r17,r17,-2
 100bf34:	003f1106 	br	100bb7c <__divdf3+0x454>
 100bf38:	b589883a 	add	r4,r22,r22
 100bf3c:	25ad803a 	cmpltu	r22,r4,r22
 100bf40:	b739883a 	add	fp,r22,fp
 100bf44:	40bfff84 	addi	r2,r8,-2
 100bf48:	bf2f883a 	add	r23,r23,fp
 100bf4c:	202d883a 	mov	r22,r4
 100bf50:	003f9306 	br	100bda0 <__divdf3+0x678>
 100bf54:	013ff844 	movi	r4,-31
 100bf58:	2085c83a 	sub	r2,r4,r2
 100bf5c:	8888d83a 	srl	r4,r17,r2
 100bf60:	00800804 	movi	r2,32
 100bf64:	18802126 	beq	r3,r2,100bfec <__divdf3+0x8c4>
 100bf68:	00801004 	movi	r2,64
 100bf6c:	10c5c83a 	sub	r2,r2,r3
 100bf70:	8884983a 	sll	r2,r17,r2
 100bf74:	1204b03a 	or	r2,r2,r8
 100bf78:	1004c03a 	cmpne	r2,r2,zero
 100bf7c:	2084b03a 	or	r2,r4,r2
 100bf80:	144001cc 	andi	r17,r2,7
 100bf84:	88000d1e 	bne	r17,zero,100bfbc <__divdf3+0x894>
 100bf88:	000b883a 	mov	r5,zero
 100bf8c:	1024d0fa 	srli	r18,r2,3
 100bf90:	98c0004c 	andi	r3,r19,1
 100bf94:	0005883a 	mov	r2,zero
 100bf98:	9464b03a 	or	r18,r18,r17
 100bf9c:	003e4106 	br	100b8a4 <__divdf3+0x17c>
 100bfa0:	1007883a 	mov	r3,r2
 100bfa4:	0023883a 	mov	r17,zero
 100bfa8:	880a927a 	slli	r5,r17,9
 100bfac:	1805883a 	mov	r2,r3
 100bfb0:	8822977a 	slli	r17,r17,29
 100bfb4:	280ad33a 	srli	r5,r5,12
 100bfb8:	003ff406 	br	100bf8c <__divdf3+0x864>
 100bfbc:	10c003cc 	andi	r3,r2,15
 100bfc0:	01000104 	movi	r4,4
 100bfc4:	193ff626 	beq	r3,r4,100bfa0 <__divdf3+0x878>
 100bfc8:	0023883a 	mov	r17,zero
 100bfcc:	003fca06 	br	100bef8 <__divdf3+0x7d0>
 100bfd0:	813fd336 	bltu	r16,r4,100bf20 <__divdf3+0x7f8>
 100bfd4:	1023883a 	mov	r17,r2
 100bfd8:	003fa806 	br	100be7c <__divdf3+0x754>
 100bfdc:	b0ffd636 	bltu	r22,r3,100bf38 <__divdf3+0x810>
 100bfe0:	1011883a 	mov	r8,r2
 100bfe4:	b0ff341e 	bne	r22,r3,100bcb8 <__divdf3+0x590>
 100bfe8:	003f3406 	br	100bcbc <__divdf3+0x594>
 100bfec:	0005883a 	mov	r2,zero
 100bff0:	003fe006 	br	100bf74 <__divdf3+0x84c>
 100bff4:	00800434 	movhi	r2,16
 100bff8:	89400234 	orhi	r5,r17,8
 100bffc:	10bfffc4 	addi	r2,r2,-1
 100c000:	b807883a 	mov	r3,r23
 100c004:	288a703a 	and	r5,r5,r2
 100c008:	4025883a 	mov	r18,r8
 100c00c:	003e8206 	br	100ba18 <__divdf3+0x2f0>

0100c010 <__eqdf2>:
 100c010:	2804d53a 	srli	r2,r5,20
 100c014:	3806d53a 	srli	r3,r7,20
 100c018:	02000434 	movhi	r8,16
 100c01c:	423fffc4 	addi	r8,r8,-1
 100c020:	1081ffcc 	andi	r2,r2,2047
 100c024:	0281ffc4 	movi	r10,2047
 100c028:	2a12703a 	and	r9,r5,r8
 100c02c:	18c1ffcc 	andi	r3,r3,2047
 100c030:	3a10703a 	and	r8,r7,r8
 100c034:	280ad7fa 	srli	r5,r5,31
 100c038:	380ed7fa 	srli	r7,r7,31
 100c03c:	12801026 	beq	r2,r10,100c080 <__eqdf2+0x70>
 100c040:	0281ffc4 	movi	r10,2047
 100c044:	1a800a26 	beq	r3,r10,100c070 <__eqdf2+0x60>
 100c048:	10c00226 	beq	r2,r3,100c054 <__eqdf2+0x44>
 100c04c:	00800044 	movi	r2,1
 100c050:	f800283a 	ret
 100c054:	4a3ffd1e 	bne	r9,r8,100c04c <__eqdf2+0x3c>
 100c058:	21bffc1e 	bne	r4,r6,100c04c <__eqdf2+0x3c>
 100c05c:	29c00c26 	beq	r5,r7,100c090 <__eqdf2+0x80>
 100c060:	103ffa1e 	bne	r2,zero,100c04c <__eqdf2+0x3c>
 100c064:	2244b03a 	or	r2,r4,r9
 100c068:	1004c03a 	cmpne	r2,r2,zero
 100c06c:	f800283a 	ret
 100c070:	3214b03a 	or	r10,r6,r8
 100c074:	503ff426 	beq	r10,zero,100c048 <__eqdf2+0x38>
 100c078:	00800044 	movi	r2,1
 100c07c:	f800283a 	ret
 100c080:	2254b03a 	or	r10,r4,r9
 100c084:	503fee26 	beq	r10,zero,100c040 <__eqdf2+0x30>
 100c088:	00800044 	movi	r2,1
 100c08c:	f800283a 	ret
 100c090:	0005883a 	mov	r2,zero
 100c094:	f800283a 	ret

0100c098 <__gedf2>:
 100c098:	2804d53a 	srli	r2,r5,20
 100c09c:	3806d53a 	srli	r3,r7,20
 100c0a0:	02000434 	movhi	r8,16
 100c0a4:	423fffc4 	addi	r8,r8,-1
 100c0a8:	1081ffcc 	andi	r2,r2,2047
 100c0ac:	0241ffc4 	movi	r9,2047
 100c0b0:	2a14703a 	and	r10,r5,r8
 100c0b4:	18c1ffcc 	andi	r3,r3,2047
 100c0b8:	3a10703a 	and	r8,r7,r8
 100c0bc:	280ad7fa 	srli	r5,r5,31
 100c0c0:	380ed7fa 	srli	r7,r7,31
 100c0c4:	12401d26 	beq	r2,r9,100c13c <__gedf2+0xa4>
 100c0c8:	0241ffc4 	movi	r9,2047
 100c0cc:	1a401226 	beq	r3,r9,100c118 <__gedf2+0x80>
 100c0d0:	1000081e 	bne	r2,zero,100c0f4 <__gedf2+0x5c>
 100c0d4:	2296b03a 	or	r11,r4,r10
 100c0d8:	5813003a 	cmpeq	r9,r11,zero
 100c0dc:	1800091e 	bne	r3,zero,100c104 <__gedf2+0x6c>
 100c0e0:	3218b03a 	or	r12,r6,r8
 100c0e4:	6000071e 	bne	r12,zero,100c104 <__gedf2+0x6c>
 100c0e8:	0005883a 	mov	r2,zero
 100c0ec:	5800101e 	bne	r11,zero,100c130 <__gedf2+0x98>
 100c0f0:	f800283a 	ret
 100c0f4:	18000c1e 	bne	r3,zero,100c128 <__gedf2+0x90>
 100c0f8:	3212b03a 	or	r9,r6,r8
 100c0fc:	48000c26 	beq	r9,zero,100c130 <__gedf2+0x98>
 100c100:	0013883a 	mov	r9,zero
 100c104:	39c03fcc 	andi	r7,r7,255
 100c108:	48000826 	beq	r9,zero,100c12c <__gedf2+0x94>
 100c10c:	38000926 	beq	r7,zero,100c134 <__gedf2+0x9c>
 100c110:	00800044 	movi	r2,1
 100c114:	f800283a 	ret
 100c118:	3212b03a 	or	r9,r6,r8
 100c11c:	483fec26 	beq	r9,zero,100c0d0 <__gedf2+0x38>
 100c120:	00bfff84 	movi	r2,-2
 100c124:	f800283a 	ret
 100c128:	39c03fcc 	andi	r7,r7,255
 100c12c:	29c00626 	beq	r5,r7,100c148 <__gedf2+0xb0>
 100c130:	283ff726 	beq	r5,zero,100c110 <__gedf2+0x78>
 100c134:	00bfffc4 	movi	r2,-1
 100c138:	f800283a 	ret
 100c13c:	2292b03a 	or	r9,r4,r10
 100c140:	483fe126 	beq	r9,zero,100c0c8 <__gedf2+0x30>
 100c144:	003ff606 	br	100c120 <__gedf2+0x88>
 100c148:	18bff916 	blt	r3,r2,100c130 <__gedf2+0x98>
 100c14c:	10c00316 	blt	r2,r3,100c15c <__gedf2+0xc4>
 100c150:	42bff736 	bltu	r8,r10,100c130 <__gedf2+0x98>
 100c154:	52000326 	beq	r10,r8,100c164 <__gedf2+0xcc>
 100c158:	5200042e 	bgeu	r10,r8,100c16c <__gedf2+0xd4>
 100c15c:	283fec1e 	bne	r5,zero,100c110 <__gedf2+0x78>
 100c160:	003ff406 	br	100c134 <__gedf2+0x9c>
 100c164:	313ff236 	bltu	r6,r4,100c130 <__gedf2+0x98>
 100c168:	21bffc36 	bltu	r4,r6,100c15c <__gedf2+0xc4>
 100c16c:	0005883a 	mov	r2,zero
 100c170:	f800283a 	ret

0100c174 <__ledf2>:
 100c174:	2804d53a 	srli	r2,r5,20
 100c178:	3810d53a 	srli	r8,r7,20
 100c17c:	00c00434 	movhi	r3,16
 100c180:	18ffffc4 	addi	r3,r3,-1
 100c184:	1081ffcc 	andi	r2,r2,2047
 100c188:	0241ffc4 	movi	r9,2047
 100c18c:	28d4703a 	and	r10,r5,r3
 100c190:	4201ffcc 	andi	r8,r8,2047
 100c194:	38c6703a 	and	r3,r7,r3
 100c198:	280ad7fa 	srli	r5,r5,31
 100c19c:	380ed7fa 	srli	r7,r7,31
 100c1a0:	12401f26 	beq	r2,r9,100c220 <__ledf2+0xac>
 100c1a4:	0241ffc4 	movi	r9,2047
 100c1a8:	42401426 	beq	r8,r9,100c1fc <__ledf2+0x88>
 100c1ac:	1000091e 	bne	r2,zero,100c1d4 <__ledf2+0x60>
 100c1b0:	2296b03a 	or	r11,r4,r10
 100c1b4:	5813003a 	cmpeq	r9,r11,zero
 100c1b8:	29403fcc 	andi	r5,r5,255
 100c1bc:	40000a1e 	bne	r8,zero,100c1e8 <__ledf2+0x74>
 100c1c0:	30d8b03a 	or	r12,r6,r3
 100c1c4:	6000081e 	bne	r12,zero,100c1e8 <__ledf2+0x74>
 100c1c8:	0005883a 	mov	r2,zero
 100c1cc:	5800111e 	bne	r11,zero,100c214 <__ledf2+0xa0>
 100c1d0:	f800283a 	ret
 100c1d4:	29403fcc 	andi	r5,r5,255
 100c1d8:	40000c1e 	bne	r8,zero,100c20c <__ledf2+0x98>
 100c1dc:	30d2b03a 	or	r9,r6,r3
 100c1e0:	48000c26 	beq	r9,zero,100c214 <__ledf2+0xa0>
 100c1e4:	0013883a 	mov	r9,zero
 100c1e8:	39c03fcc 	andi	r7,r7,255
 100c1ec:	48000826 	beq	r9,zero,100c210 <__ledf2+0x9c>
 100c1f0:	38001126 	beq	r7,zero,100c238 <__ledf2+0xc4>
 100c1f4:	00800044 	movi	r2,1
 100c1f8:	f800283a 	ret
 100c1fc:	30d2b03a 	or	r9,r6,r3
 100c200:	483fea26 	beq	r9,zero,100c1ac <__ledf2+0x38>
 100c204:	00800084 	movi	r2,2
 100c208:	f800283a 	ret
 100c20c:	39c03fcc 	andi	r7,r7,255
 100c210:	39400726 	beq	r7,r5,100c230 <__ledf2+0xbc>
 100c214:	2800081e 	bne	r5,zero,100c238 <__ledf2+0xc4>
 100c218:	00800044 	movi	r2,1
 100c21c:	f800283a 	ret
 100c220:	2292b03a 	or	r9,r4,r10
 100c224:	483fdf26 	beq	r9,zero,100c1a4 <__ledf2+0x30>
 100c228:	00800084 	movi	r2,2
 100c22c:	f800283a 	ret
 100c230:	4080030e 	bge	r8,r2,100c240 <__ledf2+0xcc>
 100c234:	383fef26 	beq	r7,zero,100c1f4 <__ledf2+0x80>
 100c238:	00bfffc4 	movi	r2,-1
 100c23c:	f800283a 	ret
 100c240:	123feb16 	blt	r2,r8,100c1f0 <__ledf2+0x7c>
 100c244:	1abff336 	bltu	r3,r10,100c214 <__ledf2+0xa0>
 100c248:	50c00326 	beq	r10,r3,100c258 <__ledf2+0xe4>
 100c24c:	50c0042e 	bgeu	r10,r3,100c260 <__ledf2+0xec>
 100c250:	283fe81e 	bne	r5,zero,100c1f4 <__ledf2+0x80>
 100c254:	003ff806 	br	100c238 <__ledf2+0xc4>
 100c258:	313fee36 	bltu	r6,r4,100c214 <__ledf2+0xa0>
 100c25c:	21bffc36 	bltu	r4,r6,100c250 <__ledf2+0xdc>
 100c260:	0005883a 	mov	r2,zero
 100c264:	f800283a 	ret

0100c268 <__muldf3>:
 100c268:	defff304 	addi	sp,sp,-52
 100c26c:	2804d53a 	srli	r2,r5,20
 100c270:	dd800915 	stw	r22,36(sp)
 100c274:	282cd7fa 	srli	r22,r5,31
 100c278:	dc000315 	stw	r16,12(sp)
 100c27c:	04000434 	movhi	r16,16
 100c280:	dd400815 	stw	r21,32(sp)
 100c284:	dc800515 	stw	r18,20(sp)
 100c288:	843fffc4 	addi	r16,r16,-1
 100c28c:	dfc00c15 	stw	ra,48(sp)
 100c290:	df000b15 	stw	fp,44(sp)
 100c294:	ddc00a15 	stw	r23,40(sp)
 100c298:	dd000715 	stw	r20,28(sp)
 100c29c:	dcc00615 	stw	r19,24(sp)
 100c2a0:	dc400415 	stw	r17,16(sp)
 100c2a4:	1481ffcc 	andi	r18,r2,2047
 100c2a8:	2c20703a 	and	r16,r5,r16
 100c2ac:	b02b883a 	mov	r21,r22
 100c2b0:	b2403fcc 	andi	r9,r22,255
 100c2b4:	90006026 	beq	r18,zero,100c438 <__muldf3+0x1d0>
 100c2b8:	0081ffc4 	movi	r2,2047
 100c2bc:	2029883a 	mov	r20,r4
 100c2c0:	90803626 	beq	r18,r2,100c39c <__muldf3+0x134>
 100c2c4:	80800434 	orhi	r2,r16,16
 100c2c8:	100490fa 	slli	r2,r2,3
 100c2cc:	2020d77a 	srli	r16,r4,29
 100c2d0:	202890fa 	slli	r20,r4,3
 100c2d4:	94bf0044 	addi	r18,r18,-1023
 100c2d8:	80a0b03a 	or	r16,r16,r2
 100c2dc:	0027883a 	mov	r19,zero
 100c2e0:	0039883a 	mov	fp,zero
 100c2e4:	3804d53a 	srli	r2,r7,20
 100c2e8:	382ed7fa 	srli	r23,r7,31
 100c2ec:	04400434 	movhi	r17,16
 100c2f0:	8c7fffc4 	addi	r17,r17,-1
 100c2f4:	1081ffcc 	andi	r2,r2,2047
 100c2f8:	3011883a 	mov	r8,r6
 100c2fc:	3c62703a 	and	r17,r7,r17
 100c300:	ba803fcc 	andi	r10,r23,255
 100c304:	10006d26 	beq	r2,zero,100c4bc <__muldf3+0x254>
 100c308:	00c1ffc4 	movi	r3,2047
 100c30c:	10c06526 	beq	r2,r3,100c4a4 <__muldf3+0x23c>
 100c310:	88c00434 	orhi	r3,r17,16
 100c314:	180690fa 	slli	r3,r3,3
 100c318:	3022d77a 	srli	r17,r6,29
 100c31c:	301090fa 	slli	r8,r6,3
 100c320:	10bf0044 	addi	r2,r2,-1023
 100c324:	88e2b03a 	or	r17,r17,r3
 100c328:	000b883a 	mov	r5,zero
 100c32c:	9085883a 	add	r2,r18,r2
 100c330:	2cc8b03a 	or	r4,r5,r19
 100c334:	00c003c4 	movi	r3,15
 100c338:	bdacf03a 	xor	r22,r23,r22
 100c33c:	12c00044 	addi	r11,r2,1
 100c340:	19009936 	bltu	r3,r4,100c5a8 <__muldf3+0x340>
 100c344:	200890ba 	slli	r4,r4,2
 100c348:	00c04074 	movhi	r3,257
 100c34c:	18f0d704 	addi	r3,r3,-15524
 100c350:	20c9883a 	add	r4,r4,r3
 100c354:	20c00017 	ldw	r3,0(r4)
 100c358:	1800683a 	jmp	r3
 100c35c:	0100c5a8 	cmpgeui	r4,zero,790
 100c360:	0100c3bc 	xorhi	r4,zero,782
 100c364:	0100c3bc 	xorhi	r4,zero,782
 100c368:	0100c3b8 	rdprs	r4,zero,782
 100c36c:	0100c584 	movi	r4,790
 100c370:	0100c584 	movi	r4,790
 100c374:	0100c56c 	andhi	r4,zero,789
 100c378:	0100c3b8 	rdprs	r4,zero,782
 100c37c:	0100c584 	movi	r4,790
 100c380:	0100c56c 	andhi	r4,zero,789
 100c384:	0100c584 	movi	r4,790
 100c388:	0100c3b8 	rdprs	r4,zero,782
 100c38c:	0100c594 	movui	r4,790
 100c390:	0100c594 	movui	r4,790
 100c394:	0100c594 	movui	r4,790
 100c398:	0100c7b0 	cmpltui	r4,zero,798
 100c39c:	2404b03a 	or	r2,r4,r16
 100c3a0:	10006f1e 	bne	r2,zero,100c560 <__muldf3+0x2f8>
 100c3a4:	04c00204 	movi	r19,8
 100c3a8:	0021883a 	mov	r16,zero
 100c3ac:	0029883a 	mov	r20,zero
 100c3b0:	07000084 	movi	fp,2
 100c3b4:	003fcb06 	br	100c2e4 <__muldf3+0x7c>
 100c3b8:	502d883a 	mov	r22,r10
 100c3bc:	00800084 	movi	r2,2
 100c3c0:	28805726 	beq	r5,r2,100c520 <__muldf3+0x2b8>
 100c3c4:	008000c4 	movi	r2,3
 100c3c8:	28816626 	beq	r5,r2,100c964 <__muldf3+0x6fc>
 100c3cc:	00800044 	movi	r2,1
 100c3d0:	2881411e 	bne	r5,r2,100c8d8 <__muldf3+0x670>
 100c3d4:	b02b883a 	mov	r21,r22
 100c3d8:	0005883a 	mov	r2,zero
 100c3dc:	000b883a 	mov	r5,zero
 100c3e0:	0029883a 	mov	r20,zero
 100c3e4:	1004953a 	slli	r2,r2,20
 100c3e8:	a8c03fcc 	andi	r3,r21,255
 100c3ec:	04400434 	movhi	r17,16
 100c3f0:	8c7fffc4 	addi	r17,r17,-1
 100c3f4:	180697fa 	slli	r3,r3,31
 100c3f8:	2c4a703a 	and	r5,r5,r17
 100c3fc:	288ab03a 	or	r5,r5,r2
 100c400:	28c6b03a 	or	r3,r5,r3
 100c404:	a005883a 	mov	r2,r20
 100c408:	dfc00c17 	ldw	ra,48(sp)
 100c40c:	df000b17 	ldw	fp,44(sp)
 100c410:	ddc00a17 	ldw	r23,40(sp)
 100c414:	dd800917 	ldw	r22,36(sp)
 100c418:	dd400817 	ldw	r21,32(sp)
 100c41c:	dd000717 	ldw	r20,28(sp)
 100c420:	dcc00617 	ldw	r19,24(sp)
 100c424:	dc800517 	ldw	r18,20(sp)
 100c428:	dc400417 	ldw	r17,16(sp)
 100c42c:	dc000317 	ldw	r16,12(sp)
 100c430:	dec00d04 	addi	sp,sp,52
 100c434:	f800283a 	ret
 100c438:	2404b03a 	or	r2,r4,r16
 100c43c:	2027883a 	mov	r19,r4
 100c440:	10004226 	beq	r2,zero,100c54c <__muldf3+0x2e4>
 100c444:	8000fc26 	beq	r16,zero,100c838 <__muldf3+0x5d0>
 100c448:	8009883a 	mov	r4,r16
 100c44c:	d9800215 	stw	r6,8(sp)
 100c450:	d9c00015 	stw	r7,0(sp)
 100c454:	da400115 	stw	r9,4(sp)
 100c458:	100d4800 	call	100d480 <__clzsi2>
 100c45c:	d9800217 	ldw	r6,8(sp)
 100c460:	d9c00017 	ldw	r7,0(sp)
 100c464:	da400117 	ldw	r9,4(sp)
 100c468:	113ffd44 	addi	r4,r2,-11
 100c46c:	00c00704 	movi	r3,28
 100c470:	1900ed16 	blt	r3,r4,100c828 <__muldf3+0x5c0>
 100c474:	00c00744 	movi	r3,29
 100c478:	147ffe04 	addi	r17,r2,-8
 100c47c:	1907c83a 	sub	r3,r3,r4
 100c480:	8460983a 	sll	r16,r16,r17
 100c484:	98c6d83a 	srl	r3,r19,r3
 100c488:	9c68983a 	sll	r20,r19,r17
 100c48c:	1c20b03a 	or	r16,r3,r16
 100c490:	1080fcc4 	addi	r2,r2,1011
 100c494:	00a5c83a 	sub	r18,zero,r2
 100c498:	0027883a 	mov	r19,zero
 100c49c:	0039883a 	mov	fp,zero
 100c4a0:	003f9006 	br	100c2e4 <__muldf3+0x7c>
 100c4a4:	3446b03a 	or	r3,r6,r17
 100c4a8:	1800261e 	bne	r3,zero,100c544 <__muldf3+0x2dc>
 100c4ac:	0023883a 	mov	r17,zero
 100c4b0:	0011883a 	mov	r8,zero
 100c4b4:	01400084 	movi	r5,2
 100c4b8:	003f9c06 	br	100c32c <__muldf3+0xc4>
 100c4bc:	3446b03a 	or	r3,r6,r17
 100c4c0:	18001c26 	beq	r3,zero,100c534 <__muldf3+0x2cc>
 100c4c4:	8800ce26 	beq	r17,zero,100c800 <__muldf3+0x598>
 100c4c8:	8809883a 	mov	r4,r17
 100c4cc:	d9800215 	stw	r6,8(sp)
 100c4d0:	da400115 	stw	r9,4(sp)
 100c4d4:	da800015 	stw	r10,0(sp)
 100c4d8:	100d4800 	call	100d480 <__clzsi2>
 100c4dc:	d9800217 	ldw	r6,8(sp)
 100c4e0:	da400117 	ldw	r9,4(sp)
 100c4e4:	da800017 	ldw	r10,0(sp)
 100c4e8:	113ffd44 	addi	r4,r2,-11
 100c4ec:	00c00704 	movi	r3,28
 100c4f0:	1900bf16 	blt	r3,r4,100c7f0 <__muldf3+0x588>
 100c4f4:	00c00744 	movi	r3,29
 100c4f8:	123ffe04 	addi	r8,r2,-8
 100c4fc:	1907c83a 	sub	r3,r3,r4
 100c500:	8a22983a 	sll	r17,r17,r8
 100c504:	30c6d83a 	srl	r3,r6,r3
 100c508:	3210983a 	sll	r8,r6,r8
 100c50c:	1c62b03a 	or	r17,r3,r17
 100c510:	1080fcc4 	addi	r2,r2,1011
 100c514:	0085c83a 	sub	r2,zero,r2
 100c518:	000b883a 	mov	r5,zero
 100c51c:	003f8306 	br	100c32c <__muldf3+0xc4>
 100c520:	b02b883a 	mov	r21,r22
 100c524:	0081ffc4 	movi	r2,2047
 100c528:	000b883a 	mov	r5,zero
 100c52c:	0029883a 	mov	r20,zero
 100c530:	003fac06 	br	100c3e4 <__muldf3+0x17c>
 100c534:	0023883a 	mov	r17,zero
 100c538:	0011883a 	mov	r8,zero
 100c53c:	01400044 	movi	r5,1
 100c540:	003f7a06 	br	100c32c <__muldf3+0xc4>
 100c544:	014000c4 	movi	r5,3
 100c548:	003f7806 	br	100c32c <__muldf3+0xc4>
 100c54c:	04c00104 	movi	r19,4
 100c550:	0021883a 	mov	r16,zero
 100c554:	0029883a 	mov	r20,zero
 100c558:	07000044 	movi	fp,1
 100c55c:	003f6106 	br	100c2e4 <__muldf3+0x7c>
 100c560:	04c00304 	movi	r19,12
 100c564:	070000c4 	movi	fp,3
 100c568:	003f5e06 	br	100c2e4 <__muldf3+0x7c>
 100c56c:	01400434 	movhi	r5,16
 100c570:	002b883a 	mov	r21,zero
 100c574:	297fffc4 	addi	r5,r5,-1
 100c578:	053fffc4 	movi	r20,-1
 100c57c:	0081ffc4 	movi	r2,2047
 100c580:	003f9806 	br	100c3e4 <__muldf3+0x17c>
 100c584:	8023883a 	mov	r17,r16
 100c588:	a011883a 	mov	r8,r20
 100c58c:	e00b883a 	mov	r5,fp
 100c590:	003f8a06 	br	100c3bc <__muldf3+0x154>
 100c594:	8023883a 	mov	r17,r16
 100c598:	a011883a 	mov	r8,r20
 100c59c:	482d883a 	mov	r22,r9
 100c5a0:	e00b883a 	mov	r5,fp
 100c5a4:	003f8506 	br	100c3bc <__muldf3+0x154>
 100c5a8:	a00ad43a 	srli	r5,r20,16
 100c5ac:	401ad43a 	srli	r13,r8,16
 100c5b0:	a53fffcc 	andi	r20,r20,65535
 100c5b4:	423fffcc 	andi	r8,r8,65535
 100c5b8:	4519383a 	mul	r12,r8,r20
 100c5bc:	4147383a 	mul	r3,r8,r5
 100c5c0:	6d09383a 	mul	r4,r13,r20
 100c5c4:	600cd43a 	srli	r6,r12,16
 100c5c8:	2b5d383a 	mul	r14,r5,r13
 100c5cc:	20c9883a 	add	r4,r4,r3
 100c5d0:	310d883a 	add	r6,r6,r4
 100c5d4:	30c0022e 	bgeu	r6,r3,100c5e0 <__muldf3+0x378>
 100c5d8:	00c00074 	movhi	r3,1
 100c5dc:	70dd883a 	add	r14,r14,r3
 100c5e0:	8826d43a 	srli	r19,r17,16
 100c5e4:	8bffffcc 	andi	r15,r17,65535
 100c5e8:	7d23383a 	mul	r17,r15,r20
 100c5ec:	7949383a 	mul	r4,r15,r5
 100c5f0:	9d29383a 	mul	r20,r19,r20
 100c5f4:	8814d43a 	srli	r10,r17,16
 100c5f8:	3012943a 	slli	r9,r6,16
 100c5fc:	a129883a 	add	r20,r20,r4
 100c600:	633fffcc 	andi	r12,r12,65535
 100c604:	5515883a 	add	r10,r10,r20
 100c608:	3006d43a 	srli	r3,r6,16
 100c60c:	4b13883a 	add	r9,r9,r12
 100c610:	2ccb383a 	mul	r5,r5,r19
 100c614:	5100022e 	bgeu	r10,r4,100c620 <__muldf3+0x3b8>
 100c618:	01000074 	movhi	r4,1
 100c61c:	290b883a 	add	r5,r5,r4
 100c620:	802ad43a 	srli	r21,r16,16
 100c624:	843fffcc 	andi	r16,r16,65535
 100c628:	440d383a 	mul	r6,r8,r16
 100c62c:	4565383a 	mul	r18,r8,r21
 100c630:	8349383a 	mul	r4,r16,r13
 100c634:	500e943a 	slli	r7,r10,16
 100c638:	3010d43a 	srli	r8,r6,16
 100c63c:	5028d43a 	srli	r20,r10,16
 100c640:	2489883a 	add	r4,r4,r18
 100c644:	8abfffcc 	andi	r10,r17,65535
 100c648:	3a95883a 	add	r10,r7,r10
 100c64c:	4119883a 	add	r12,r8,r4
 100c650:	a169883a 	add	r20,r20,r5
 100c654:	1a87883a 	add	r3,r3,r10
 100c658:	6d5b383a 	mul	r13,r13,r21
 100c65c:	6480022e 	bgeu	r12,r18,100c668 <__muldf3+0x400>
 100c660:	01000074 	movhi	r4,1
 100c664:	691b883a 	add	r13,r13,r4
 100c668:	7c25383a 	mul	r18,r15,r16
 100c66c:	7d4b383a 	mul	r5,r15,r21
 100c670:	84cf383a 	mul	r7,r16,r19
 100c674:	901ed43a 	srli	r15,r18,16
 100c678:	6008d43a 	srli	r4,r12,16
 100c67c:	6010943a 	slli	r8,r12,16
 100c680:	394f883a 	add	r7,r7,r5
 100c684:	333fffcc 	andi	r12,r6,65535
 100c688:	79df883a 	add	r15,r15,r7
 100c68c:	235b883a 	add	r13,r4,r13
 100c690:	9d63383a 	mul	r17,r19,r21
 100c694:	4309883a 	add	r4,r8,r12
 100c698:	7940022e 	bgeu	r15,r5,100c6a4 <__muldf3+0x43c>
 100c69c:	01400074 	movhi	r5,1
 100c6a0:	8963883a 	add	r17,r17,r5
 100c6a4:	780a943a 	slli	r5,r15,16
 100c6a8:	91bfffcc 	andi	r6,r18,65535
 100c6ac:	70c7883a 	add	r3,r14,r3
 100c6b0:	298d883a 	add	r6,r5,r6
 100c6b4:	1a8f803a 	cmpltu	r7,r3,r10
 100c6b8:	350b883a 	add	r5,r6,r20
 100c6bc:	20c7883a 	add	r3,r4,r3
 100c6c0:	3955883a 	add	r10,r7,r5
 100c6c4:	1909803a 	cmpltu	r4,r3,r4
 100c6c8:	6a91883a 	add	r8,r13,r10
 100c6cc:	780cd43a 	srli	r6,r15,16
 100c6d0:	2219883a 	add	r12,r4,r8
 100c6d4:	2d0b803a 	cmpltu	r5,r5,r20
 100c6d8:	51cf803a 	cmpltu	r7,r10,r7
 100c6dc:	29ceb03a 	or	r7,r5,r7
 100c6e0:	4351803a 	cmpltu	r8,r8,r13
 100c6e4:	610b803a 	cmpltu	r5,r12,r4
 100c6e8:	4148b03a 	or	r4,r8,r5
 100c6ec:	398f883a 	add	r7,r7,r6
 100c6f0:	3909883a 	add	r4,r7,r4
 100c6f4:	1810927a 	slli	r8,r3,9
 100c6f8:	2449883a 	add	r4,r4,r17
 100c6fc:	2008927a 	slli	r4,r4,9
 100c700:	6022d5fa 	srli	r17,r12,23
 100c704:	1806d5fa 	srli	r3,r3,23
 100c708:	4252b03a 	or	r9,r8,r9
 100c70c:	600a927a 	slli	r5,r12,9
 100c710:	4810c03a 	cmpne	r8,r9,zero
 100c714:	2462b03a 	or	r17,r4,r17
 100c718:	40c6b03a 	or	r3,r8,r3
 100c71c:	8900402c 	andhi	r4,r17,256
 100c720:	1950b03a 	or	r8,r3,r5
 100c724:	20000726 	beq	r4,zero,100c744 <__muldf3+0x4dc>
 100c728:	4006d07a 	srli	r3,r8,1
 100c72c:	880497fa 	slli	r2,r17,31
 100c730:	4200004c 	andi	r8,r8,1
 100c734:	8822d07a 	srli	r17,r17,1
 100c738:	1a10b03a 	or	r8,r3,r8
 100c73c:	1210b03a 	or	r8,r2,r8
 100c740:	5805883a 	mov	r2,r11
 100c744:	1140ffc4 	addi	r5,r2,1023
 100c748:	0140440e 	bge	zero,r5,100c85c <__muldf3+0x5f4>
 100c74c:	40c001cc 	andi	r3,r8,7
 100c750:	18000726 	beq	r3,zero,100c770 <__muldf3+0x508>
 100c754:	40c003cc 	andi	r3,r8,15
 100c758:	01000104 	movi	r4,4
 100c75c:	19000426 	beq	r3,r4,100c770 <__muldf3+0x508>
 100c760:	4107883a 	add	r3,r8,r4
 100c764:	1a11803a 	cmpltu	r8,r3,r8
 100c768:	8a23883a 	add	r17,r17,r8
 100c76c:	1811883a 	mov	r8,r3
 100c770:	88c0402c 	andhi	r3,r17,256
 100c774:	18000426 	beq	r3,zero,100c788 <__muldf3+0x520>
 100c778:	11410004 	addi	r5,r2,1024
 100c77c:	00bfc034 	movhi	r2,65280
 100c780:	10bfffc4 	addi	r2,r2,-1
 100c784:	88a2703a 	and	r17,r17,r2
 100c788:	0081ff84 	movi	r2,2046
 100c78c:	117f6416 	blt	r2,r5,100c520 <__muldf3+0x2b8>
 100c790:	8828977a 	slli	r20,r17,29
 100c794:	4010d0fa 	srli	r8,r8,3
 100c798:	8822927a 	slli	r17,r17,9
 100c79c:	2881ffcc 	andi	r2,r5,2047
 100c7a0:	a228b03a 	or	r20,r20,r8
 100c7a4:	880ad33a 	srli	r5,r17,12
 100c7a8:	b02b883a 	mov	r21,r22
 100c7ac:	003f0d06 	br	100c3e4 <__muldf3+0x17c>
 100c7b0:	8080022c 	andhi	r2,r16,8
 100c7b4:	10000926 	beq	r2,zero,100c7dc <__muldf3+0x574>
 100c7b8:	8880022c 	andhi	r2,r17,8
 100c7bc:	1000071e 	bne	r2,zero,100c7dc <__muldf3+0x574>
 100c7c0:	00800434 	movhi	r2,16
 100c7c4:	89400234 	orhi	r5,r17,8
 100c7c8:	10bfffc4 	addi	r2,r2,-1
 100c7cc:	b82b883a 	mov	r21,r23
 100c7d0:	288a703a 	and	r5,r5,r2
 100c7d4:	4029883a 	mov	r20,r8
 100c7d8:	003f6806 	br	100c57c <__muldf3+0x314>
 100c7dc:	00800434 	movhi	r2,16
 100c7e0:	81400234 	orhi	r5,r16,8
 100c7e4:	10bfffc4 	addi	r2,r2,-1
 100c7e8:	288a703a 	and	r5,r5,r2
 100c7ec:	003f6306 	br	100c57c <__muldf3+0x314>
 100c7f0:	147ff604 	addi	r17,r2,-40
 100c7f4:	3462983a 	sll	r17,r6,r17
 100c7f8:	0011883a 	mov	r8,zero
 100c7fc:	003f4406 	br	100c510 <__muldf3+0x2a8>
 100c800:	3009883a 	mov	r4,r6
 100c804:	d9800215 	stw	r6,8(sp)
 100c808:	da400115 	stw	r9,4(sp)
 100c80c:	da800015 	stw	r10,0(sp)
 100c810:	100d4800 	call	100d480 <__clzsi2>
 100c814:	10800804 	addi	r2,r2,32
 100c818:	da800017 	ldw	r10,0(sp)
 100c81c:	da400117 	ldw	r9,4(sp)
 100c820:	d9800217 	ldw	r6,8(sp)
 100c824:	003f3006 	br	100c4e8 <__muldf3+0x280>
 100c828:	143ff604 	addi	r16,r2,-40
 100c82c:	9c20983a 	sll	r16,r19,r16
 100c830:	0029883a 	mov	r20,zero
 100c834:	003f1606 	br	100c490 <__muldf3+0x228>
 100c838:	d9800215 	stw	r6,8(sp)
 100c83c:	d9c00015 	stw	r7,0(sp)
 100c840:	da400115 	stw	r9,4(sp)
 100c844:	100d4800 	call	100d480 <__clzsi2>
 100c848:	10800804 	addi	r2,r2,32
 100c84c:	da400117 	ldw	r9,4(sp)
 100c850:	d9c00017 	ldw	r7,0(sp)
 100c854:	d9800217 	ldw	r6,8(sp)
 100c858:	003f0306 	br	100c468 <__muldf3+0x200>
 100c85c:	00c00044 	movi	r3,1
 100c860:	1947c83a 	sub	r3,r3,r5
 100c864:	00800e04 	movi	r2,56
 100c868:	10feda16 	blt	r2,r3,100c3d4 <__muldf3+0x16c>
 100c86c:	008007c4 	movi	r2,31
 100c870:	10c01b16 	blt	r2,r3,100c8e0 <__muldf3+0x678>
 100c874:	00800804 	movi	r2,32
 100c878:	10c5c83a 	sub	r2,r2,r3
 100c87c:	888a983a 	sll	r5,r17,r2
 100c880:	40c8d83a 	srl	r4,r8,r3
 100c884:	4084983a 	sll	r2,r8,r2
 100c888:	88e2d83a 	srl	r17,r17,r3
 100c88c:	2906b03a 	or	r3,r5,r4
 100c890:	1004c03a 	cmpne	r2,r2,zero
 100c894:	1886b03a 	or	r3,r3,r2
 100c898:	188001cc 	andi	r2,r3,7
 100c89c:	10000726 	beq	r2,zero,100c8bc <__muldf3+0x654>
 100c8a0:	188003cc 	andi	r2,r3,15
 100c8a4:	01000104 	movi	r4,4
 100c8a8:	11000426 	beq	r2,r4,100c8bc <__muldf3+0x654>
 100c8ac:	1805883a 	mov	r2,r3
 100c8b0:	10c00104 	addi	r3,r2,4
 100c8b4:	1885803a 	cmpltu	r2,r3,r2
 100c8b8:	88a3883a 	add	r17,r17,r2
 100c8bc:	8880202c 	andhi	r2,r17,128
 100c8c0:	10001c26 	beq	r2,zero,100c934 <__muldf3+0x6cc>
 100c8c4:	b02b883a 	mov	r21,r22
 100c8c8:	00800044 	movi	r2,1
 100c8cc:	000b883a 	mov	r5,zero
 100c8d0:	0029883a 	mov	r20,zero
 100c8d4:	003ec306 	br	100c3e4 <__muldf3+0x17c>
 100c8d8:	5805883a 	mov	r2,r11
 100c8dc:	003f9906 	br	100c744 <__muldf3+0x4dc>
 100c8e0:	00bff844 	movi	r2,-31
 100c8e4:	1145c83a 	sub	r2,r2,r5
 100c8e8:	8888d83a 	srl	r4,r17,r2
 100c8ec:	00800804 	movi	r2,32
 100c8f0:	18801a26 	beq	r3,r2,100c95c <__muldf3+0x6f4>
 100c8f4:	00801004 	movi	r2,64
 100c8f8:	10c5c83a 	sub	r2,r2,r3
 100c8fc:	8884983a 	sll	r2,r17,r2
 100c900:	1204b03a 	or	r2,r2,r8
 100c904:	1004c03a 	cmpne	r2,r2,zero
 100c908:	2084b03a 	or	r2,r4,r2
 100c90c:	144001cc 	andi	r17,r2,7
 100c910:	88000d1e 	bne	r17,zero,100c948 <__muldf3+0x6e0>
 100c914:	000b883a 	mov	r5,zero
 100c918:	1028d0fa 	srli	r20,r2,3
 100c91c:	b02b883a 	mov	r21,r22
 100c920:	0005883a 	mov	r2,zero
 100c924:	a468b03a 	or	r20,r20,r17
 100c928:	003eae06 	br	100c3e4 <__muldf3+0x17c>
 100c92c:	1007883a 	mov	r3,r2
 100c930:	0023883a 	mov	r17,zero
 100c934:	880a927a 	slli	r5,r17,9
 100c938:	1805883a 	mov	r2,r3
 100c93c:	8822977a 	slli	r17,r17,29
 100c940:	280ad33a 	srli	r5,r5,12
 100c944:	003ff406 	br	100c918 <__muldf3+0x6b0>
 100c948:	10c003cc 	andi	r3,r2,15
 100c94c:	01000104 	movi	r4,4
 100c950:	193ff626 	beq	r3,r4,100c92c <__muldf3+0x6c4>
 100c954:	0023883a 	mov	r17,zero
 100c958:	003fd506 	br	100c8b0 <__muldf3+0x648>
 100c95c:	0005883a 	mov	r2,zero
 100c960:	003fe706 	br	100c900 <__muldf3+0x698>
 100c964:	00800434 	movhi	r2,16
 100c968:	89400234 	orhi	r5,r17,8
 100c96c:	10bfffc4 	addi	r2,r2,-1
 100c970:	b02b883a 	mov	r21,r22
 100c974:	288a703a 	and	r5,r5,r2
 100c978:	4029883a 	mov	r20,r8
 100c97c:	003eff06 	br	100c57c <__muldf3+0x314>

0100c980 <__subdf3>:
 100c980:	02000434 	movhi	r8,16
 100c984:	423fffc4 	addi	r8,r8,-1
 100c988:	defffb04 	addi	sp,sp,-20
 100c98c:	2a14703a 	and	r10,r5,r8
 100c990:	3812d53a 	srli	r9,r7,20
 100c994:	3a10703a 	and	r8,r7,r8
 100c998:	2006d77a 	srli	r3,r4,29
 100c99c:	3004d77a 	srli	r2,r6,29
 100c9a0:	dc000015 	stw	r16,0(sp)
 100c9a4:	501490fa 	slli	r10,r10,3
 100c9a8:	2820d53a 	srli	r16,r5,20
 100c9ac:	401090fa 	slli	r8,r8,3
 100c9b0:	dc800215 	stw	r18,8(sp)
 100c9b4:	dc400115 	stw	r17,4(sp)
 100c9b8:	dfc00415 	stw	ra,16(sp)
 100c9bc:	202290fa 	slli	r17,r4,3
 100c9c0:	dcc00315 	stw	r19,12(sp)
 100c9c4:	4a41ffcc 	andi	r9,r9,2047
 100c9c8:	0101ffc4 	movi	r4,2047
 100c9cc:	2824d7fa 	srli	r18,r5,31
 100c9d0:	8401ffcc 	andi	r16,r16,2047
 100c9d4:	50c6b03a 	or	r3,r10,r3
 100c9d8:	380ed7fa 	srli	r7,r7,31
 100c9dc:	408ab03a 	or	r5,r8,r2
 100c9e0:	300c90fa 	slli	r6,r6,3
 100c9e4:	49009626 	beq	r9,r4,100cc40 <__subdf3+0x2c0>
 100c9e8:	39c0005c 	xori	r7,r7,1
 100c9ec:	8245c83a 	sub	r2,r16,r9
 100c9f0:	3c807426 	beq	r7,r18,100cbc4 <__subdf3+0x244>
 100c9f4:	0080af0e 	bge	zero,r2,100ccb4 <__subdf3+0x334>
 100c9f8:	48002a1e 	bne	r9,zero,100caa4 <__subdf3+0x124>
 100c9fc:	2988b03a 	or	r4,r5,r6
 100ca00:	20009a1e 	bne	r4,zero,100cc6c <__subdf3+0x2ec>
 100ca04:	888001cc 	andi	r2,r17,7
 100ca08:	10000726 	beq	r2,zero,100ca28 <__subdf3+0xa8>
 100ca0c:	888003cc 	andi	r2,r17,15
 100ca10:	01000104 	movi	r4,4
 100ca14:	11000426 	beq	r2,r4,100ca28 <__subdf3+0xa8>
 100ca18:	890b883a 	add	r5,r17,r4
 100ca1c:	2c63803a 	cmpltu	r17,r5,r17
 100ca20:	1c47883a 	add	r3,r3,r17
 100ca24:	2823883a 	mov	r17,r5
 100ca28:	1880202c 	andhi	r2,r3,128
 100ca2c:	10005926 	beq	r2,zero,100cb94 <__subdf3+0x214>
 100ca30:	84000044 	addi	r16,r16,1
 100ca34:	0081ffc4 	movi	r2,2047
 100ca38:	8080be26 	beq	r16,r2,100cd34 <__subdf3+0x3b4>
 100ca3c:	017fe034 	movhi	r5,65408
 100ca40:	297fffc4 	addi	r5,r5,-1
 100ca44:	1946703a 	and	r3,r3,r5
 100ca48:	1804977a 	slli	r2,r3,29
 100ca4c:	1806927a 	slli	r3,r3,9
 100ca50:	8822d0fa 	srli	r17,r17,3
 100ca54:	8401ffcc 	andi	r16,r16,2047
 100ca58:	180ad33a 	srli	r5,r3,12
 100ca5c:	9100004c 	andi	r4,r18,1
 100ca60:	1444b03a 	or	r2,r2,r17
 100ca64:	80c1ffcc 	andi	r3,r16,2047
 100ca68:	1820953a 	slli	r16,r3,20
 100ca6c:	20c03fcc 	andi	r3,r4,255
 100ca70:	180897fa 	slli	r4,r3,31
 100ca74:	00c00434 	movhi	r3,16
 100ca78:	18ffffc4 	addi	r3,r3,-1
 100ca7c:	28c6703a 	and	r3,r5,r3
 100ca80:	1c06b03a 	or	r3,r3,r16
 100ca84:	1906b03a 	or	r3,r3,r4
 100ca88:	dfc00417 	ldw	ra,16(sp)
 100ca8c:	dcc00317 	ldw	r19,12(sp)
 100ca90:	dc800217 	ldw	r18,8(sp)
 100ca94:	dc400117 	ldw	r17,4(sp)
 100ca98:	dc000017 	ldw	r16,0(sp)
 100ca9c:	dec00504 	addi	sp,sp,20
 100caa0:	f800283a 	ret
 100caa4:	0101ffc4 	movi	r4,2047
 100caa8:	813fd626 	beq	r16,r4,100ca04 <__subdf3+0x84>
 100caac:	29402034 	orhi	r5,r5,128
 100cab0:	01000e04 	movi	r4,56
 100cab4:	2080a316 	blt	r4,r2,100cd44 <__subdf3+0x3c4>
 100cab8:	010007c4 	movi	r4,31
 100cabc:	2080c616 	blt	r4,r2,100cdd8 <__subdf3+0x458>
 100cac0:	01000804 	movi	r4,32
 100cac4:	2089c83a 	sub	r4,r4,r2
 100cac8:	2910983a 	sll	r8,r5,r4
 100cacc:	308ed83a 	srl	r7,r6,r2
 100cad0:	3108983a 	sll	r4,r6,r4
 100cad4:	2884d83a 	srl	r2,r5,r2
 100cad8:	41ccb03a 	or	r6,r8,r7
 100cadc:	2008c03a 	cmpne	r4,r4,zero
 100cae0:	310cb03a 	or	r6,r6,r4
 100cae4:	898dc83a 	sub	r6,r17,r6
 100cae8:	89a3803a 	cmpltu	r17,r17,r6
 100caec:	1887c83a 	sub	r3,r3,r2
 100caf0:	1c47c83a 	sub	r3,r3,r17
 100caf4:	3023883a 	mov	r17,r6
 100caf8:	1880202c 	andhi	r2,r3,128
 100cafc:	10002326 	beq	r2,zero,100cb8c <__subdf3+0x20c>
 100cb00:	04c02034 	movhi	r19,128
 100cb04:	9cffffc4 	addi	r19,r19,-1
 100cb08:	1ce6703a 	and	r19,r3,r19
 100cb0c:	98007a26 	beq	r19,zero,100ccf8 <__subdf3+0x378>
 100cb10:	9809883a 	mov	r4,r19
 100cb14:	100d4800 	call	100d480 <__clzsi2>
 100cb18:	113ffe04 	addi	r4,r2,-8
 100cb1c:	00c007c4 	movi	r3,31
 100cb20:	19007b16 	blt	r3,r4,100cd10 <__subdf3+0x390>
 100cb24:	00800804 	movi	r2,32
 100cb28:	1105c83a 	sub	r2,r2,r4
 100cb2c:	8884d83a 	srl	r2,r17,r2
 100cb30:	9906983a 	sll	r3,r19,r4
 100cb34:	8922983a 	sll	r17,r17,r4
 100cb38:	10c4b03a 	or	r2,r2,r3
 100cb3c:	24007816 	blt	r4,r16,100cd20 <__subdf3+0x3a0>
 100cb40:	2421c83a 	sub	r16,r4,r16
 100cb44:	80c00044 	addi	r3,r16,1
 100cb48:	010007c4 	movi	r4,31
 100cb4c:	20c09516 	blt	r4,r3,100cda4 <__subdf3+0x424>
 100cb50:	01400804 	movi	r5,32
 100cb54:	28cbc83a 	sub	r5,r5,r3
 100cb58:	88c8d83a 	srl	r4,r17,r3
 100cb5c:	8962983a 	sll	r17,r17,r5
 100cb60:	114a983a 	sll	r5,r2,r5
 100cb64:	10c6d83a 	srl	r3,r2,r3
 100cb68:	8804c03a 	cmpne	r2,r17,zero
 100cb6c:	290ab03a 	or	r5,r5,r4
 100cb70:	28a2b03a 	or	r17,r5,r2
 100cb74:	0021883a 	mov	r16,zero
 100cb78:	003fa206 	br	100ca04 <__subdf3+0x84>
 100cb7c:	2090b03a 	or	r8,r4,r2
 100cb80:	40018e26 	beq	r8,zero,100d1bc <__subdf3+0x83c>
 100cb84:	1007883a 	mov	r3,r2
 100cb88:	2023883a 	mov	r17,r4
 100cb8c:	888001cc 	andi	r2,r17,7
 100cb90:	103f9e1e 	bne	r2,zero,100ca0c <__subdf3+0x8c>
 100cb94:	1804977a 	slli	r2,r3,29
 100cb98:	8822d0fa 	srli	r17,r17,3
 100cb9c:	1810d0fa 	srli	r8,r3,3
 100cba0:	9100004c 	andi	r4,r18,1
 100cba4:	1444b03a 	or	r2,r2,r17
 100cba8:	00c1ffc4 	movi	r3,2047
 100cbac:	80c02826 	beq	r16,r3,100cc50 <__subdf3+0x2d0>
 100cbb0:	01400434 	movhi	r5,16
 100cbb4:	297fffc4 	addi	r5,r5,-1
 100cbb8:	80e0703a 	and	r16,r16,r3
 100cbbc:	414a703a 	and	r5,r8,r5
 100cbc0:	003fa806 	br	100ca64 <__subdf3+0xe4>
 100cbc4:	0080630e 	bge	zero,r2,100cd54 <__subdf3+0x3d4>
 100cbc8:	48003026 	beq	r9,zero,100cc8c <__subdf3+0x30c>
 100cbcc:	0101ffc4 	movi	r4,2047
 100cbd0:	813f8c26 	beq	r16,r4,100ca04 <__subdf3+0x84>
 100cbd4:	29402034 	orhi	r5,r5,128
 100cbd8:	01000e04 	movi	r4,56
 100cbdc:	2080a90e 	bge	r4,r2,100ce84 <__subdf3+0x504>
 100cbe0:	298cb03a 	or	r6,r5,r6
 100cbe4:	3012c03a 	cmpne	r9,r6,zero
 100cbe8:	0005883a 	mov	r2,zero
 100cbec:	4c53883a 	add	r9,r9,r17
 100cbf0:	4c63803a 	cmpltu	r17,r9,r17
 100cbf4:	10c7883a 	add	r3,r2,r3
 100cbf8:	88c7883a 	add	r3,r17,r3
 100cbfc:	4823883a 	mov	r17,r9
 100cc00:	1880202c 	andhi	r2,r3,128
 100cc04:	1000d026 	beq	r2,zero,100cf48 <__subdf3+0x5c8>
 100cc08:	84000044 	addi	r16,r16,1
 100cc0c:	0081ffc4 	movi	r2,2047
 100cc10:	8080fe26 	beq	r16,r2,100d00c <__subdf3+0x68c>
 100cc14:	00bfe034 	movhi	r2,65408
 100cc18:	10bfffc4 	addi	r2,r2,-1
 100cc1c:	1886703a 	and	r3,r3,r2
 100cc20:	880ad07a 	srli	r5,r17,1
 100cc24:	180497fa 	slli	r2,r3,31
 100cc28:	8900004c 	andi	r4,r17,1
 100cc2c:	2922b03a 	or	r17,r5,r4
 100cc30:	1806d07a 	srli	r3,r3,1
 100cc34:	1462b03a 	or	r17,r2,r17
 100cc38:	3825883a 	mov	r18,r7
 100cc3c:	003f7106 	br	100ca04 <__subdf3+0x84>
 100cc40:	2984b03a 	or	r2,r5,r6
 100cc44:	103f6826 	beq	r2,zero,100c9e8 <__subdf3+0x68>
 100cc48:	39c03fcc 	andi	r7,r7,255
 100cc4c:	003f6706 	br	100c9ec <__subdf3+0x6c>
 100cc50:	4086b03a 	or	r3,r8,r2
 100cc54:	18015226 	beq	r3,zero,100d1a0 <__subdf3+0x820>
 100cc58:	00c00434 	movhi	r3,16
 100cc5c:	41400234 	orhi	r5,r8,8
 100cc60:	18ffffc4 	addi	r3,r3,-1
 100cc64:	28ca703a 	and	r5,r5,r3
 100cc68:	003f7e06 	br	100ca64 <__subdf3+0xe4>
 100cc6c:	10bfffc4 	addi	r2,r2,-1
 100cc70:	1000491e 	bne	r2,zero,100cd98 <__subdf3+0x418>
 100cc74:	898fc83a 	sub	r7,r17,r6
 100cc78:	89e3803a 	cmpltu	r17,r17,r7
 100cc7c:	1947c83a 	sub	r3,r3,r5
 100cc80:	1c47c83a 	sub	r3,r3,r17
 100cc84:	3823883a 	mov	r17,r7
 100cc88:	003f9b06 	br	100caf8 <__subdf3+0x178>
 100cc8c:	2988b03a 	or	r4,r5,r6
 100cc90:	203f5c26 	beq	r4,zero,100ca04 <__subdf3+0x84>
 100cc94:	10bfffc4 	addi	r2,r2,-1
 100cc98:	1000931e 	bne	r2,zero,100cee8 <__subdf3+0x568>
 100cc9c:	898d883a 	add	r6,r17,r6
 100cca0:	3463803a 	cmpltu	r17,r6,r17
 100cca4:	1947883a 	add	r3,r3,r5
 100cca8:	88c7883a 	add	r3,r17,r3
 100ccac:	3023883a 	mov	r17,r6
 100ccb0:	003fd306 	br	100cc00 <__subdf3+0x280>
 100ccb4:	1000541e 	bne	r2,zero,100ce08 <__subdf3+0x488>
 100ccb8:	80800044 	addi	r2,r16,1
 100ccbc:	1081ffcc 	andi	r2,r2,2047
 100ccc0:	01000044 	movi	r4,1
 100ccc4:	2080a20e 	bge	r4,r2,100cf50 <__subdf3+0x5d0>
 100ccc8:	8989c83a 	sub	r4,r17,r6
 100cccc:	8905803a 	cmpltu	r2,r17,r4
 100ccd0:	1967c83a 	sub	r19,r3,r5
 100ccd4:	98a7c83a 	sub	r19,r19,r2
 100ccd8:	9880202c 	andhi	r2,r19,128
 100ccdc:	10006326 	beq	r2,zero,100ce6c <__subdf3+0x4ec>
 100cce0:	3463c83a 	sub	r17,r6,r17
 100cce4:	28c7c83a 	sub	r3,r5,r3
 100cce8:	344d803a 	cmpltu	r6,r6,r17
 100ccec:	19a7c83a 	sub	r19,r3,r6
 100ccf0:	3825883a 	mov	r18,r7
 100ccf4:	983f861e 	bne	r19,zero,100cb10 <__subdf3+0x190>
 100ccf8:	8809883a 	mov	r4,r17
 100ccfc:	100d4800 	call	100d480 <__clzsi2>
 100cd00:	10800804 	addi	r2,r2,32
 100cd04:	113ffe04 	addi	r4,r2,-8
 100cd08:	00c007c4 	movi	r3,31
 100cd0c:	193f850e 	bge	r3,r4,100cb24 <__subdf3+0x1a4>
 100cd10:	10bff604 	addi	r2,r2,-40
 100cd14:	8884983a 	sll	r2,r17,r2
 100cd18:	0023883a 	mov	r17,zero
 100cd1c:	243f880e 	bge	r4,r16,100cb40 <__subdf3+0x1c0>
 100cd20:	00ffe034 	movhi	r3,65408
 100cd24:	18ffffc4 	addi	r3,r3,-1
 100cd28:	8121c83a 	sub	r16,r16,r4
 100cd2c:	10c6703a 	and	r3,r2,r3
 100cd30:	003f3406 	br	100ca04 <__subdf3+0x84>
 100cd34:	9100004c 	andi	r4,r18,1
 100cd38:	000b883a 	mov	r5,zero
 100cd3c:	0005883a 	mov	r2,zero
 100cd40:	003f4806 	br	100ca64 <__subdf3+0xe4>
 100cd44:	298cb03a 	or	r6,r5,r6
 100cd48:	300cc03a 	cmpne	r6,r6,zero
 100cd4c:	0005883a 	mov	r2,zero
 100cd50:	003f6406 	br	100cae4 <__subdf3+0x164>
 100cd54:	10009a1e 	bne	r2,zero,100cfc0 <__subdf3+0x640>
 100cd58:	82400044 	addi	r9,r16,1
 100cd5c:	4881ffcc 	andi	r2,r9,2047
 100cd60:	02800044 	movi	r10,1
 100cd64:	5080670e 	bge	r10,r2,100cf04 <__subdf3+0x584>
 100cd68:	0081ffc4 	movi	r2,2047
 100cd6c:	4880af26 	beq	r9,r2,100d02c <__subdf3+0x6ac>
 100cd70:	898d883a 	add	r6,r17,r6
 100cd74:	1945883a 	add	r2,r3,r5
 100cd78:	3447803a 	cmpltu	r3,r6,r17
 100cd7c:	1887883a 	add	r3,r3,r2
 100cd80:	182297fa 	slli	r17,r3,31
 100cd84:	300cd07a 	srli	r6,r6,1
 100cd88:	1806d07a 	srli	r3,r3,1
 100cd8c:	4821883a 	mov	r16,r9
 100cd90:	89a2b03a 	or	r17,r17,r6
 100cd94:	003f1b06 	br	100ca04 <__subdf3+0x84>
 100cd98:	0101ffc4 	movi	r4,2047
 100cd9c:	813f441e 	bne	r16,r4,100cab0 <__subdf3+0x130>
 100cda0:	003f1806 	br	100ca04 <__subdf3+0x84>
 100cda4:	843ff844 	addi	r16,r16,-31
 100cda8:	01400804 	movi	r5,32
 100cdac:	1408d83a 	srl	r4,r2,r16
 100cdb0:	19405026 	beq	r3,r5,100cef4 <__subdf3+0x574>
 100cdb4:	01401004 	movi	r5,64
 100cdb8:	28c7c83a 	sub	r3,r5,r3
 100cdbc:	10c4983a 	sll	r2,r2,r3
 100cdc0:	88a2b03a 	or	r17,r17,r2
 100cdc4:	8822c03a 	cmpne	r17,r17,zero
 100cdc8:	2462b03a 	or	r17,r4,r17
 100cdcc:	0007883a 	mov	r3,zero
 100cdd0:	0021883a 	mov	r16,zero
 100cdd4:	003f6d06 	br	100cb8c <__subdf3+0x20c>
 100cdd8:	11fff804 	addi	r7,r2,-32
 100cddc:	01000804 	movi	r4,32
 100cde0:	29ced83a 	srl	r7,r5,r7
 100cde4:	11004526 	beq	r2,r4,100cefc <__subdf3+0x57c>
 100cde8:	01001004 	movi	r4,64
 100cdec:	2089c83a 	sub	r4,r4,r2
 100cdf0:	2904983a 	sll	r2,r5,r4
 100cdf4:	118cb03a 	or	r6,r2,r6
 100cdf8:	300cc03a 	cmpne	r6,r6,zero
 100cdfc:	398cb03a 	or	r6,r7,r6
 100ce00:	0005883a 	mov	r2,zero
 100ce04:	003f3706 	br	100cae4 <__subdf3+0x164>
 100ce08:	80002a26 	beq	r16,zero,100ceb4 <__subdf3+0x534>
 100ce0c:	0101ffc4 	movi	r4,2047
 100ce10:	49006626 	beq	r9,r4,100cfac <__subdf3+0x62c>
 100ce14:	0085c83a 	sub	r2,zero,r2
 100ce18:	18c02034 	orhi	r3,r3,128
 100ce1c:	01000e04 	movi	r4,56
 100ce20:	20807e16 	blt	r4,r2,100d01c <__subdf3+0x69c>
 100ce24:	010007c4 	movi	r4,31
 100ce28:	2080e716 	blt	r4,r2,100d1c8 <__subdf3+0x848>
 100ce2c:	01000804 	movi	r4,32
 100ce30:	2089c83a 	sub	r4,r4,r2
 100ce34:	1914983a 	sll	r10,r3,r4
 100ce38:	8890d83a 	srl	r8,r17,r2
 100ce3c:	8908983a 	sll	r4,r17,r4
 100ce40:	1884d83a 	srl	r2,r3,r2
 100ce44:	5222b03a 	or	r17,r10,r8
 100ce48:	2006c03a 	cmpne	r3,r4,zero
 100ce4c:	88e2b03a 	or	r17,r17,r3
 100ce50:	3463c83a 	sub	r17,r6,r17
 100ce54:	2885c83a 	sub	r2,r5,r2
 100ce58:	344d803a 	cmpltu	r6,r6,r17
 100ce5c:	1187c83a 	sub	r3,r2,r6
 100ce60:	4821883a 	mov	r16,r9
 100ce64:	3825883a 	mov	r18,r7
 100ce68:	003f2306 	br	100caf8 <__subdf3+0x178>
 100ce6c:	24d0b03a 	or	r8,r4,r19
 100ce70:	40001b1e 	bne	r8,zero,100cee0 <__subdf3+0x560>
 100ce74:	0005883a 	mov	r2,zero
 100ce78:	0009883a 	mov	r4,zero
 100ce7c:	0021883a 	mov	r16,zero
 100ce80:	003f4906 	br	100cba8 <__subdf3+0x228>
 100ce84:	010007c4 	movi	r4,31
 100ce88:	20803a16 	blt	r4,r2,100cf74 <__subdf3+0x5f4>
 100ce8c:	01000804 	movi	r4,32
 100ce90:	2089c83a 	sub	r4,r4,r2
 100ce94:	2912983a 	sll	r9,r5,r4
 100ce98:	3090d83a 	srl	r8,r6,r2
 100ce9c:	3108983a 	sll	r4,r6,r4
 100cea0:	2884d83a 	srl	r2,r5,r2
 100cea4:	4a12b03a 	or	r9,r9,r8
 100cea8:	2008c03a 	cmpne	r4,r4,zero
 100ceac:	4912b03a 	or	r9,r9,r4
 100ceb0:	003f4e06 	br	100cbec <__subdf3+0x26c>
 100ceb4:	1c48b03a 	or	r4,r3,r17
 100ceb8:	20003c26 	beq	r4,zero,100cfac <__subdf3+0x62c>
 100cebc:	0084303a 	nor	r2,zero,r2
 100cec0:	1000381e 	bne	r2,zero,100cfa4 <__subdf3+0x624>
 100cec4:	3463c83a 	sub	r17,r6,r17
 100cec8:	28c5c83a 	sub	r2,r5,r3
 100cecc:	344d803a 	cmpltu	r6,r6,r17
 100ced0:	1187c83a 	sub	r3,r2,r6
 100ced4:	4821883a 	mov	r16,r9
 100ced8:	3825883a 	mov	r18,r7
 100cedc:	003f0606 	br	100caf8 <__subdf3+0x178>
 100cee0:	2023883a 	mov	r17,r4
 100cee4:	003f0906 	br	100cb0c <__subdf3+0x18c>
 100cee8:	0101ffc4 	movi	r4,2047
 100ceec:	813f3a1e 	bne	r16,r4,100cbd8 <__subdf3+0x258>
 100cef0:	003ec406 	br	100ca04 <__subdf3+0x84>
 100cef4:	0005883a 	mov	r2,zero
 100cef8:	003fb106 	br	100cdc0 <__subdf3+0x440>
 100cefc:	0005883a 	mov	r2,zero
 100cf00:	003fbc06 	br	100cdf4 <__subdf3+0x474>
 100cf04:	1c44b03a 	or	r2,r3,r17
 100cf08:	80008e1e 	bne	r16,zero,100d144 <__subdf3+0x7c4>
 100cf0c:	1000c826 	beq	r2,zero,100d230 <__subdf3+0x8b0>
 100cf10:	2984b03a 	or	r2,r5,r6
 100cf14:	103ebb26 	beq	r2,zero,100ca04 <__subdf3+0x84>
 100cf18:	8989883a 	add	r4,r17,r6
 100cf1c:	1945883a 	add	r2,r3,r5
 100cf20:	2447803a 	cmpltu	r3,r4,r17
 100cf24:	1887883a 	add	r3,r3,r2
 100cf28:	1880202c 	andhi	r2,r3,128
 100cf2c:	2023883a 	mov	r17,r4
 100cf30:	103f1626 	beq	r2,zero,100cb8c <__subdf3+0x20c>
 100cf34:	00bfe034 	movhi	r2,65408
 100cf38:	10bfffc4 	addi	r2,r2,-1
 100cf3c:	5021883a 	mov	r16,r10
 100cf40:	1886703a 	and	r3,r3,r2
 100cf44:	003eaf06 	br	100ca04 <__subdf3+0x84>
 100cf48:	3825883a 	mov	r18,r7
 100cf4c:	003f0f06 	br	100cb8c <__subdf3+0x20c>
 100cf50:	1c44b03a 	or	r2,r3,r17
 100cf54:	8000251e 	bne	r16,zero,100cfec <__subdf3+0x66c>
 100cf58:	1000661e 	bne	r2,zero,100d0f4 <__subdf3+0x774>
 100cf5c:	2990b03a 	or	r8,r5,r6
 100cf60:	40009626 	beq	r8,zero,100d1bc <__subdf3+0x83c>
 100cf64:	2807883a 	mov	r3,r5
 100cf68:	3023883a 	mov	r17,r6
 100cf6c:	3825883a 	mov	r18,r7
 100cf70:	003ea406 	br	100ca04 <__subdf3+0x84>
 100cf74:	127ff804 	addi	r9,r2,-32
 100cf78:	01000804 	movi	r4,32
 100cf7c:	2a52d83a 	srl	r9,r5,r9
 100cf80:	11008c26 	beq	r2,r4,100d1b4 <__subdf3+0x834>
 100cf84:	01001004 	movi	r4,64
 100cf88:	2085c83a 	sub	r2,r4,r2
 100cf8c:	2884983a 	sll	r2,r5,r2
 100cf90:	118cb03a 	or	r6,r2,r6
 100cf94:	300cc03a 	cmpne	r6,r6,zero
 100cf98:	4992b03a 	or	r9,r9,r6
 100cf9c:	0005883a 	mov	r2,zero
 100cfa0:	003f1206 	br	100cbec <__subdf3+0x26c>
 100cfa4:	0101ffc4 	movi	r4,2047
 100cfa8:	493f9c1e 	bne	r9,r4,100ce1c <__subdf3+0x49c>
 100cfac:	2807883a 	mov	r3,r5
 100cfb0:	3023883a 	mov	r17,r6
 100cfb4:	4821883a 	mov	r16,r9
 100cfb8:	3825883a 	mov	r18,r7
 100cfbc:	003e9106 	br	100ca04 <__subdf3+0x84>
 100cfc0:	80001f1e 	bne	r16,zero,100d040 <__subdf3+0x6c0>
 100cfc4:	1c48b03a 	or	r4,r3,r17
 100cfc8:	20005a26 	beq	r4,zero,100d134 <__subdf3+0x7b4>
 100cfcc:	0084303a 	nor	r2,zero,r2
 100cfd0:	1000561e 	bne	r2,zero,100d12c <__subdf3+0x7ac>
 100cfd4:	89a3883a 	add	r17,r17,r6
 100cfd8:	1945883a 	add	r2,r3,r5
 100cfdc:	898d803a 	cmpltu	r6,r17,r6
 100cfe0:	3087883a 	add	r3,r6,r2
 100cfe4:	4821883a 	mov	r16,r9
 100cfe8:	003f0506 	br	100cc00 <__subdf3+0x280>
 100cfec:	10002b1e 	bne	r2,zero,100d09c <__subdf3+0x71c>
 100cff0:	2984b03a 	or	r2,r5,r6
 100cff4:	10008026 	beq	r2,zero,100d1f8 <__subdf3+0x878>
 100cff8:	2807883a 	mov	r3,r5
 100cffc:	3023883a 	mov	r17,r6
 100d000:	3825883a 	mov	r18,r7
 100d004:	0401ffc4 	movi	r16,2047
 100d008:	003e7e06 	br	100ca04 <__subdf3+0x84>
 100d00c:	3809883a 	mov	r4,r7
 100d010:	0011883a 	mov	r8,zero
 100d014:	0005883a 	mov	r2,zero
 100d018:	003ee306 	br	100cba8 <__subdf3+0x228>
 100d01c:	1c62b03a 	or	r17,r3,r17
 100d020:	8822c03a 	cmpne	r17,r17,zero
 100d024:	0005883a 	mov	r2,zero
 100d028:	003f8906 	br	100ce50 <__subdf3+0x4d0>
 100d02c:	3809883a 	mov	r4,r7
 100d030:	4821883a 	mov	r16,r9
 100d034:	0011883a 	mov	r8,zero
 100d038:	0005883a 	mov	r2,zero
 100d03c:	003eda06 	br	100cba8 <__subdf3+0x228>
 100d040:	0101ffc4 	movi	r4,2047
 100d044:	49003b26 	beq	r9,r4,100d134 <__subdf3+0x7b4>
 100d048:	0085c83a 	sub	r2,zero,r2
 100d04c:	18c02034 	orhi	r3,r3,128
 100d050:	01000e04 	movi	r4,56
 100d054:	20806e16 	blt	r4,r2,100d210 <__subdf3+0x890>
 100d058:	010007c4 	movi	r4,31
 100d05c:	20807716 	blt	r4,r2,100d23c <__subdf3+0x8bc>
 100d060:	01000804 	movi	r4,32
 100d064:	2089c83a 	sub	r4,r4,r2
 100d068:	1914983a 	sll	r10,r3,r4
 100d06c:	8890d83a 	srl	r8,r17,r2
 100d070:	8908983a 	sll	r4,r17,r4
 100d074:	1884d83a 	srl	r2,r3,r2
 100d078:	5222b03a 	or	r17,r10,r8
 100d07c:	2006c03a 	cmpne	r3,r4,zero
 100d080:	88e2b03a 	or	r17,r17,r3
 100d084:	89a3883a 	add	r17,r17,r6
 100d088:	1145883a 	add	r2,r2,r5
 100d08c:	898d803a 	cmpltu	r6,r17,r6
 100d090:	3087883a 	add	r3,r6,r2
 100d094:	4821883a 	mov	r16,r9
 100d098:	003ed906 	br	100cc00 <__subdf3+0x280>
 100d09c:	2984b03a 	or	r2,r5,r6
 100d0a0:	10004226 	beq	r2,zero,100d1ac <__subdf3+0x82c>
 100d0a4:	1808d0fa 	srli	r4,r3,3
 100d0a8:	8822d0fa 	srli	r17,r17,3
 100d0ac:	1806977a 	slli	r3,r3,29
 100d0b0:	2080022c 	andhi	r2,r4,8
 100d0b4:	1c62b03a 	or	r17,r3,r17
 100d0b8:	10000826 	beq	r2,zero,100d0dc <__subdf3+0x75c>
 100d0bc:	2812d0fa 	srli	r9,r5,3
 100d0c0:	4880022c 	andhi	r2,r9,8
 100d0c4:	1000051e 	bne	r2,zero,100d0dc <__subdf3+0x75c>
 100d0c8:	300cd0fa 	srli	r6,r6,3
 100d0cc:	2804977a 	slli	r2,r5,29
 100d0d0:	4809883a 	mov	r4,r9
 100d0d4:	3825883a 	mov	r18,r7
 100d0d8:	11a2b03a 	or	r17,r2,r6
 100d0dc:	8806d77a 	srli	r3,r17,29
 100d0e0:	200890fa 	slli	r4,r4,3
 100d0e4:	882290fa 	slli	r17,r17,3
 100d0e8:	0401ffc4 	movi	r16,2047
 100d0ec:	1906b03a 	or	r3,r3,r4
 100d0f0:	003e4406 	br	100ca04 <__subdf3+0x84>
 100d0f4:	2984b03a 	or	r2,r5,r6
 100d0f8:	103e4226 	beq	r2,zero,100ca04 <__subdf3+0x84>
 100d0fc:	8989c83a 	sub	r4,r17,r6
 100d100:	8911803a 	cmpltu	r8,r17,r4
 100d104:	1945c83a 	sub	r2,r3,r5
 100d108:	1205c83a 	sub	r2,r2,r8
 100d10c:	1200202c 	andhi	r8,r2,128
 100d110:	403e9a26 	beq	r8,zero,100cb7c <__subdf3+0x1fc>
 100d114:	3463c83a 	sub	r17,r6,r17
 100d118:	28c5c83a 	sub	r2,r5,r3
 100d11c:	344d803a 	cmpltu	r6,r6,r17
 100d120:	1187c83a 	sub	r3,r2,r6
 100d124:	3825883a 	mov	r18,r7
 100d128:	003e3606 	br	100ca04 <__subdf3+0x84>
 100d12c:	0101ffc4 	movi	r4,2047
 100d130:	493fc71e 	bne	r9,r4,100d050 <__subdf3+0x6d0>
 100d134:	2807883a 	mov	r3,r5
 100d138:	3023883a 	mov	r17,r6
 100d13c:	4821883a 	mov	r16,r9
 100d140:	003e3006 	br	100ca04 <__subdf3+0x84>
 100d144:	10003626 	beq	r2,zero,100d220 <__subdf3+0x8a0>
 100d148:	2984b03a 	or	r2,r5,r6
 100d14c:	10001726 	beq	r2,zero,100d1ac <__subdf3+0x82c>
 100d150:	1808d0fa 	srli	r4,r3,3
 100d154:	8822d0fa 	srli	r17,r17,3
 100d158:	1806977a 	slli	r3,r3,29
 100d15c:	2080022c 	andhi	r2,r4,8
 100d160:	1c62b03a 	or	r17,r3,r17
 100d164:	10000726 	beq	r2,zero,100d184 <__subdf3+0x804>
 100d168:	2812d0fa 	srli	r9,r5,3
 100d16c:	4880022c 	andhi	r2,r9,8
 100d170:	1000041e 	bne	r2,zero,100d184 <__subdf3+0x804>
 100d174:	300cd0fa 	srli	r6,r6,3
 100d178:	2804977a 	slli	r2,r5,29
 100d17c:	4809883a 	mov	r4,r9
 100d180:	11a2b03a 	or	r17,r2,r6
 100d184:	8806d77a 	srli	r3,r17,29
 100d188:	200890fa 	slli	r4,r4,3
 100d18c:	882290fa 	slli	r17,r17,3
 100d190:	3825883a 	mov	r18,r7
 100d194:	1906b03a 	or	r3,r3,r4
 100d198:	0401ffc4 	movi	r16,2047
 100d19c:	003e1906 	br	100ca04 <__subdf3+0x84>
 100d1a0:	000b883a 	mov	r5,zero
 100d1a4:	0005883a 	mov	r2,zero
 100d1a8:	003e2e06 	br	100ca64 <__subdf3+0xe4>
 100d1ac:	0401ffc4 	movi	r16,2047
 100d1b0:	003e1406 	br	100ca04 <__subdf3+0x84>
 100d1b4:	0005883a 	mov	r2,zero
 100d1b8:	003f7506 	br	100cf90 <__subdf3+0x610>
 100d1bc:	0005883a 	mov	r2,zero
 100d1c0:	0009883a 	mov	r4,zero
 100d1c4:	003e7806 	br	100cba8 <__subdf3+0x228>
 100d1c8:	123ff804 	addi	r8,r2,-32
 100d1cc:	01000804 	movi	r4,32
 100d1d0:	1a10d83a 	srl	r8,r3,r8
 100d1d4:	11002526 	beq	r2,r4,100d26c <__subdf3+0x8ec>
 100d1d8:	01001004 	movi	r4,64
 100d1dc:	2085c83a 	sub	r2,r4,r2
 100d1e0:	1884983a 	sll	r2,r3,r2
 100d1e4:	1444b03a 	or	r2,r2,r17
 100d1e8:	1004c03a 	cmpne	r2,r2,zero
 100d1ec:	40a2b03a 	or	r17,r8,r2
 100d1f0:	0005883a 	mov	r2,zero
 100d1f4:	003f1606 	br	100ce50 <__subdf3+0x4d0>
 100d1f8:	02000434 	movhi	r8,16
 100d1fc:	0009883a 	mov	r4,zero
 100d200:	423fffc4 	addi	r8,r8,-1
 100d204:	00bfffc4 	movi	r2,-1
 100d208:	0401ffc4 	movi	r16,2047
 100d20c:	003e6606 	br	100cba8 <__subdf3+0x228>
 100d210:	1c62b03a 	or	r17,r3,r17
 100d214:	8822c03a 	cmpne	r17,r17,zero
 100d218:	0005883a 	mov	r2,zero
 100d21c:	003f9906 	br	100d084 <__subdf3+0x704>
 100d220:	2807883a 	mov	r3,r5
 100d224:	3023883a 	mov	r17,r6
 100d228:	0401ffc4 	movi	r16,2047
 100d22c:	003df506 	br	100ca04 <__subdf3+0x84>
 100d230:	2807883a 	mov	r3,r5
 100d234:	3023883a 	mov	r17,r6
 100d238:	003df206 	br	100ca04 <__subdf3+0x84>
 100d23c:	123ff804 	addi	r8,r2,-32
 100d240:	01000804 	movi	r4,32
 100d244:	1a10d83a 	srl	r8,r3,r8
 100d248:	11000a26 	beq	r2,r4,100d274 <__subdf3+0x8f4>
 100d24c:	01001004 	movi	r4,64
 100d250:	2085c83a 	sub	r2,r4,r2
 100d254:	1884983a 	sll	r2,r3,r2
 100d258:	1444b03a 	or	r2,r2,r17
 100d25c:	1004c03a 	cmpne	r2,r2,zero
 100d260:	40a2b03a 	or	r17,r8,r2
 100d264:	0005883a 	mov	r2,zero
 100d268:	003f8606 	br	100d084 <__subdf3+0x704>
 100d26c:	0005883a 	mov	r2,zero
 100d270:	003fdc06 	br	100d1e4 <__subdf3+0x864>
 100d274:	0005883a 	mov	r2,zero
 100d278:	003ff706 	br	100d258 <__subdf3+0x8d8>

0100d27c <__fixdfsi>:
 100d27c:	280cd53a 	srli	r6,r5,20
 100d280:	00c00434 	movhi	r3,16
 100d284:	18ffffc4 	addi	r3,r3,-1
 100d288:	3181ffcc 	andi	r6,r6,2047
 100d28c:	01c0ff84 	movi	r7,1022
 100d290:	28c6703a 	and	r3,r5,r3
 100d294:	280ad7fa 	srli	r5,r5,31
 100d298:	3980120e 	bge	r7,r6,100d2e4 <__fixdfsi+0x68>
 100d29c:	00810744 	movi	r2,1053
 100d2a0:	11800c16 	blt	r2,r6,100d2d4 <__fixdfsi+0x58>
 100d2a4:	00810cc4 	movi	r2,1075
 100d2a8:	1185c83a 	sub	r2,r2,r6
 100d2ac:	01c007c4 	movi	r7,31
 100d2b0:	18c00434 	orhi	r3,r3,16
 100d2b4:	38800d16 	blt	r7,r2,100d2ec <__fixdfsi+0x70>
 100d2b8:	31befb44 	addi	r6,r6,-1043
 100d2bc:	2084d83a 	srl	r2,r4,r2
 100d2c0:	1986983a 	sll	r3,r3,r6
 100d2c4:	1884b03a 	or	r2,r3,r2
 100d2c8:	28000726 	beq	r5,zero,100d2e8 <__fixdfsi+0x6c>
 100d2cc:	0085c83a 	sub	r2,zero,r2
 100d2d0:	f800283a 	ret
 100d2d4:	00a00034 	movhi	r2,32768
 100d2d8:	10bfffc4 	addi	r2,r2,-1
 100d2dc:	2885883a 	add	r2,r5,r2
 100d2e0:	f800283a 	ret
 100d2e4:	0005883a 	mov	r2,zero
 100d2e8:	f800283a 	ret
 100d2ec:	008104c4 	movi	r2,1043
 100d2f0:	1185c83a 	sub	r2,r2,r6
 100d2f4:	1884d83a 	srl	r2,r3,r2
 100d2f8:	003ff306 	br	100d2c8 <__fixdfsi+0x4c>

0100d2fc <__floatsidf>:
 100d2fc:	defffd04 	addi	sp,sp,-12
 100d300:	dfc00215 	stw	ra,8(sp)
 100d304:	dc400115 	stw	r17,4(sp)
 100d308:	dc000015 	stw	r16,0(sp)
 100d30c:	20002b26 	beq	r4,zero,100d3bc <__floatsidf+0xc0>
 100d310:	2023883a 	mov	r17,r4
 100d314:	2020d7fa 	srli	r16,r4,31
 100d318:	20002d16 	blt	r4,zero,100d3d0 <__floatsidf+0xd4>
 100d31c:	8809883a 	mov	r4,r17
 100d320:	100d4800 	call	100d480 <__clzsi2>
 100d324:	01410784 	movi	r5,1054
 100d328:	288bc83a 	sub	r5,r5,r2
 100d32c:	01010cc4 	movi	r4,1075
 100d330:	2149c83a 	sub	r4,r4,r5
 100d334:	00c007c4 	movi	r3,31
 100d338:	1900160e 	bge	r3,r4,100d394 <__floatsidf+0x98>
 100d33c:	00c104c4 	movi	r3,1043
 100d340:	1947c83a 	sub	r3,r3,r5
 100d344:	88c6983a 	sll	r3,r17,r3
 100d348:	00800434 	movhi	r2,16
 100d34c:	10bfffc4 	addi	r2,r2,-1
 100d350:	1886703a 	and	r3,r3,r2
 100d354:	2941ffcc 	andi	r5,r5,2047
 100d358:	800d883a 	mov	r6,r16
 100d35c:	0005883a 	mov	r2,zero
 100d360:	280a953a 	slli	r5,r5,20
 100d364:	31803fcc 	andi	r6,r6,255
 100d368:	01000434 	movhi	r4,16
 100d36c:	300c97fa 	slli	r6,r6,31
 100d370:	213fffc4 	addi	r4,r4,-1
 100d374:	1906703a 	and	r3,r3,r4
 100d378:	1946b03a 	or	r3,r3,r5
 100d37c:	1986b03a 	or	r3,r3,r6
 100d380:	dfc00217 	ldw	ra,8(sp)
 100d384:	dc400117 	ldw	r17,4(sp)
 100d388:	dc000017 	ldw	r16,0(sp)
 100d38c:	dec00304 	addi	sp,sp,12
 100d390:	f800283a 	ret
 100d394:	00c002c4 	movi	r3,11
 100d398:	1887c83a 	sub	r3,r3,r2
 100d39c:	88c6d83a 	srl	r3,r17,r3
 100d3a0:	8904983a 	sll	r2,r17,r4
 100d3a4:	01000434 	movhi	r4,16
 100d3a8:	213fffc4 	addi	r4,r4,-1
 100d3ac:	2941ffcc 	andi	r5,r5,2047
 100d3b0:	1906703a 	and	r3,r3,r4
 100d3b4:	800d883a 	mov	r6,r16
 100d3b8:	003fe906 	br	100d360 <__floatsidf+0x64>
 100d3bc:	000d883a 	mov	r6,zero
 100d3c0:	000b883a 	mov	r5,zero
 100d3c4:	0007883a 	mov	r3,zero
 100d3c8:	0005883a 	mov	r2,zero
 100d3cc:	003fe406 	br	100d360 <__floatsidf+0x64>
 100d3d0:	0123c83a 	sub	r17,zero,r4
 100d3d4:	003fd106 	br	100d31c <__floatsidf+0x20>

0100d3d8 <__floatunsidf>:
 100d3d8:	defffe04 	addi	sp,sp,-8
 100d3dc:	dc000015 	stw	r16,0(sp)
 100d3e0:	dfc00115 	stw	ra,4(sp)
 100d3e4:	2021883a 	mov	r16,r4
 100d3e8:	20002226 	beq	r4,zero,100d474 <__floatunsidf+0x9c>
 100d3ec:	100d4800 	call	100d480 <__clzsi2>
 100d3f0:	01010784 	movi	r4,1054
 100d3f4:	2089c83a 	sub	r4,r4,r2
 100d3f8:	01810cc4 	movi	r6,1075
 100d3fc:	310dc83a 	sub	r6,r6,r4
 100d400:	00c007c4 	movi	r3,31
 100d404:	1980120e 	bge	r3,r6,100d450 <__floatunsidf+0x78>
 100d408:	00c104c4 	movi	r3,1043
 100d40c:	1907c83a 	sub	r3,r3,r4
 100d410:	80ca983a 	sll	r5,r16,r3
 100d414:	00800434 	movhi	r2,16
 100d418:	10bfffc4 	addi	r2,r2,-1
 100d41c:	2101ffcc 	andi	r4,r4,2047
 100d420:	0021883a 	mov	r16,zero
 100d424:	288a703a 	and	r5,r5,r2
 100d428:	2008953a 	slli	r4,r4,20
 100d42c:	00c00434 	movhi	r3,16
 100d430:	18ffffc4 	addi	r3,r3,-1
 100d434:	28c6703a 	and	r3,r5,r3
 100d438:	8005883a 	mov	r2,r16
 100d43c:	1906b03a 	or	r3,r3,r4
 100d440:	dfc00117 	ldw	ra,4(sp)
 100d444:	dc000017 	ldw	r16,0(sp)
 100d448:	dec00204 	addi	sp,sp,8
 100d44c:	f800283a 	ret
 100d450:	00c002c4 	movi	r3,11
 100d454:	188bc83a 	sub	r5,r3,r2
 100d458:	814ad83a 	srl	r5,r16,r5
 100d45c:	00c00434 	movhi	r3,16
 100d460:	18ffffc4 	addi	r3,r3,-1
 100d464:	81a0983a 	sll	r16,r16,r6
 100d468:	2101ffcc 	andi	r4,r4,2047
 100d46c:	28ca703a 	and	r5,r5,r3
 100d470:	003fed06 	br	100d428 <__floatunsidf+0x50>
 100d474:	0009883a 	mov	r4,zero
 100d478:	000b883a 	mov	r5,zero
 100d47c:	003fea06 	br	100d428 <__floatunsidf+0x50>

0100d480 <__clzsi2>:
 100d480:	00bfffd4 	movui	r2,65535
 100d484:	11000536 	bltu	r2,r4,100d49c <__clzsi2+0x1c>
 100d488:	00803fc4 	movi	r2,255
 100d48c:	11000f36 	bltu	r2,r4,100d4cc <__clzsi2+0x4c>
 100d490:	00800804 	movi	r2,32
 100d494:	0007883a 	mov	r3,zero
 100d498:	00000506 	br	100d4b0 <__clzsi2+0x30>
 100d49c:	00804034 	movhi	r2,256
 100d4a0:	10bfffc4 	addi	r2,r2,-1
 100d4a4:	11000c2e 	bgeu	r2,r4,100d4d8 <__clzsi2+0x58>
 100d4a8:	00800204 	movi	r2,8
 100d4ac:	00c00604 	movi	r3,24
 100d4b0:	20c8d83a 	srl	r4,r4,r3
 100d4b4:	00c04074 	movhi	r3,257
 100d4b8:	18ffc704 	addi	r3,r3,-228
 100d4bc:	1909883a 	add	r4,r3,r4
 100d4c0:	20c00003 	ldbu	r3,0(r4)
 100d4c4:	10c5c83a 	sub	r2,r2,r3
 100d4c8:	f800283a 	ret
 100d4cc:	00800604 	movi	r2,24
 100d4d0:	00c00204 	movi	r3,8
 100d4d4:	003ff606 	br	100d4b0 <__clzsi2+0x30>
 100d4d8:	00800404 	movi	r2,16
 100d4dc:	1007883a 	mov	r3,r2
 100d4e0:	003ff306 	br	100d4b0 <__clzsi2+0x30>

0100d4e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d4e4:	defffe04 	addi	sp,sp,-8
 100d4e8:	dfc00115 	stw	ra,4(sp)
 100d4ec:	df000015 	stw	fp,0(sp)
 100d4f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d4f4:	d0a00b17 	ldw	r2,-32724(gp)
 100d4f8:	10000326 	beq	r2,zero,100d508 <alt_get_errno+0x24>
 100d4fc:	d0a00b17 	ldw	r2,-32724(gp)
 100d500:	103ee83a 	callr	r2
 100d504:	00000106 	br	100d50c <alt_get_errno+0x28>
 100d508:	d0a6d204 	addi	r2,gp,-25784
}
 100d50c:	e037883a 	mov	sp,fp
 100d510:	dfc00117 	ldw	ra,4(sp)
 100d514:	df000017 	ldw	fp,0(sp)
 100d518:	dec00204 	addi	sp,sp,8
 100d51c:	f800283a 	ret

0100d520 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100d520:	defffb04 	addi	sp,sp,-20
 100d524:	dfc00415 	stw	ra,16(sp)
 100d528:	df000315 	stw	fp,12(sp)
 100d52c:	df000304 	addi	fp,sp,12
 100d530:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100d534:	e0bfff17 	ldw	r2,-4(fp)
 100d538:	10000616 	blt	r2,zero,100d554 <close+0x34>
 100d53c:	e0bfff17 	ldw	r2,-4(fp)
 100d540:	10c00324 	muli	r3,r2,12
 100d544:	00804074 	movhi	r2,257
 100d548:	10824504 	addi	r2,r2,2324
 100d54c:	1885883a 	add	r2,r3,r2
 100d550:	00000106 	br	100d558 <close+0x38>
 100d554:	0005883a 	mov	r2,zero
 100d558:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 100d55c:	e0bffd17 	ldw	r2,-12(fp)
 100d560:	10001926 	beq	r2,zero,100d5c8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100d564:	e0bffd17 	ldw	r2,-12(fp)
 100d568:	10800017 	ldw	r2,0(r2)
 100d56c:	10800417 	ldw	r2,16(r2)
 100d570:	10000626 	beq	r2,zero,100d58c <close+0x6c>
 100d574:	e0bffd17 	ldw	r2,-12(fp)
 100d578:	10800017 	ldw	r2,0(r2)
 100d57c:	10800417 	ldw	r2,16(r2)
 100d580:	e13ffd17 	ldw	r4,-12(fp)
 100d584:	103ee83a 	callr	r2
 100d588:	00000106 	br	100d590 <close+0x70>
 100d58c:	0005883a 	mov	r2,zero
 100d590:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100d594:	e13fff17 	ldw	r4,-4(fp)
 100d598:	100dd600 	call	100dd60 <alt_release_fd>
    if (rval < 0)
 100d59c:	e0bffe17 	ldw	r2,-8(fp)
 100d5a0:	1000070e 	bge	r2,zero,100d5c0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 100d5a4:	100d4e40 	call	100d4e4 <alt_get_errno>
 100d5a8:	1007883a 	mov	r3,r2
 100d5ac:	e0bffe17 	ldw	r2,-8(fp)
 100d5b0:	0085c83a 	sub	r2,zero,r2
 100d5b4:	18800015 	stw	r2,0(r3)
      return -1;
 100d5b8:	00bfffc4 	movi	r2,-1
 100d5bc:	00000706 	br	100d5dc <close+0xbc>
    }
    return 0;
 100d5c0:	0005883a 	mov	r2,zero
 100d5c4:	00000506 	br	100d5dc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d5c8:	100d4e40 	call	100d4e4 <alt_get_errno>
 100d5cc:	1007883a 	mov	r3,r2
 100d5d0:	00801444 	movi	r2,81
 100d5d4:	18800015 	stw	r2,0(r3)
    return -1;
 100d5d8:	00bfffc4 	movi	r2,-1
  }
}
 100d5dc:	e037883a 	mov	sp,fp
 100d5e0:	dfc00117 	ldw	ra,4(sp)
 100d5e4:	df000017 	ldw	fp,0(sp)
 100d5e8:	dec00204 	addi	sp,sp,8
 100d5ec:	f800283a 	ret

0100d5f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100d5f0:	defffc04 	addi	sp,sp,-16
 100d5f4:	df000315 	stw	fp,12(sp)
 100d5f8:	df000304 	addi	fp,sp,12
 100d5fc:	e13ffd15 	stw	r4,-12(fp)
 100d600:	e17ffe15 	stw	r5,-8(fp)
 100d604:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100d608:	e0bfff17 	ldw	r2,-4(fp)
}
 100d60c:	e037883a 	mov	sp,fp
 100d610:	df000017 	ldw	fp,0(sp)
 100d614:	dec00104 	addi	sp,sp,4
 100d618:	f800283a 	ret

0100d61c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d61c:	defffe04 	addi	sp,sp,-8
 100d620:	dfc00115 	stw	ra,4(sp)
 100d624:	df000015 	stw	fp,0(sp)
 100d628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d62c:	d0a00b17 	ldw	r2,-32724(gp)
 100d630:	10000326 	beq	r2,zero,100d640 <alt_get_errno+0x24>
 100d634:	d0a00b17 	ldw	r2,-32724(gp)
 100d638:	103ee83a 	callr	r2
 100d63c:	00000106 	br	100d644 <alt_get_errno+0x28>
 100d640:	d0a6d204 	addi	r2,gp,-25784
}
 100d644:	e037883a 	mov	sp,fp
 100d648:	dfc00117 	ldw	ra,4(sp)
 100d64c:	df000017 	ldw	fp,0(sp)
 100d650:	dec00204 	addi	sp,sp,8
 100d654:	f800283a 	ret

0100d658 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100d658:	defffb04 	addi	sp,sp,-20
 100d65c:	dfc00415 	stw	ra,16(sp)
 100d660:	df000315 	stw	fp,12(sp)
 100d664:	df000304 	addi	fp,sp,12
 100d668:	e13ffe15 	stw	r4,-8(fp)
 100d66c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d670:	e0bffe17 	ldw	r2,-8(fp)
 100d674:	10000616 	blt	r2,zero,100d690 <fstat+0x38>
 100d678:	e0bffe17 	ldw	r2,-8(fp)
 100d67c:	10c00324 	muli	r3,r2,12
 100d680:	00804074 	movhi	r2,257
 100d684:	10824504 	addi	r2,r2,2324
 100d688:	1885883a 	add	r2,r3,r2
 100d68c:	00000106 	br	100d694 <fstat+0x3c>
 100d690:	0005883a 	mov	r2,zero
 100d694:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 100d698:	e0bffd17 	ldw	r2,-12(fp)
 100d69c:	10001026 	beq	r2,zero,100d6e0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100d6a0:	e0bffd17 	ldw	r2,-12(fp)
 100d6a4:	10800017 	ldw	r2,0(r2)
 100d6a8:	10800817 	ldw	r2,32(r2)
 100d6ac:	10000726 	beq	r2,zero,100d6cc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 100d6b0:	e0bffd17 	ldw	r2,-12(fp)
 100d6b4:	10800017 	ldw	r2,0(r2)
 100d6b8:	10800817 	ldw	r2,32(r2)
 100d6bc:	e17fff17 	ldw	r5,-4(fp)
 100d6c0:	e13ffd17 	ldw	r4,-12(fp)
 100d6c4:	103ee83a 	callr	r2
 100d6c8:	00000a06 	br	100d6f4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100d6cc:	e0bfff17 	ldw	r2,-4(fp)
 100d6d0:	00c80004 	movi	r3,8192
 100d6d4:	10c00115 	stw	r3,4(r2)
      return 0;
 100d6d8:	0005883a 	mov	r2,zero
 100d6dc:	00000506 	br	100d6f4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d6e0:	100d61c0 	call	100d61c <alt_get_errno>
 100d6e4:	1007883a 	mov	r3,r2
 100d6e8:	00801444 	movi	r2,81
 100d6ec:	18800015 	stw	r2,0(r3)
    return -1;
 100d6f0:	00bfffc4 	movi	r2,-1
  }
}
 100d6f4:	e037883a 	mov	sp,fp
 100d6f8:	dfc00117 	ldw	ra,4(sp)
 100d6fc:	df000017 	ldw	fp,0(sp)
 100d700:	dec00204 	addi	sp,sp,8
 100d704:	f800283a 	ret

0100d708 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 100d708:	defff004 	addi	sp,sp,-64
 100d70c:	df000f15 	stw	fp,60(sp)
 100d710:	df000f04 	addi	fp,sp,60
 100d714:	e13ffd15 	stw	r4,-12(fp)
 100d718:	e17ffe15 	stw	r5,-8(fp)
 100d71c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 100d720:	00bffa84 	movi	r2,-22
 100d724:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100d728:	e0bffd17 	ldw	r2,-12(fp)
 100d72c:	10800828 	cmpgeui	r2,r2,32
 100d730:	1000501e 	bne	r2,zero,100d874 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d734:	0005303a 	rdctl	r2,status
 100d738:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d73c:	e0fff617 	ldw	r3,-40(fp)
 100d740:	00bfff84 	movi	r2,-2
 100d744:	1884703a 	and	r2,r3,r2
 100d748:	1001703a 	wrctl	status,r2
  
  return context;
 100d74c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 100d750:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 100d754:	00804234 	movhi	r2,264
 100d758:	108fa104 	addi	r2,r2,16004
 100d75c:	e0fffd17 	ldw	r3,-12(fp)
 100d760:	180690fa 	slli	r3,r3,3
 100d764:	10c5883a 	add	r2,r2,r3
 100d768:	e0ffff17 	ldw	r3,-4(fp)
 100d76c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 100d770:	00804234 	movhi	r2,264
 100d774:	108fa104 	addi	r2,r2,16004
 100d778:	e0fffd17 	ldw	r3,-12(fp)
 100d77c:	180690fa 	slli	r3,r3,3
 100d780:	10c5883a 	add	r2,r2,r3
 100d784:	10800104 	addi	r2,r2,4
 100d788:	e0fffe17 	ldw	r3,-8(fp)
 100d78c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 100d790:	e0bfff17 	ldw	r2,-4(fp)
 100d794:	10001926 	beq	r2,zero,100d7fc <alt_irq_register+0xf4>
 100d798:	e0bffd17 	ldw	r2,-12(fp)
 100d79c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d7a0:	0005303a 	rdctl	r2,status
 100d7a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d7a8:	e0fff717 	ldw	r3,-36(fp)
 100d7ac:	00bfff84 	movi	r2,-2
 100d7b0:	1884703a 	and	r2,r3,r2
 100d7b4:	1001703a 	wrctl	status,r2
  
  return context;
 100d7b8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100d7bc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 100d7c0:	00c00044 	movi	r3,1
 100d7c4:	e0bff217 	ldw	r2,-56(fp)
 100d7c8:	1884983a 	sll	r2,r3,r2
 100d7cc:	1007883a 	mov	r3,r2
 100d7d0:	d0a6d317 	ldw	r2,-25780(gp)
 100d7d4:	1884b03a 	or	r2,r3,r2
 100d7d8:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100d7dc:	d0a6d317 	ldw	r2,-25780(gp)
 100d7e0:	100170fa 	wrctl	ienable,r2
 100d7e4:	e0bff817 	ldw	r2,-32(fp)
 100d7e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d7ec:	e0bff917 	ldw	r2,-28(fp)
 100d7f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100d7f4:	0005883a 	mov	r2,zero
 100d7f8:	00001906 	br	100d860 <alt_irq_register+0x158>
 100d7fc:	e0bffd17 	ldw	r2,-12(fp)
 100d800:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d804:	0005303a 	rdctl	r2,status
 100d808:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d80c:	e0fffa17 	ldw	r3,-24(fp)
 100d810:	00bfff84 	movi	r2,-2
 100d814:	1884703a 	and	r2,r3,r2
 100d818:	1001703a 	wrctl	status,r2
  
  return context;
 100d81c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100d820:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 100d824:	00c00044 	movi	r3,1
 100d828:	e0bff417 	ldw	r2,-48(fp)
 100d82c:	1884983a 	sll	r2,r3,r2
 100d830:	0084303a 	nor	r2,zero,r2
 100d834:	1007883a 	mov	r3,r2
 100d838:	d0a6d317 	ldw	r2,-25780(gp)
 100d83c:	1884703a 	and	r2,r3,r2
 100d840:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100d844:	d0a6d317 	ldw	r2,-25780(gp)
 100d848:	100170fa 	wrctl	ienable,r2
 100d84c:	e0bffb17 	ldw	r2,-20(fp)
 100d850:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d854:	e0bffc17 	ldw	r2,-16(fp)
 100d858:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100d85c:	0005883a 	mov	r2,zero
 100d860:	e0bff115 	stw	r2,-60(fp)
 100d864:	e0bff317 	ldw	r2,-52(fp)
 100d868:	e0bff515 	stw	r2,-44(fp)
 100d86c:	e0bff517 	ldw	r2,-44(fp)
 100d870:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100d874:	e0bff117 	ldw	r2,-60(fp)
}
 100d878:	e037883a 	mov	sp,fp
 100d87c:	df000017 	ldw	fp,0(sp)
 100d880:	dec00104 	addi	sp,sp,4
 100d884:	f800283a 	ret

0100d888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d888:	defffe04 	addi	sp,sp,-8
 100d88c:	dfc00115 	stw	ra,4(sp)
 100d890:	df000015 	stw	fp,0(sp)
 100d894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d898:	d0a00b17 	ldw	r2,-32724(gp)
 100d89c:	10000326 	beq	r2,zero,100d8ac <alt_get_errno+0x24>
 100d8a0:	d0a00b17 	ldw	r2,-32724(gp)
 100d8a4:	103ee83a 	callr	r2
 100d8a8:	00000106 	br	100d8b0 <alt_get_errno+0x28>
 100d8ac:	d0a6d204 	addi	r2,gp,-25784
}
 100d8b0:	e037883a 	mov	sp,fp
 100d8b4:	dfc00117 	ldw	ra,4(sp)
 100d8b8:	df000017 	ldw	fp,0(sp)
 100d8bc:	dec00204 	addi	sp,sp,8
 100d8c0:	f800283a 	ret

0100d8c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100d8c4:	deffed04 	addi	sp,sp,-76
 100d8c8:	dfc01215 	stw	ra,72(sp)
 100d8cc:	df001115 	stw	fp,68(sp)
 100d8d0:	df001104 	addi	fp,sp,68
 100d8d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d8d8:	e0bfff17 	ldw	r2,-4(fp)
 100d8dc:	10000616 	blt	r2,zero,100d8f8 <isatty+0x34>
 100d8e0:	e0bfff17 	ldw	r2,-4(fp)
 100d8e4:	10c00324 	muli	r3,r2,12
 100d8e8:	00804074 	movhi	r2,257
 100d8ec:	10824504 	addi	r2,r2,2324
 100d8f0:	1885883a 	add	r2,r3,r2
 100d8f4:	00000106 	br	100d8fc <isatty+0x38>
 100d8f8:	0005883a 	mov	r2,zero
 100d8fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 100d900:	e0bfef17 	ldw	r2,-68(fp)
 100d904:	10000e26 	beq	r2,zero,100d940 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100d908:	e0bfef17 	ldw	r2,-68(fp)
 100d90c:	10800017 	ldw	r2,0(r2)
 100d910:	10800817 	ldw	r2,32(r2)
 100d914:	1000021e 	bne	r2,zero,100d920 <isatty+0x5c>
    {
      return 1;
 100d918:	00800044 	movi	r2,1
 100d91c:	00000d06 	br	100d954 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100d920:	e0bff004 	addi	r2,fp,-64
 100d924:	100b883a 	mov	r5,r2
 100d928:	e13fff17 	ldw	r4,-4(fp)
 100d92c:	100d6580 	call	100d658 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100d930:	e0bff117 	ldw	r2,-60(fp)
 100d934:	10880020 	cmpeqi	r2,r2,8192
 100d938:	10803fcc 	andi	r2,r2,255
 100d93c:	00000506 	br	100d954 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d940:	100d8880 	call	100d888 <alt_get_errno>
 100d944:	1007883a 	mov	r3,r2
 100d948:	00801444 	movi	r2,81
 100d94c:	18800015 	stw	r2,0(r3)
    return 0;
 100d950:	0005883a 	mov	r2,zero
  }
}
 100d954:	e037883a 	mov	sp,fp
 100d958:	dfc00117 	ldw	ra,4(sp)
 100d95c:	df000017 	ldw	fp,0(sp)
 100d960:	dec00204 	addi	sp,sp,8
 100d964:	f800283a 	ret

0100d968 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100d968:	defffc04 	addi	sp,sp,-16
 100d96c:	df000315 	stw	fp,12(sp)
 100d970:	df000304 	addi	fp,sp,12
 100d974:	e13ffd15 	stw	r4,-12(fp)
 100d978:	e17ffe15 	stw	r5,-8(fp)
 100d97c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100d980:	e0fffe17 	ldw	r3,-8(fp)
 100d984:	e0bffd17 	ldw	r2,-12(fp)
 100d988:	18800c26 	beq	r3,r2,100d9bc <alt_load_section+0x54>
  {
    while( to != end )
 100d98c:	00000806 	br	100d9b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 100d990:	e0bffe17 	ldw	r2,-8(fp)
 100d994:	10c00104 	addi	r3,r2,4
 100d998:	e0fffe15 	stw	r3,-8(fp)
 100d99c:	e0fffd17 	ldw	r3,-12(fp)
 100d9a0:	19000104 	addi	r4,r3,4
 100d9a4:	e13ffd15 	stw	r4,-12(fp)
 100d9a8:	18c00017 	ldw	r3,0(r3)
 100d9ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100d9b0:	e0fffe17 	ldw	r3,-8(fp)
 100d9b4:	e0bfff17 	ldw	r2,-4(fp)
 100d9b8:	18bff51e 	bne	r3,r2,100d990 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100d9bc:	0001883a 	nop
 100d9c0:	e037883a 	mov	sp,fp
 100d9c4:	df000017 	ldw	fp,0(sp)
 100d9c8:	dec00104 	addi	sp,sp,4
 100d9cc:	f800283a 	ret

0100d9d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100d9d0:	defffe04 	addi	sp,sp,-8
 100d9d4:	dfc00115 	stw	ra,4(sp)
 100d9d8:	df000015 	stw	fp,0(sp)
 100d9dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100d9e0:	01804074 	movhi	r6,257
 100d9e4:	3186cd04 	addi	r6,r6,6964
 100d9e8:	01404074 	movhi	r5,257
 100d9ec:	29401204 	addi	r5,r5,72
 100d9f0:	01004074 	movhi	r4,257
 100d9f4:	2106cd04 	addi	r4,r4,6964
 100d9f8:	100d9680 	call	100d968 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100d9fc:	01804034 	movhi	r6,256
 100da00:	31809104 	addi	r6,r6,580
 100da04:	01404034 	movhi	r5,256
 100da08:	29400804 	addi	r5,r5,32
 100da0c:	01004034 	movhi	r4,256
 100da10:	21000804 	addi	r4,r4,32
 100da14:	100d9680 	call	100d968 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100da18:	01804074 	movhi	r6,257
 100da1c:	31801204 	addi	r6,r6,72
 100da20:	01404074 	movhi	r5,257
 100da24:	297f4204 	addi	r5,r5,-760
 100da28:	01004074 	movhi	r4,257
 100da2c:	213f4204 	addi	r4,r4,-760
 100da30:	100d9680 	call	100d968 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100da34:	100ebf40 	call	100ebf4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100da38:	100eddc0 	call	100eddc <alt_icache_flush_all>
}
 100da3c:	0001883a 	nop
 100da40:	e037883a 	mov	sp,fp
 100da44:	dfc00117 	ldw	ra,4(sp)
 100da48:	df000017 	ldw	fp,0(sp)
 100da4c:	dec00204 	addi	sp,sp,8
 100da50:	f800283a 	ret

0100da54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100da54:	defffe04 	addi	sp,sp,-8
 100da58:	dfc00115 	stw	ra,4(sp)
 100da5c:	df000015 	stw	fp,0(sp)
 100da60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100da64:	d0a00b17 	ldw	r2,-32724(gp)
 100da68:	10000326 	beq	r2,zero,100da78 <alt_get_errno+0x24>
 100da6c:	d0a00b17 	ldw	r2,-32724(gp)
 100da70:	103ee83a 	callr	r2
 100da74:	00000106 	br	100da7c <alt_get_errno+0x28>
 100da78:	d0a6d204 	addi	r2,gp,-25784
}
 100da7c:	e037883a 	mov	sp,fp
 100da80:	dfc00117 	ldw	ra,4(sp)
 100da84:	df000017 	ldw	fp,0(sp)
 100da88:	dec00204 	addi	sp,sp,8
 100da8c:	f800283a 	ret

0100da90 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100da90:	defff904 	addi	sp,sp,-28
 100da94:	dfc00615 	stw	ra,24(sp)
 100da98:	df000515 	stw	fp,20(sp)
 100da9c:	df000504 	addi	fp,sp,20
 100daa0:	e13ffd15 	stw	r4,-12(fp)
 100daa4:	e17ffe15 	stw	r5,-8(fp)
 100daa8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100daac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100dab0:	e0bffd17 	ldw	r2,-12(fp)
 100dab4:	10000616 	blt	r2,zero,100dad0 <lseek+0x40>
 100dab8:	e0bffd17 	ldw	r2,-12(fp)
 100dabc:	10c00324 	muli	r3,r2,12
 100dac0:	00804074 	movhi	r2,257
 100dac4:	10824504 	addi	r2,r2,2324
 100dac8:	1885883a 	add	r2,r3,r2
 100dacc:	00000106 	br	100dad4 <lseek+0x44>
 100dad0:	0005883a 	mov	r2,zero
 100dad4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 100dad8:	e0bffc17 	ldw	r2,-16(fp)
 100dadc:	10001026 	beq	r2,zero,100db20 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100dae0:	e0bffc17 	ldw	r2,-16(fp)
 100dae4:	10800017 	ldw	r2,0(r2)
 100dae8:	10800717 	ldw	r2,28(r2)
 100daec:	10000926 	beq	r2,zero,100db14 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100daf0:	e0bffc17 	ldw	r2,-16(fp)
 100daf4:	10800017 	ldw	r2,0(r2)
 100daf8:	10800717 	ldw	r2,28(r2)
 100dafc:	e1bfff17 	ldw	r6,-4(fp)
 100db00:	e17ffe17 	ldw	r5,-8(fp)
 100db04:	e13ffc17 	ldw	r4,-16(fp)
 100db08:	103ee83a 	callr	r2
 100db0c:	e0bffb15 	stw	r2,-20(fp)
 100db10:	00000506 	br	100db28 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100db14:	00bfde84 	movi	r2,-134
 100db18:	e0bffb15 	stw	r2,-20(fp)
 100db1c:	00000206 	br	100db28 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 100db20:	00bfebc4 	movi	r2,-81
 100db24:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 100db28:	e0bffb17 	ldw	r2,-20(fp)
 100db2c:	1000070e 	bge	r2,zero,100db4c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 100db30:	100da540 	call	100da54 <alt_get_errno>
 100db34:	1007883a 	mov	r3,r2
 100db38:	e0bffb17 	ldw	r2,-20(fp)
 100db3c:	0085c83a 	sub	r2,zero,r2
 100db40:	18800015 	stw	r2,0(r3)
    rc = -1;
 100db44:	00bfffc4 	movi	r2,-1
 100db48:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 100db4c:	e0bffb17 	ldw	r2,-20(fp)
}
 100db50:	e037883a 	mov	sp,fp
 100db54:	dfc00117 	ldw	ra,4(sp)
 100db58:	df000017 	ldw	fp,0(sp)
 100db5c:	dec00204 	addi	sp,sp,8
 100db60:	f800283a 	ret

0100db64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100db64:	defffd04 	addi	sp,sp,-12
 100db68:	dfc00215 	stw	ra,8(sp)
 100db6c:	df000115 	stw	fp,4(sp)
 100db70:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100db74:	0009883a 	mov	r4,zero
 100db78:	100dfdc0 	call	100dfdc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100db7c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100db80:	100e0140 	call	100e014 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100db84:	01804074 	movhi	r6,257
 100db88:	31800a04 	addi	r6,r6,40
 100db8c:	01404074 	movhi	r5,257
 100db90:	29400a04 	addi	r5,r5,40
 100db94:	01004074 	movhi	r4,257
 100db98:	21000a04 	addi	r4,r4,40
 100db9c:	100f1740 	call	100f174 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100dba0:	100ed1c0 	call	100ed1c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100dba4:	01004074 	movhi	r4,257
 100dba8:	213b5f04 	addi	r4,r4,-4740
 100dbac:	100f9740 	call	100f974 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100dbb0:	d0a6d417 	ldw	r2,-25776(gp)
 100dbb4:	d0e6d517 	ldw	r3,-25772(gp)
 100dbb8:	d126d617 	ldw	r4,-25768(gp)
 100dbbc:	200d883a 	mov	r6,r4
 100dbc0:	180b883a 	mov	r5,r3
 100dbc4:	1009883a 	mov	r4,r2
 100dbc8:	1000ad80 	call	1000ad8 <main>
 100dbcc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100dbd0:	01000044 	movi	r4,1
 100dbd4:	100d5200 	call	100d520 <close>
  exit (result);
 100dbd8:	e13fff17 	ldw	r4,-4(fp)
 100dbdc:	100f9880 	call	100f988 <exit>

0100dbe0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100dbe0:	defffe04 	addi	sp,sp,-8
 100dbe4:	df000115 	stw	fp,4(sp)
 100dbe8:	df000104 	addi	fp,sp,4
 100dbec:	e13fff15 	stw	r4,-4(fp)
}
 100dbf0:	0001883a 	nop
 100dbf4:	e037883a 	mov	sp,fp
 100dbf8:	df000017 	ldw	fp,0(sp)
 100dbfc:	dec00104 	addi	sp,sp,4
 100dc00:	f800283a 	ret

0100dc04 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100dc04:	defffe04 	addi	sp,sp,-8
 100dc08:	df000115 	stw	fp,4(sp)
 100dc0c:	df000104 	addi	fp,sp,4
 100dc10:	e13fff15 	stw	r4,-4(fp)
}
 100dc14:	0001883a 	nop
 100dc18:	e037883a 	mov	sp,fp
 100dc1c:	df000017 	ldw	fp,0(sp)
 100dc20:	dec00104 	addi	sp,sp,4
 100dc24:	f800283a 	ret

0100dc28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100dc28:	defffe04 	addi	sp,sp,-8
 100dc2c:	dfc00115 	stw	ra,4(sp)
 100dc30:	df000015 	stw	fp,0(sp)
 100dc34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100dc38:	d0a00b17 	ldw	r2,-32724(gp)
 100dc3c:	10000326 	beq	r2,zero,100dc4c <alt_get_errno+0x24>
 100dc40:	d0a00b17 	ldw	r2,-32724(gp)
 100dc44:	103ee83a 	callr	r2
 100dc48:	00000106 	br	100dc50 <alt_get_errno+0x28>
 100dc4c:	d0a6d204 	addi	r2,gp,-25784
}
 100dc50:	e037883a 	mov	sp,fp
 100dc54:	dfc00117 	ldw	ra,4(sp)
 100dc58:	df000017 	ldw	fp,0(sp)
 100dc5c:	dec00204 	addi	sp,sp,8
 100dc60:	f800283a 	ret

0100dc64 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100dc64:	defff904 	addi	sp,sp,-28
 100dc68:	dfc00615 	stw	ra,24(sp)
 100dc6c:	df000515 	stw	fp,20(sp)
 100dc70:	df000504 	addi	fp,sp,20
 100dc74:	e13ffd15 	stw	r4,-12(fp)
 100dc78:	e17ffe15 	stw	r5,-8(fp)
 100dc7c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100dc80:	e0bffd17 	ldw	r2,-12(fp)
 100dc84:	10000616 	blt	r2,zero,100dca0 <read+0x3c>
 100dc88:	e0bffd17 	ldw	r2,-12(fp)
 100dc8c:	10c00324 	muli	r3,r2,12
 100dc90:	00804074 	movhi	r2,257
 100dc94:	10824504 	addi	r2,r2,2324
 100dc98:	1885883a 	add	r2,r3,r2
 100dc9c:	00000106 	br	100dca4 <read+0x40>
 100dca0:	0005883a 	mov	r2,zero
 100dca4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100dca8:	e0bffb17 	ldw	r2,-20(fp)
 100dcac:	10002226 	beq	r2,zero,100dd38 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100dcb0:	e0bffb17 	ldw	r2,-20(fp)
 100dcb4:	10800217 	ldw	r2,8(r2)
 100dcb8:	108000cc 	andi	r2,r2,3
 100dcbc:	10800060 	cmpeqi	r2,r2,1
 100dcc0:	1000181e 	bne	r2,zero,100dd24 <read+0xc0>
        (fd->dev->read))
 100dcc4:	e0bffb17 	ldw	r2,-20(fp)
 100dcc8:	10800017 	ldw	r2,0(r2)
 100dccc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100dcd0:	10001426 	beq	r2,zero,100dd24 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100dcd4:	e0bffb17 	ldw	r2,-20(fp)
 100dcd8:	10800017 	ldw	r2,0(r2)
 100dcdc:	10800517 	ldw	r2,20(r2)
 100dce0:	e0ffff17 	ldw	r3,-4(fp)
 100dce4:	180d883a 	mov	r6,r3
 100dce8:	e17ffe17 	ldw	r5,-8(fp)
 100dcec:	e13ffb17 	ldw	r4,-20(fp)
 100dcf0:	103ee83a 	callr	r2
 100dcf4:	e0bffc15 	stw	r2,-16(fp)
 100dcf8:	e0bffc17 	ldw	r2,-16(fp)
 100dcfc:	1000070e 	bge	r2,zero,100dd1c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 100dd00:	100dc280 	call	100dc28 <alt_get_errno>
 100dd04:	1007883a 	mov	r3,r2
 100dd08:	e0bffc17 	ldw	r2,-16(fp)
 100dd0c:	0085c83a 	sub	r2,zero,r2
 100dd10:	18800015 	stw	r2,0(r3)
          return -1;
 100dd14:	00bfffc4 	movi	r2,-1
 100dd18:	00000c06 	br	100dd4c <read+0xe8>
        }
        return rval;
 100dd1c:	e0bffc17 	ldw	r2,-16(fp)
 100dd20:	00000a06 	br	100dd4c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100dd24:	100dc280 	call	100dc28 <alt_get_errno>
 100dd28:	1007883a 	mov	r3,r2
 100dd2c:	00800344 	movi	r2,13
 100dd30:	18800015 	stw	r2,0(r3)
 100dd34:	00000406 	br	100dd48 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100dd38:	100dc280 	call	100dc28 <alt_get_errno>
 100dd3c:	1007883a 	mov	r3,r2
 100dd40:	00801444 	movi	r2,81
 100dd44:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100dd48:	00bfffc4 	movi	r2,-1
}
 100dd4c:	e037883a 	mov	sp,fp
 100dd50:	dfc00117 	ldw	ra,4(sp)
 100dd54:	df000017 	ldw	fp,0(sp)
 100dd58:	dec00204 	addi	sp,sp,8
 100dd5c:	f800283a 	ret

0100dd60 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100dd60:	defffe04 	addi	sp,sp,-8
 100dd64:	df000115 	stw	fp,4(sp)
 100dd68:	df000104 	addi	fp,sp,4
 100dd6c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100dd70:	e0bfff17 	ldw	r2,-4(fp)
 100dd74:	108000d0 	cmplti	r2,r2,3
 100dd78:	10000d1e 	bne	r2,zero,100ddb0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100dd7c:	00804074 	movhi	r2,257
 100dd80:	10824504 	addi	r2,r2,2324
 100dd84:	e0ffff17 	ldw	r3,-4(fp)
 100dd88:	18c00324 	muli	r3,r3,12
 100dd8c:	10c5883a 	add	r2,r2,r3
 100dd90:	10800204 	addi	r2,r2,8
 100dd94:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100dd98:	00804074 	movhi	r2,257
 100dd9c:	10824504 	addi	r2,r2,2324
 100dda0:	e0ffff17 	ldw	r3,-4(fp)
 100dda4:	18c00324 	muli	r3,r3,12
 100dda8:	10c5883a 	add	r2,r2,r3
 100ddac:	10000015 	stw	zero,0(r2)
  }
}
 100ddb0:	0001883a 	nop
 100ddb4:	e037883a 	mov	sp,fp
 100ddb8:	df000017 	ldw	fp,0(sp)
 100ddbc:	dec00104 	addi	sp,sp,4
 100ddc0:	f800283a 	ret

0100ddc4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100ddc4:	defff904 	addi	sp,sp,-28
 100ddc8:	df000615 	stw	fp,24(sp)
 100ddcc:	df000604 	addi	fp,sp,24
 100ddd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ddd4:	0005303a 	rdctl	r2,status
 100ddd8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100dddc:	e0fffe17 	ldw	r3,-8(fp)
 100dde0:	00bfff84 	movi	r2,-2
 100dde4:	1884703a 	and	r2,r3,r2
 100dde8:	1001703a 	wrctl	status,r2
  
  return context;
 100ddec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100ddf0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100ddf4:	d0a00d17 	ldw	r2,-32716(gp)
 100ddf8:	10c000c4 	addi	r3,r2,3
 100ddfc:	00bfff04 	movi	r2,-4
 100de00:	1884703a 	and	r2,r3,r2
 100de04:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100de08:	d0e00d17 	ldw	r3,-32716(gp)
 100de0c:	e0bfff17 	ldw	r2,-4(fp)
 100de10:	1887883a 	add	r3,r3,r2
 100de14:	00808034 	movhi	r2,512
 100de18:	10800004 	addi	r2,r2,0
 100de1c:	10c0062e 	bgeu	r2,r3,100de38 <sbrk+0x74>
 100de20:	e0bffb17 	ldw	r2,-20(fp)
 100de24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100de28:	e0bffa17 	ldw	r2,-24(fp)
 100de2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100de30:	00bfffc4 	movi	r2,-1
 100de34:	00000b06 	br	100de64 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 100de38:	d0a00d17 	ldw	r2,-32716(gp)
 100de3c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 100de40:	d0e00d17 	ldw	r3,-32716(gp)
 100de44:	e0bfff17 	ldw	r2,-4(fp)
 100de48:	1885883a 	add	r2,r3,r2
 100de4c:	d0a00d15 	stw	r2,-32716(gp)
 100de50:	e0bffb17 	ldw	r2,-20(fp)
 100de54:	e0bffc15 	stw	r2,-16(fp)
 100de58:	e0bffc17 	ldw	r2,-16(fp)
 100de5c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100de60:	e0bffd17 	ldw	r2,-12(fp)
} 
 100de64:	e037883a 	mov	sp,fp
 100de68:	df000017 	ldw	fp,0(sp)
 100de6c:	dec00104 	addi	sp,sp,4
 100de70:	f800283a 	ret

0100de74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100de74:	defffe04 	addi	sp,sp,-8
 100de78:	dfc00115 	stw	ra,4(sp)
 100de7c:	df000015 	stw	fp,0(sp)
 100de80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100de84:	d0a00b17 	ldw	r2,-32724(gp)
 100de88:	10000326 	beq	r2,zero,100de98 <alt_get_errno+0x24>
 100de8c:	d0a00b17 	ldw	r2,-32724(gp)
 100de90:	103ee83a 	callr	r2
 100de94:	00000106 	br	100de9c <alt_get_errno+0x28>
 100de98:	d0a6d204 	addi	r2,gp,-25784
}
 100de9c:	e037883a 	mov	sp,fp
 100dea0:	dfc00117 	ldw	ra,4(sp)
 100dea4:	df000017 	ldw	fp,0(sp)
 100dea8:	dec00204 	addi	sp,sp,8
 100deac:	f800283a 	ret

0100deb0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100deb0:	defff904 	addi	sp,sp,-28
 100deb4:	dfc00615 	stw	ra,24(sp)
 100deb8:	df000515 	stw	fp,20(sp)
 100debc:	df000504 	addi	fp,sp,20
 100dec0:	e13ffd15 	stw	r4,-12(fp)
 100dec4:	e17ffe15 	stw	r5,-8(fp)
 100dec8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100decc:	e0bffd17 	ldw	r2,-12(fp)
 100ded0:	10000616 	blt	r2,zero,100deec <write+0x3c>
 100ded4:	e0bffd17 	ldw	r2,-12(fp)
 100ded8:	10c00324 	muli	r3,r2,12
 100dedc:	00804074 	movhi	r2,257
 100dee0:	10824504 	addi	r2,r2,2324
 100dee4:	1885883a 	add	r2,r3,r2
 100dee8:	00000106 	br	100def0 <write+0x40>
 100deec:	0005883a 	mov	r2,zero
 100def0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100def4:	e0bffb17 	ldw	r2,-20(fp)
 100def8:	10002126 	beq	r2,zero,100df80 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100defc:	e0bffb17 	ldw	r2,-20(fp)
 100df00:	10800217 	ldw	r2,8(r2)
 100df04:	108000cc 	andi	r2,r2,3
 100df08:	10001826 	beq	r2,zero,100df6c <write+0xbc>
 100df0c:	e0bffb17 	ldw	r2,-20(fp)
 100df10:	10800017 	ldw	r2,0(r2)
 100df14:	10800617 	ldw	r2,24(r2)
 100df18:	10001426 	beq	r2,zero,100df6c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100df1c:	e0bffb17 	ldw	r2,-20(fp)
 100df20:	10800017 	ldw	r2,0(r2)
 100df24:	10800617 	ldw	r2,24(r2)
 100df28:	e0ffff17 	ldw	r3,-4(fp)
 100df2c:	180d883a 	mov	r6,r3
 100df30:	e17ffe17 	ldw	r5,-8(fp)
 100df34:	e13ffb17 	ldw	r4,-20(fp)
 100df38:	103ee83a 	callr	r2
 100df3c:	e0bffc15 	stw	r2,-16(fp)
 100df40:	e0bffc17 	ldw	r2,-16(fp)
 100df44:	1000070e 	bge	r2,zero,100df64 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 100df48:	100de740 	call	100de74 <alt_get_errno>
 100df4c:	1007883a 	mov	r3,r2
 100df50:	e0bffc17 	ldw	r2,-16(fp)
 100df54:	0085c83a 	sub	r2,zero,r2
 100df58:	18800015 	stw	r2,0(r3)
        return -1;
 100df5c:	00bfffc4 	movi	r2,-1
 100df60:	00000c06 	br	100df94 <write+0xe4>
      }
      return rval;
 100df64:	e0bffc17 	ldw	r2,-16(fp)
 100df68:	00000a06 	br	100df94 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100df6c:	100de740 	call	100de74 <alt_get_errno>
 100df70:	1007883a 	mov	r3,r2
 100df74:	00800344 	movi	r2,13
 100df78:	18800015 	stw	r2,0(r3)
 100df7c:	00000406 	br	100df90 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100df80:	100de740 	call	100de74 <alt_get_errno>
 100df84:	1007883a 	mov	r3,r2
 100df88:	00801444 	movi	r2,81
 100df8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100df90:	00bfffc4 	movi	r2,-1
}
 100df94:	e037883a 	mov	sp,fp
 100df98:	dfc00117 	ldw	ra,4(sp)
 100df9c:	df000017 	ldw	fp,0(sp)
 100dfa0:	dec00204 	addi	sp,sp,8
 100dfa4:	f800283a 	ret

0100dfa8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100dfa8:	defffd04 	addi	sp,sp,-12
 100dfac:	dfc00215 	stw	ra,8(sp)
 100dfb0:	df000115 	stw	fp,4(sp)
 100dfb4:	df000104 	addi	fp,sp,4
 100dfb8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100dfbc:	d1600804 	addi	r5,gp,-32736
 100dfc0:	e13fff17 	ldw	r4,-4(fp)
 100dfc4:	100ec780 	call	100ec78 <alt_dev_llist_insert>
}
 100dfc8:	e037883a 	mov	sp,fp
 100dfcc:	dfc00117 	ldw	ra,4(sp)
 100dfd0:	df000017 	ldw	fp,0(sp)
 100dfd4:	dec00204 	addi	sp,sp,8
 100dfd8:	f800283a 	ret

0100dfdc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100dfdc:	defffd04 	addi	sp,sp,-12
 100dfe0:	dfc00215 	stw	ra,8(sp)
 100dfe4:	df000115 	stw	fp,4(sp)
 100dfe8:	df000104 	addi	fp,sp,4
 100dfec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 100dff0:	100f5e80 	call	100f5e8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100dff4:	00800044 	movi	r2,1
 100dff8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100dffc:	0001883a 	nop
 100e000:	e037883a 	mov	sp,fp
 100e004:	dfc00117 	ldw	ra,4(sp)
 100e008:	df000017 	ldw	fp,0(sp)
 100e00c:	dec00204 	addi	sp,sp,8
 100e010:	f800283a 	ret

0100e014 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100e014:	defffe04 	addi	sp,sp,-8
 100e018:	dfc00115 	stw	ra,4(sp)
 100e01c:	df000015 	stw	fp,0(sp)
 100e020:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 100e024:	000d883a 	mov	r6,zero
 100e028:	000b883a 	mov	r5,zero
 100e02c:	01004074 	movhi	r4,257
 100e030:	2102af04 	addi	r4,r4,2748
 100e034:	100e1c40 	call	100e1c4 <altera_avalon_jtag_uart_init>
 100e038:	01004074 	movhi	r4,257
 100e03c:	2102a504 	addi	r4,r4,2708
 100e040:	100dfa80 	call	100dfa8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 100e044:	0001883a 	nop
}
 100e048:	0001883a 	nop
 100e04c:	e037883a 	mov	sp,fp
 100e050:	dfc00117 	ldw	ra,4(sp)
 100e054:	df000017 	ldw	fp,0(sp)
 100e058:	dec00204 	addi	sp,sp,8
 100e05c:	f800283a 	ret

0100e060 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100e060:	defffa04 	addi	sp,sp,-24
 100e064:	dfc00515 	stw	ra,20(sp)
 100e068:	df000415 	stw	fp,16(sp)
 100e06c:	df000404 	addi	fp,sp,16
 100e070:	e13ffd15 	stw	r4,-12(fp)
 100e074:	e17ffe15 	stw	r5,-8(fp)
 100e078:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100e07c:	e0bffd17 	ldw	r2,-12(fp)
 100e080:	10800017 	ldw	r2,0(r2)
 100e084:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100e088:	e0bffc17 	ldw	r2,-16(fp)
 100e08c:	10c00a04 	addi	r3,r2,40
 100e090:	e0bffd17 	ldw	r2,-12(fp)
 100e094:	10800217 	ldw	r2,8(r2)
 100e098:	100f883a 	mov	r7,r2
 100e09c:	e1bfff17 	ldw	r6,-4(fp)
 100e0a0:	e17ffe17 	ldw	r5,-8(fp)
 100e0a4:	1809883a 	mov	r4,r3
 100e0a8:	100e6880 	call	100e688 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100e0ac:	e037883a 	mov	sp,fp
 100e0b0:	dfc00117 	ldw	ra,4(sp)
 100e0b4:	df000017 	ldw	fp,0(sp)
 100e0b8:	dec00204 	addi	sp,sp,8
 100e0bc:	f800283a 	ret

0100e0c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100e0c0:	defffa04 	addi	sp,sp,-24
 100e0c4:	dfc00515 	stw	ra,20(sp)
 100e0c8:	df000415 	stw	fp,16(sp)
 100e0cc:	df000404 	addi	fp,sp,16
 100e0d0:	e13ffd15 	stw	r4,-12(fp)
 100e0d4:	e17ffe15 	stw	r5,-8(fp)
 100e0d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100e0dc:	e0bffd17 	ldw	r2,-12(fp)
 100e0e0:	10800017 	ldw	r2,0(r2)
 100e0e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100e0e8:	e0bffc17 	ldw	r2,-16(fp)
 100e0ec:	10c00a04 	addi	r3,r2,40
 100e0f0:	e0bffd17 	ldw	r2,-12(fp)
 100e0f4:	10800217 	ldw	r2,8(r2)
 100e0f8:	100f883a 	mov	r7,r2
 100e0fc:	e1bfff17 	ldw	r6,-4(fp)
 100e100:	e17ffe17 	ldw	r5,-8(fp)
 100e104:	1809883a 	mov	r4,r3
 100e108:	100e8a40 	call	100e8a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100e10c:	e037883a 	mov	sp,fp
 100e110:	dfc00117 	ldw	ra,4(sp)
 100e114:	df000017 	ldw	fp,0(sp)
 100e118:	dec00204 	addi	sp,sp,8
 100e11c:	f800283a 	ret

0100e120 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100e120:	defffc04 	addi	sp,sp,-16
 100e124:	dfc00315 	stw	ra,12(sp)
 100e128:	df000215 	stw	fp,8(sp)
 100e12c:	df000204 	addi	fp,sp,8
 100e130:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100e134:	e0bfff17 	ldw	r2,-4(fp)
 100e138:	10800017 	ldw	r2,0(r2)
 100e13c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100e140:	e0bffe17 	ldw	r2,-8(fp)
 100e144:	10c00a04 	addi	r3,r2,40
 100e148:	e0bfff17 	ldw	r2,-4(fp)
 100e14c:	10800217 	ldw	r2,8(r2)
 100e150:	100b883a 	mov	r5,r2
 100e154:	1809883a 	mov	r4,r3
 100e158:	100e5300 	call	100e530 <altera_avalon_jtag_uart_close>
}
 100e15c:	e037883a 	mov	sp,fp
 100e160:	dfc00117 	ldw	ra,4(sp)
 100e164:	df000017 	ldw	fp,0(sp)
 100e168:	dec00204 	addi	sp,sp,8
 100e16c:	f800283a 	ret

0100e170 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100e170:	defffa04 	addi	sp,sp,-24
 100e174:	dfc00515 	stw	ra,20(sp)
 100e178:	df000415 	stw	fp,16(sp)
 100e17c:	df000404 	addi	fp,sp,16
 100e180:	e13ffd15 	stw	r4,-12(fp)
 100e184:	e17ffe15 	stw	r5,-8(fp)
 100e188:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100e18c:	e0bffd17 	ldw	r2,-12(fp)
 100e190:	10800017 	ldw	r2,0(r2)
 100e194:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100e198:	e0bffc17 	ldw	r2,-16(fp)
 100e19c:	10800a04 	addi	r2,r2,40
 100e1a0:	e1bfff17 	ldw	r6,-4(fp)
 100e1a4:	e17ffe17 	ldw	r5,-8(fp)
 100e1a8:	1009883a 	mov	r4,r2
 100e1ac:	100e5980 	call	100e598 <altera_avalon_jtag_uart_ioctl>
}
 100e1b0:	e037883a 	mov	sp,fp
 100e1b4:	dfc00117 	ldw	ra,4(sp)
 100e1b8:	df000017 	ldw	fp,0(sp)
 100e1bc:	dec00204 	addi	sp,sp,8
 100e1c0:	f800283a 	ret

0100e1c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100e1c4:	defffa04 	addi	sp,sp,-24
 100e1c8:	dfc00515 	stw	ra,20(sp)
 100e1cc:	df000415 	stw	fp,16(sp)
 100e1d0:	df000404 	addi	fp,sp,16
 100e1d4:	e13ffd15 	stw	r4,-12(fp)
 100e1d8:	e17ffe15 	stw	r5,-8(fp)
 100e1dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100e1e0:	e0bffd17 	ldw	r2,-12(fp)
 100e1e4:	00c00044 	movi	r3,1
 100e1e8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100e1ec:	e0bffd17 	ldw	r2,-12(fp)
 100e1f0:	10800017 	ldw	r2,0(r2)
 100e1f4:	10800104 	addi	r2,r2,4
 100e1f8:	1007883a 	mov	r3,r2
 100e1fc:	e0bffd17 	ldw	r2,-12(fp)
 100e200:	10800817 	ldw	r2,32(r2)
 100e204:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100e208:	e0bffe17 	ldw	r2,-8(fp)
 100e20c:	e0ffff17 	ldw	r3,-4(fp)
 100e210:	d8000015 	stw	zero,0(sp)
 100e214:	e1fffd17 	ldw	r7,-12(fp)
 100e218:	01804074 	movhi	r6,257
 100e21c:	31b8a104 	addi	r6,r6,-7548
 100e220:	180b883a 	mov	r5,r3
 100e224:	1009883a 	mov	r4,r2
 100e228:	100ee100 	call	100ee10 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100e22c:	e0bffd17 	ldw	r2,-12(fp)
 100e230:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100e234:	e0bffd17 	ldw	r2,-12(fp)
 100e238:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100e23c:	d0e6d717 	ldw	r3,-25764(gp)
 100e240:	e1fffd17 	ldw	r7,-12(fp)
 100e244:	01804074 	movhi	r6,257
 100e248:	31b92404 	addi	r6,r6,-7024
 100e24c:	180b883a 	mov	r5,r3
 100e250:	1009883a 	mov	r4,r2
 100e254:	100eac80 	call	100eac8 <alt_alarm_start>
 100e258:	1000040e 	bge	r2,zero,100e26c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100e25c:	e0fffd17 	ldw	r3,-12(fp)
 100e260:	00a00034 	movhi	r2,32768
 100e264:	10bfffc4 	addi	r2,r2,-1
 100e268:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100e26c:	0001883a 	nop
 100e270:	e037883a 	mov	sp,fp
 100e274:	dfc00117 	ldw	ra,4(sp)
 100e278:	df000017 	ldw	fp,0(sp)
 100e27c:	dec00204 	addi	sp,sp,8
 100e280:	f800283a 	ret

0100e284 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100e284:	defff804 	addi	sp,sp,-32
 100e288:	df000715 	stw	fp,28(sp)
 100e28c:	df000704 	addi	fp,sp,28
 100e290:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100e294:	e0bfff17 	ldw	r2,-4(fp)
 100e298:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 100e29c:	e0bffb17 	ldw	r2,-20(fp)
 100e2a0:	10800017 	ldw	r2,0(r2)
 100e2a4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100e2a8:	e0bffc17 	ldw	r2,-16(fp)
 100e2ac:	10800104 	addi	r2,r2,4
 100e2b0:	10800037 	ldwio	r2,0(r2)
 100e2b4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100e2b8:	e0bffd17 	ldw	r2,-12(fp)
 100e2bc:	1080c00c 	andi	r2,r2,768
 100e2c0:	10006d26 	beq	r2,zero,100e478 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100e2c4:	e0bffd17 	ldw	r2,-12(fp)
 100e2c8:	1080400c 	andi	r2,r2,256
 100e2cc:	10003526 	beq	r2,zero,100e3a4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100e2d0:	00800074 	movhi	r2,1
 100e2d4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e2d8:	e0bffb17 	ldw	r2,-20(fp)
 100e2dc:	10800a17 	ldw	r2,40(r2)
 100e2e0:	10800044 	addi	r2,r2,1
 100e2e4:	1081ffcc 	andi	r2,r2,2047
 100e2e8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 100e2ec:	e0bffb17 	ldw	r2,-20(fp)
 100e2f0:	10c00b17 	ldw	r3,44(r2)
 100e2f4:	e0bffe17 	ldw	r2,-8(fp)
 100e2f8:	18801526 	beq	r3,r2,100e350 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100e2fc:	e0bffc17 	ldw	r2,-16(fp)
 100e300:	10800037 	ldwio	r2,0(r2)
 100e304:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100e308:	e0bff917 	ldw	r2,-28(fp)
 100e30c:	10a0000c 	andi	r2,r2,32768
 100e310:	10001126 	beq	r2,zero,100e358 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100e314:	e0bffb17 	ldw	r2,-20(fp)
 100e318:	10800a17 	ldw	r2,40(r2)
 100e31c:	e0fff917 	ldw	r3,-28(fp)
 100e320:	1809883a 	mov	r4,r3
 100e324:	e0fffb17 	ldw	r3,-20(fp)
 100e328:	1885883a 	add	r2,r3,r2
 100e32c:	10800e04 	addi	r2,r2,56
 100e330:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e334:	e0bffb17 	ldw	r2,-20(fp)
 100e338:	10800a17 	ldw	r2,40(r2)
 100e33c:	10800044 	addi	r2,r2,1
 100e340:	10c1ffcc 	andi	r3,r2,2047
 100e344:	e0bffb17 	ldw	r2,-20(fp)
 100e348:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100e34c:	003fe206 	br	100e2d8 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 100e350:	0001883a 	nop
 100e354:	00000106 	br	100e35c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 100e358:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100e35c:	e0bff917 	ldw	r2,-28(fp)
 100e360:	10bfffec 	andhi	r2,r2,65535
 100e364:	10000f26 	beq	r2,zero,100e3a4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100e368:	e0bffb17 	ldw	r2,-20(fp)
 100e36c:	10c00817 	ldw	r3,32(r2)
 100e370:	00bfff84 	movi	r2,-2
 100e374:	1886703a 	and	r3,r3,r2
 100e378:	e0bffb17 	ldw	r2,-20(fp)
 100e37c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100e380:	e0bffc17 	ldw	r2,-16(fp)
 100e384:	10800104 	addi	r2,r2,4
 100e388:	1007883a 	mov	r3,r2
 100e38c:	e0bffb17 	ldw	r2,-20(fp)
 100e390:	10800817 	ldw	r2,32(r2)
 100e394:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100e398:	e0bffc17 	ldw	r2,-16(fp)
 100e39c:	10800104 	addi	r2,r2,4
 100e3a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100e3a4:	e0bffd17 	ldw	r2,-12(fp)
 100e3a8:	1080800c 	andi	r2,r2,512
 100e3ac:	103fbe26 	beq	r2,zero,100e2a8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100e3b0:	e0bffd17 	ldw	r2,-12(fp)
 100e3b4:	1004d43a 	srli	r2,r2,16
 100e3b8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100e3bc:	00001406 	br	100e410 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100e3c0:	e0bffc17 	ldw	r2,-16(fp)
 100e3c4:	e0fffb17 	ldw	r3,-20(fp)
 100e3c8:	18c00d17 	ldw	r3,52(r3)
 100e3cc:	e13ffb17 	ldw	r4,-20(fp)
 100e3d0:	20c7883a 	add	r3,r4,r3
 100e3d4:	18c20e04 	addi	r3,r3,2104
 100e3d8:	18c00003 	ldbu	r3,0(r3)
 100e3dc:	18c03fcc 	andi	r3,r3,255
 100e3e0:	18c0201c 	xori	r3,r3,128
 100e3e4:	18ffe004 	addi	r3,r3,-128
 100e3e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e3ec:	e0bffb17 	ldw	r2,-20(fp)
 100e3f0:	10800d17 	ldw	r2,52(r2)
 100e3f4:	10800044 	addi	r2,r2,1
 100e3f8:	10c1ffcc 	andi	r3,r2,2047
 100e3fc:	e0bffb17 	ldw	r2,-20(fp)
 100e400:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100e404:	e0bffa17 	ldw	r2,-24(fp)
 100e408:	10bfffc4 	addi	r2,r2,-1
 100e40c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100e410:	e0bffa17 	ldw	r2,-24(fp)
 100e414:	10000526 	beq	r2,zero,100e42c <altera_avalon_jtag_uart_irq+0x1a8>
 100e418:	e0bffb17 	ldw	r2,-20(fp)
 100e41c:	10c00d17 	ldw	r3,52(r2)
 100e420:	e0bffb17 	ldw	r2,-20(fp)
 100e424:	10800c17 	ldw	r2,48(r2)
 100e428:	18bfe51e 	bne	r3,r2,100e3c0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100e42c:	e0bffa17 	ldw	r2,-24(fp)
 100e430:	103f9d26 	beq	r2,zero,100e2a8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100e434:	e0bffb17 	ldw	r2,-20(fp)
 100e438:	10c00817 	ldw	r3,32(r2)
 100e43c:	00bfff44 	movi	r2,-3
 100e440:	1886703a 	and	r3,r3,r2
 100e444:	e0bffb17 	ldw	r2,-20(fp)
 100e448:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100e44c:	e0bffb17 	ldw	r2,-20(fp)
 100e450:	10800017 	ldw	r2,0(r2)
 100e454:	10800104 	addi	r2,r2,4
 100e458:	1007883a 	mov	r3,r2
 100e45c:	e0bffb17 	ldw	r2,-20(fp)
 100e460:	10800817 	ldw	r2,32(r2)
 100e464:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100e468:	e0bffc17 	ldw	r2,-16(fp)
 100e46c:	10800104 	addi	r2,r2,4
 100e470:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100e474:	003f8c06 	br	100e2a8 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 100e478:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 100e47c:	0001883a 	nop
 100e480:	e037883a 	mov	sp,fp
 100e484:	df000017 	ldw	fp,0(sp)
 100e488:	dec00104 	addi	sp,sp,4
 100e48c:	f800283a 	ret

0100e490 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100e490:	defff804 	addi	sp,sp,-32
 100e494:	df000715 	stw	fp,28(sp)
 100e498:	df000704 	addi	fp,sp,28
 100e49c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100e4a0:	e0bffb17 	ldw	r2,-20(fp)
 100e4a4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100e4a8:	e0bff917 	ldw	r2,-28(fp)
 100e4ac:	10800017 	ldw	r2,0(r2)
 100e4b0:	10800104 	addi	r2,r2,4
 100e4b4:	10800037 	ldwio	r2,0(r2)
 100e4b8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100e4bc:	e0bffa17 	ldw	r2,-24(fp)
 100e4c0:	1081000c 	andi	r2,r2,1024
 100e4c4:	10000b26 	beq	r2,zero,100e4f4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100e4c8:	e0bff917 	ldw	r2,-28(fp)
 100e4cc:	10800017 	ldw	r2,0(r2)
 100e4d0:	10800104 	addi	r2,r2,4
 100e4d4:	1007883a 	mov	r3,r2
 100e4d8:	e0bff917 	ldw	r2,-28(fp)
 100e4dc:	10800817 	ldw	r2,32(r2)
 100e4e0:	10810014 	ori	r2,r2,1024
 100e4e4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 100e4e8:	e0bff917 	ldw	r2,-28(fp)
 100e4ec:	10000915 	stw	zero,36(r2)
 100e4f0:	00000a06 	br	100e51c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100e4f4:	e0bff917 	ldw	r2,-28(fp)
 100e4f8:	10c00917 	ldw	r3,36(r2)
 100e4fc:	00a00034 	movhi	r2,32768
 100e500:	10bfff04 	addi	r2,r2,-4
 100e504:	10c00536 	bltu	r2,r3,100e51c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 100e508:	e0bff917 	ldw	r2,-28(fp)
 100e50c:	10800917 	ldw	r2,36(r2)
 100e510:	10c00044 	addi	r3,r2,1
 100e514:	e0bff917 	ldw	r2,-28(fp)
 100e518:	10c00915 	stw	r3,36(r2)
 100e51c:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100e520:	e037883a 	mov	sp,fp
 100e524:	df000017 	ldw	fp,0(sp)
 100e528:	dec00104 	addi	sp,sp,4
 100e52c:	f800283a 	ret

0100e530 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100e530:	defffd04 	addi	sp,sp,-12
 100e534:	df000215 	stw	fp,8(sp)
 100e538:	df000204 	addi	fp,sp,8
 100e53c:	e13ffe15 	stw	r4,-8(fp)
 100e540:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100e544:	00000506 	br	100e55c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 100e548:	e0bfff17 	ldw	r2,-4(fp)
 100e54c:	1090000c 	andi	r2,r2,16384
 100e550:	10000226 	beq	r2,zero,100e55c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 100e554:	00bffd44 	movi	r2,-11
 100e558:	00000b06 	br	100e588 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100e55c:	e0bffe17 	ldw	r2,-8(fp)
 100e560:	10c00d17 	ldw	r3,52(r2)
 100e564:	e0bffe17 	ldw	r2,-8(fp)
 100e568:	10800c17 	ldw	r2,48(r2)
 100e56c:	18800526 	beq	r3,r2,100e584 <altera_avalon_jtag_uart_close+0x54>
 100e570:	e0bffe17 	ldw	r2,-8(fp)
 100e574:	10c00917 	ldw	r3,36(r2)
 100e578:	e0bffe17 	ldw	r2,-8(fp)
 100e57c:	10800117 	ldw	r2,4(r2)
 100e580:	18bff136 	bltu	r3,r2,100e548 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100e584:	0005883a 	mov	r2,zero
}
 100e588:	e037883a 	mov	sp,fp
 100e58c:	df000017 	ldw	fp,0(sp)
 100e590:	dec00104 	addi	sp,sp,4
 100e594:	f800283a 	ret

0100e598 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100e598:	defffa04 	addi	sp,sp,-24
 100e59c:	df000515 	stw	fp,20(sp)
 100e5a0:	df000504 	addi	fp,sp,20
 100e5a4:	e13ffd15 	stw	r4,-12(fp)
 100e5a8:	e17ffe15 	stw	r5,-8(fp)
 100e5ac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 100e5b0:	00bff9c4 	movi	r2,-25
 100e5b4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 100e5b8:	e0bffe17 	ldw	r2,-8(fp)
 100e5bc:	10da8060 	cmpeqi	r3,r2,27137
 100e5c0:	1800031e 	bne	r3,zero,100e5d0 <altera_avalon_jtag_uart_ioctl+0x38>
 100e5c4:	109a80a0 	cmpeqi	r2,r2,27138
 100e5c8:	1000181e 	bne	r2,zero,100e62c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 100e5cc:	00002906 	br	100e674 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100e5d0:	e0bffd17 	ldw	r2,-12(fp)
 100e5d4:	10c00117 	ldw	r3,4(r2)
 100e5d8:	00a00034 	movhi	r2,32768
 100e5dc:	10bfffc4 	addi	r2,r2,-1
 100e5e0:	18802126 	beq	r3,r2,100e668 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 100e5e4:	e0bfff17 	ldw	r2,-4(fp)
 100e5e8:	10800017 	ldw	r2,0(r2)
 100e5ec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100e5f0:	e0bffc17 	ldw	r2,-16(fp)
 100e5f4:	10800090 	cmplti	r2,r2,2
 100e5f8:	1000061e 	bne	r2,zero,100e614 <altera_avalon_jtag_uart_ioctl+0x7c>
 100e5fc:	e0fffc17 	ldw	r3,-16(fp)
 100e600:	00a00034 	movhi	r2,32768
 100e604:	10bfffc4 	addi	r2,r2,-1
 100e608:	18800226 	beq	r3,r2,100e614 <altera_avalon_jtag_uart_ioctl+0x7c>
 100e60c:	e0bffc17 	ldw	r2,-16(fp)
 100e610:	00000206 	br	100e61c <altera_avalon_jtag_uart_ioctl+0x84>
 100e614:	00a00034 	movhi	r2,32768
 100e618:	10bfff84 	addi	r2,r2,-2
 100e61c:	e0fffd17 	ldw	r3,-12(fp)
 100e620:	18800115 	stw	r2,4(r3)
      rc = 0;
 100e624:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 100e628:	00000f06 	br	100e668 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100e62c:	e0bffd17 	ldw	r2,-12(fp)
 100e630:	10c00117 	ldw	r3,4(r2)
 100e634:	00a00034 	movhi	r2,32768
 100e638:	10bfffc4 	addi	r2,r2,-1
 100e63c:	18800c26 	beq	r3,r2,100e670 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100e640:	e0bffd17 	ldw	r2,-12(fp)
 100e644:	10c00917 	ldw	r3,36(r2)
 100e648:	e0bffd17 	ldw	r2,-12(fp)
 100e64c:	10800117 	ldw	r2,4(r2)
 100e650:	1885803a 	cmpltu	r2,r3,r2
 100e654:	10c03fcc 	andi	r3,r2,255
 100e658:	e0bfff17 	ldw	r2,-4(fp)
 100e65c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 100e660:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 100e664:	00000206 	br	100e670 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 100e668:	0001883a 	nop
 100e66c:	00000106 	br	100e674 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 100e670:	0001883a 	nop

  default:
    break;
  }

  return rc;
 100e674:	e0bffb17 	ldw	r2,-20(fp)
}
 100e678:	e037883a 	mov	sp,fp
 100e67c:	df000017 	ldw	fp,0(sp)
 100e680:	dec00104 	addi	sp,sp,4
 100e684:	f800283a 	ret

0100e688 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100e688:	defff304 	addi	sp,sp,-52
 100e68c:	dfc00c15 	stw	ra,48(sp)
 100e690:	df000b15 	stw	fp,44(sp)
 100e694:	df000b04 	addi	fp,sp,44
 100e698:	e13ffc15 	stw	r4,-16(fp)
 100e69c:	e17ffd15 	stw	r5,-12(fp)
 100e6a0:	e1bffe15 	stw	r6,-8(fp)
 100e6a4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 100e6a8:	e0bffd17 	ldw	r2,-12(fp)
 100e6ac:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100e6b0:	00004706 	br	100e7d0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100e6b4:	e0bffc17 	ldw	r2,-16(fp)
 100e6b8:	10800a17 	ldw	r2,40(r2)
 100e6bc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100e6c0:	e0bffc17 	ldw	r2,-16(fp)
 100e6c4:	10800b17 	ldw	r2,44(r2)
 100e6c8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 100e6cc:	e0fff717 	ldw	r3,-36(fp)
 100e6d0:	e0bff817 	ldw	r2,-32(fp)
 100e6d4:	18800536 	bltu	r3,r2,100e6ec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100e6d8:	e0fff717 	ldw	r3,-36(fp)
 100e6dc:	e0bff817 	ldw	r2,-32(fp)
 100e6e0:	1885c83a 	sub	r2,r3,r2
 100e6e4:	e0bff615 	stw	r2,-40(fp)
 100e6e8:	00000406 	br	100e6fc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100e6ec:	00c20004 	movi	r3,2048
 100e6f0:	e0bff817 	ldw	r2,-32(fp)
 100e6f4:	1885c83a 	sub	r2,r3,r2
 100e6f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 100e6fc:	e0bff617 	ldw	r2,-40(fp)
 100e700:	10001e26 	beq	r2,zero,100e77c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 100e704:	e0fffe17 	ldw	r3,-8(fp)
 100e708:	e0bff617 	ldw	r2,-40(fp)
 100e70c:	1880022e 	bgeu	r3,r2,100e718 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 100e710:	e0bffe17 	ldw	r2,-8(fp)
 100e714:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100e718:	e0bffc17 	ldw	r2,-16(fp)
 100e71c:	10c00e04 	addi	r3,r2,56
 100e720:	e0bff817 	ldw	r2,-32(fp)
 100e724:	1885883a 	add	r2,r3,r2
 100e728:	e1bff617 	ldw	r6,-40(fp)
 100e72c:	100b883a 	mov	r5,r2
 100e730:	e13ff517 	ldw	r4,-44(fp)
 100e734:	10066900 	call	1006690 <memcpy>
      ptr   += n;
 100e738:	e0fff517 	ldw	r3,-44(fp)
 100e73c:	e0bff617 	ldw	r2,-40(fp)
 100e740:	1885883a 	add	r2,r3,r2
 100e744:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 100e748:	e0fffe17 	ldw	r3,-8(fp)
 100e74c:	e0bff617 	ldw	r2,-40(fp)
 100e750:	1885c83a 	sub	r2,r3,r2
 100e754:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e758:	e0fff817 	ldw	r3,-32(fp)
 100e75c:	e0bff617 	ldw	r2,-40(fp)
 100e760:	1885883a 	add	r2,r3,r2
 100e764:	10c1ffcc 	andi	r3,r2,2047
 100e768:	e0bffc17 	ldw	r2,-16(fp)
 100e76c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100e770:	e0bffe17 	ldw	r2,-8(fp)
 100e774:	00bfcf16 	blt	zero,r2,100e6b4 <altera_avalon_jtag_uart_read+0x2c>
 100e778:	00000106 	br	100e780 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 100e77c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 100e780:	e0fff517 	ldw	r3,-44(fp)
 100e784:	e0bffd17 	ldw	r2,-12(fp)
 100e788:	1880141e 	bne	r3,r2,100e7dc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100e78c:	e0bfff17 	ldw	r2,-4(fp)
 100e790:	1090000c 	andi	r2,r2,16384
 100e794:	1000131e 	bne	r2,zero,100e7e4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100e798:	0001883a 	nop
 100e79c:	e0bffc17 	ldw	r2,-16(fp)
 100e7a0:	10c00a17 	ldw	r3,40(r2)
 100e7a4:	e0bff717 	ldw	r2,-36(fp)
 100e7a8:	1880051e 	bne	r3,r2,100e7c0 <altera_avalon_jtag_uart_read+0x138>
 100e7ac:	e0bffc17 	ldw	r2,-16(fp)
 100e7b0:	10c00917 	ldw	r3,36(r2)
 100e7b4:	e0bffc17 	ldw	r2,-16(fp)
 100e7b8:	10800117 	ldw	r2,4(r2)
 100e7bc:	18bff736 	bltu	r3,r2,100e79c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100e7c0:	e0bffc17 	ldw	r2,-16(fp)
 100e7c4:	10c00a17 	ldw	r3,40(r2)
 100e7c8:	e0bff717 	ldw	r2,-36(fp)
 100e7cc:	18800726 	beq	r3,r2,100e7ec <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100e7d0:	e0bffe17 	ldw	r2,-8(fp)
 100e7d4:	00bfb716 	blt	zero,r2,100e6b4 <altera_avalon_jtag_uart_read+0x2c>
 100e7d8:	00000506 	br	100e7f0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 100e7dc:	0001883a 	nop
 100e7e0:	00000306 	br	100e7f0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 100e7e4:	0001883a 	nop
 100e7e8:	00000106 	br	100e7f0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 100e7ec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100e7f0:	e0fff517 	ldw	r3,-44(fp)
 100e7f4:	e0bffd17 	ldw	r2,-12(fp)
 100e7f8:	18801826 	beq	r3,r2,100e85c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e7fc:	0005303a 	rdctl	r2,status
 100e800:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e804:	e0fffb17 	ldw	r3,-20(fp)
 100e808:	00bfff84 	movi	r2,-2
 100e80c:	1884703a 	and	r2,r3,r2
 100e810:	1001703a 	wrctl	status,r2
  
  return context;
 100e814:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100e818:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100e81c:	e0bffc17 	ldw	r2,-16(fp)
 100e820:	10800817 	ldw	r2,32(r2)
 100e824:	10c00054 	ori	r3,r2,1
 100e828:	e0bffc17 	ldw	r2,-16(fp)
 100e82c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100e830:	e0bffc17 	ldw	r2,-16(fp)
 100e834:	10800017 	ldw	r2,0(r2)
 100e838:	10800104 	addi	r2,r2,4
 100e83c:	1007883a 	mov	r3,r2
 100e840:	e0bffc17 	ldw	r2,-16(fp)
 100e844:	10800817 	ldw	r2,32(r2)
 100e848:	18800035 	stwio	r2,0(r3)
 100e84c:	e0bffa17 	ldw	r2,-24(fp)
 100e850:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e854:	e0bff917 	ldw	r2,-28(fp)
 100e858:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100e85c:	e0fff517 	ldw	r3,-44(fp)
 100e860:	e0bffd17 	ldw	r2,-12(fp)
 100e864:	18800426 	beq	r3,r2,100e878 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 100e868:	e0fff517 	ldw	r3,-44(fp)
 100e86c:	e0bffd17 	ldw	r2,-12(fp)
 100e870:	1885c83a 	sub	r2,r3,r2
 100e874:	00000606 	br	100e890 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 100e878:	e0bfff17 	ldw	r2,-4(fp)
 100e87c:	1090000c 	andi	r2,r2,16384
 100e880:	10000226 	beq	r2,zero,100e88c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100e884:	00bffd44 	movi	r2,-11
 100e888:	00000106 	br	100e890 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 100e88c:	00bffec4 	movi	r2,-5
}
 100e890:	e037883a 	mov	sp,fp
 100e894:	dfc00117 	ldw	ra,4(sp)
 100e898:	df000017 	ldw	fp,0(sp)
 100e89c:	dec00204 	addi	sp,sp,8
 100e8a0:	f800283a 	ret

0100e8a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100e8a4:	defff304 	addi	sp,sp,-52
 100e8a8:	dfc00c15 	stw	ra,48(sp)
 100e8ac:	df000b15 	stw	fp,44(sp)
 100e8b0:	df000b04 	addi	fp,sp,44
 100e8b4:	e13ffc15 	stw	r4,-16(fp)
 100e8b8:	e17ffd15 	stw	r5,-12(fp)
 100e8bc:	e1bffe15 	stw	r6,-8(fp)
 100e8c0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100e8c4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100e8c8:	e0bffd17 	ldw	r2,-12(fp)
 100e8cc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100e8d0:	00003706 	br	100e9b0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100e8d4:	e0bffc17 	ldw	r2,-16(fp)
 100e8d8:	10800c17 	ldw	r2,48(r2)
 100e8dc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 100e8e0:	e0bffc17 	ldw	r2,-16(fp)
 100e8e4:	10800d17 	ldw	r2,52(r2)
 100e8e8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 100e8ec:	e0fff917 	ldw	r3,-28(fp)
 100e8f0:	e0bff517 	ldw	r2,-44(fp)
 100e8f4:	1880062e 	bgeu	r3,r2,100e910 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100e8f8:	e0fff517 	ldw	r3,-44(fp)
 100e8fc:	e0bff917 	ldw	r2,-28(fp)
 100e900:	1885c83a 	sub	r2,r3,r2
 100e904:	10bfffc4 	addi	r2,r2,-1
 100e908:	e0bff615 	stw	r2,-40(fp)
 100e90c:	00000b06 	br	100e93c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 100e910:	e0bff517 	ldw	r2,-44(fp)
 100e914:	10000526 	beq	r2,zero,100e92c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100e918:	00c20004 	movi	r3,2048
 100e91c:	e0bff917 	ldw	r2,-28(fp)
 100e920:	1885c83a 	sub	r2,r3,r2
 100e924:	e0bff615 	stw	r2,-40(fp)
 100e928:	00000406 	br	100e93c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100e92c:	00c1ffc4 	movi	r3,2047
 100e930:	e0bff917 	ldw	r2,-28(fp)
 100e934:	1885c83a 	sub	r2,r3,r2
 100e938:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 100e93c:	e0bff617 	ldw	r2,-40(fp)
 100e940:	10001e26 	beq	r2,zero,100e9bc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 100e944:	e0fffe17 	ldw	r3,-8(fp)
 100e948:	e0bff617 	ldw	r2,-40(fp)
 100e94c:	1880022e 	bgeu	r3,r2,100e958 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 100e950:	e0bffe17 	ldw	r2,-8(fp)
 100e954:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100e958:	e0bffc17 	ldw	r2,-16(fp)
 100e95c:	10c20e04 	addi	r3,r2,2104
 100e960:	e0bff917 	ldw	r2,-28(fp)
 100e964:	1885883a 	add	r2,r3,r2
 100e968:	e1bff617 	ldw	r6,-40(fp)
 100e96c:	e17ffd17 	ldw	r5,-12(fp)
 100e970:	1009883a 	mov	r4,r2
 100e974:	10066900 	call	1006690 <memcpy>
      ptr   += n;
 100e978:	e0fffd17 	ldw	r3,-12(fp)
 100e97c:	e0bff617 	ldw	r2,-40(fp)
 100e980:	1885883a 	add	r2,r3,r2
 100e984:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 100e988:	e0fffe17 	ldw	r3,-8(fp)
 100e98c:	e0bff617 	ldw	r2,-40(fp)
 100e990:	1885c83a 	sub	r2,r3,r2
 100e994:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e998:	e0fff917 	ldw	r3,-28(fp)
 100e99c:	e0bff617 	ldw	r2,-40(fp)
 100e9a0:	1885883a 	add	r2,r3,r2
 100e9a4:	10c1ffcc 	andi	r3,r2,2047
 100e9a8:	e0bffc17 	ldw	r2,-16(fp)
 100e9ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100e9b0:	e0bffe17 	ldw	r2,-8(fp)
 100e9b4:	00bfc716 	blt	zero,r2,100e8d4 <altera_avalon_jtag_uart_write+0x30>
 100e9b8:	00000106 	br	100e9c0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 100e9bc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e9c0:	0005303a 	rdctl	r2,status
 100e9c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e9c8:	e0fffb17 	ldw	r3,-20(fp)
 100e9cc:	00bfff84 	movi	r2,-2
 100e9d0:	1884703a 	and	r2,r3,r2
 100e9d4:	1001703a 	wrctl	status,r2
  
  return context;
 100e9d8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100e9dc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100e9e0:	e0bffc17 	ldw	r2,-16(fp)
 100e9e4:	10800817 	ldw	r2,32(r2)
 100e9e8:	10c00094 	ori	r3,r2,2
 100e9ec:	e0bffc17 	ldw	r2,-16(fp)
 100e9f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100e9f4:	e0bffc17 	ldw	r2,-16(fp)
 100e9f8:	10800017 	ldw	r2,0(r2)
 100e9fc:	10800104 	addi	r2,r2,4
 100ea00:	1007883a 	mov	r3,r2
 100ea04:	e0bffc17 	ldw	r2,-16(fp)
 100ea08:	10800817 	ldw	r2,32(r2)
 100ea0c:	18800035 	stwio	r2,0(r3)
 100ea10:	e0bffa17 	ldw	r2,-24(fp)
 100ea14:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ea18:	e0bff817 	ldw	r2,-32(fp)
 100ea1c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100ea20:	e0bffe17 	ldw	r2,-8(fp)
 100ea24:	0080100e 	bge	zero,r2,100ea68 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 100ea28:	e0bfff17 	ldw	r2,-4(fp)
 100ea2c:	1090000c 	andi	r2,r2,16384
 100ea30:	1000101e 	bne	r2,zero,100ea74 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100ea34:	0001883a 	nop
 100ea38:	e0bffc17 	ldw	r2,-16(fp)
 100ea3c:	10c00d17 	ldw	r3,52(r2)
 100ea40:	e0bff517 	ldw	r2,-44(fp)
 100ea44:	1880051e 	bne	r3,r2,100ea5c <altera_avalon_jtag_uart_write+0x1b8>
 100ea48:	e0bffc17 	ldw	r2,-16(fp)
 100ea4c:	10c00917 	ldw	r3,36(r2)
 100ea50:	e0bffc17 	ldw	r2,-16(fp)
 100ea54:	10800117 	ldw	r2,4(r2)
 100ea58:	18bff736 	bltu	r3,r2,100ea38 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 100ea5c:	e0bffc17 	ldw	r2,-16(fp)
 100ea60:	10800917 	ldw	r2,36(r2)
 100ea64:	1000051e 	bne	r2,zero,100ea7c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 100ea68:	e0bffe17 	ldw	r2,-8(fp)
 100ea6c:	00bfd016 	blt	zero,r2,100e9b0 <altera_avalon_jtag_uart_write+0x10c>
 100ea70:	00000306 	br	100ea80 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 100ea74:	0001883a 	nop
 100ea78:	00000106 	br	100ea80 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 100ea7c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100ea80:	e0fffd17 	ldw	r3,-12(fp)
 100ea84:	e0bff717 	ldw	r2,-36(fp)
 100ea88:	18800426 	beq	r3,r2,100ea9c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 100ea8c:	e0fffd17 	ldw	r3,-12(fp)
 100ea90:	e0bff717 	ldw	r2,-36(fp)
 100ea94:	1885c83a 	sub	r2,r3,r2
 100ea98:	00000606 	br	100eab4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 100ea9c:	e0bfff17 	ldw	r2,-4(fp)
 100eaa0:	1090000c 	andi	r2,r2,16384
 100eaa4:	10000226 	beq	r2,zero,100eab0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 100eaa8:	00bffd44 	movi	r2,-11
 100eaac:	00000106 	br	100eab4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100eab0:	00bffec4 	movi	r2,-5
}
 100eab4:	e037883a 	mov	sp,fp
 100eab8:	dfc00117 	ldw	ra,4(sp)
 100eabc:	df000017 	ldw	fp,0(sp)
 100eac0:	dec00204 	addi	sp,sp,8
 100eac4:	f800283a 	ret

0100eac8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100eac8:	defff504 	addi	sp,sp,-44
 100eacc:	df000a15 	stw	fp,40(sp)
 100ead0:	df000a04 	addi	fp,sp,40
 100ead4:	e13ffc15 	stw	r4,-16(fp)
 100ead8:	e17ffd15 	stw	r5,-12(fp)
 100eadc:	e1bffe15 	stw	r6,-8(fp)
 100eae0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100eae4:	e03ff615 	stw	zero,-40(fp)
 100eae8:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
 100eaec:	10003c26 	beq	r2,zero,100ebe0 <alt_alarm_start+0x118>
  {
    if (alarm)
 100eaf0:	e0bffc17 	ldw	r2,-16(fp)
 100eaf4:	10003826 	beq	r2,zero,100ebd8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 100eaf8:	e0bffc17 	ldw	r2,-16(fp)
 100eafc:	e0fffe17 	ldw	r3,-8(fp)
 100eb00:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 100eb04:	e0bffc17 	ldw	r2,-16(fp)
 100eb08:	e0ffff17 	ldw	r3,-4(fp)
 100eb0c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100eb10:	0005303a 	rdctl	r2,status
 100eb14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100eb18:	e0fff917 	ldw	r3,-28(fp)
 100eb1c:	00bfff84 	movi	r2,-2
 100eb20:	1884703a 	and	r2,r3,r2
 100eb24:	1001703a 	wrctl	status,r2
  
  return context;
 100eb28:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 100eb2c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100eb30:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
 100eb34:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100eb38:	e0fffd17 	ldw	r3,-12(fp)
 100eb3c:	e0bff617 	ldw	r2,-40(fp)
 100eb40:	1885883a 	add	r2,r3,r2
 100eb44:	10c00044 	addi	r3,r2,1
 100eb48:	e0bffc17 	ldw	r2,-16(fp)
 100eb4c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100eb50:	e0bffc17 	ldw	r2,-16(fp)
 100eb54:	10c00217 	ldw	r3,8(r2)
 100eb58:	e0bff617 	ldw	r2,-40(fp)
 100eb5c:	1880042e 	bgeu	r3,r2,100eb70 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 100eb60:	e0bffc17 	ldw	r2,-16(fp)
 100eb64:	00c00044 	movi	r3,1
 100eb68:	10c00405 	stb	r3,16(r2)
 100eb6c:	00000206 	br	100eb78 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 100eb70:	e0bffc17 	ldw	r2,-16(fp)
 100eb74:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100eb78:	e0bffc17 	ldw	r2,-16(fp)
 100eb7c:	d0e00e04 	addi	r3,gp,-32712
 100eb80:	e0fffa15 	stw	r3,-24(fp)
 100eb84:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100eb88:	e0bffb17 	ldw	r2,-20(fp)
 100eb8c:	e0fffa17 	ldw	r3,-24(fp)
 100eb90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100eb94:	e0bffa17 	ldw	r2,-24(fp)
 100eb98:	10c00017 	ldw	r3,0(r2)
 100eb9c:	e0bffb17 	ldw	r2,-20(fp)
 100eba0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100eba4:	e0bffa17 	ldw	r2,-24(fp)
 100eba8:	10800017 	ldw	r2,0(r2)
 100ebac:	e0fffb17 	ldw	r3,-20(fp)
 100ebb0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100ebb4:	e0bffa17 	ldw	r2,-24(fp)
 100ebb8:	e0fffb17 	ldw	r3,-20(fp)
 100ebbc:	10c00015 	stw	r3,0(r2)
 100ebc0:	e0bff817 	ldw	r2,-32(fp)
 100ebc4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ebc8:	e0bff717 	ldw	r2,-36(fp)
 100ebcc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100ebd0:	0005883a 	mov	r2,zero
 100ebd4:	00000306 	br	100ebe4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 100ebd8:	00bffa84 	movi	r2,-22
 100ebdc:	00000106 	br	100ebe4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 100ebe0:	00bfde84 	movi	r2,-134
  }
}
 100ebe4:	e037883a 	mov	sp,fp
 100ebe8:	df000017 	ldw	fp,0(sp)
 100ebec:	dec00104 	addi	sp,sp,4
 100ebf0:	f800283a 	ret

0100ebf4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100ebf4:	defffe04 	addi	sp,sp,-8
 100ebf8:	df000115 	stw	fp,4(sp)
 100ebfc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100ec00:	e03fff15 	stw	zero,-4(fp)
 100ec04:	00000506 	br	100ec1c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 100ec08:	e0bfff17 	ldw	r2,-4(fp)
 100ec0c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100ec10:	e0bfff17 	ldw	r2,-4(fp)
 100ec14:	10800804 	addi	r2,r2,32
 100ec18:	e0bfff15 	stw	r2,-4(fp)
 100ec1c:	e0bfff17 	ldw	r2,-4(fp)
 100ec20:	10820030 	cmpltui	r2,r2,2048
 100ec24:	103ff81e 	bne	r2,zero,100ec08 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100ec28:	0001883a 	nop
 100ec2c:	e037883a 	mov	sp,fp
 100ec30:	df000017 	ldw	fp,0(sp)
 100ec34:	dec00104 	addi	sp,sp,4
 100ec38:	f800283a 	ret

0100ec3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ec3c:	defffe04 	addi	sp,sp,-8
 100ec40:	dfc00115 	stw	ra,4(sp)
 100ec44:	df000015 	stw	fp,0(sp)
 100ec48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100ec4c:	d0a00b17 	ldw	r2,-32724(gp)
 100ec50:	10000326 	beq	r2,zero,100ec60 <alt_get_errno+0x24>
 100ec54:	d0a00b17 	ldw	r2,-32724(gp)
 100ec58:	103ee83a 	callr	r2
 100ec5c:	00000106 	br	100ec64 <alt_get_errno+0x28>
 100ec60:	d0a6d204 	addi	r2,gp,-25784
}
 100ec64:	e037883a 	mov	sp,fp
 100ec68:	dfc00117 	ldw	ra,4(sp)
 100ec6c:	df000017 	ldw	fp,0(sp)
 100ec70:	dec00204 	addi	sp,sp,8
 100ec74:	f800283a 	ret

0100ec78 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100ec78:	defffa04 	addi	sp,sp,-24
 100ec7c:	dfc00515 	stw	ra,20(sp)
 100ec80:	df000415 	stw	fp,16(sp)
 100ec84:	df000404 	addi	fp,sp,16
 100ec88:	e13ffe15 	stw	r4,-8(fp)
 100ec8c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100ec90:	e0bffe17 	ldw	r2,-8(fp)
 100ec94:	10000326 	beq	r2,zero,100eca4 <alt_dev_llist_insert+0x2c>
 100ec98:	e0bffe17 	ldw	r2,-8(fp)
 100ec9c:	10800217 	ldw	r2,8(r2)
 100eca0:	1000061e 	bne	r2,zero,100ecbc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 100eca4:	100ec3c0 	call	100ec3c <alt_get_errno>
 100eca8:	1007883a 	mov	r3,r2
 100ecac:	00800584 	movi	r2,22
 100ecb0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100ecb4:	00bffa84 	movi	r2,-22
 100ecb8:	00001306 	br	100ed08 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100ecbc:	e0bffe17 	ldw	r2,-8(fp)
 100ecc0:	e0ffff17 	ldw	r3,-4(fp)
 100ecc4:	e0fffc15 	stw	r3,-16(fp)
 100ecc8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100eccc:	e0bffd17 	ldw	r2,-12(fp)
 100ecd0:	e0fffc17 	ldw	r3,-16(fp)
 100ecd4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100ecd8:	e0bffc17 	ldw	r2,-16(fp)
 100ecdc:	10c00017 	ldw	r3,0(r2)
 100ece0:	e0bffd17 	ldw	r2,-12(fp)
 100ece4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100ece8:	e0bffc17 	ldw	r2,-16(fp)
 100ecec:	10800017 	ldw	r2,0(r2)
 100ecf0:	e0fffd17 	ldw	r3,-12(fp)
 100ecf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100ecf8:	e0bffc17 	ldw	r2,-16(fp)
 100ecfc:	e0fffd17 	ldw	r3,-12(fp)
 100ed00:	10c00015 	stw	r3,0(r2)

  return 0;  
 100ed04:	0005883a 	mov	r2,zero
}
 100ed08:	e037883a 	mov	sp,fp
 100ed0c:	dfc00117 	ldw	ra,4(sp)
 100ed10:	df000017 	ldw	fp,0(sp)
 100ed14:	dec00204 	addi	sp,sp,8
 100ed18:	f800283a 	ret

0100ed1c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100ed1c:	defffd04 	addi	sp,sp,-12
 100ed20:	dfc00215 	stw	ra,8(sp)
 100ed24:	df000115 	stw	fp,4(sp)
 100ed28:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100ed2c:	00804074 	movhi	r2,257
 100ed30:	10bf4104 	addi	r2,r2,-764
 100ed34:	e0bfff15 	stw	r2,-4(fp)
 100ed38:	00000606 	br	100ed54 <_do_ctors+0x38>
        (*ctor) (); 
 100ed3c:	e0bfff17 	ldw	r2,-4(fp)
 100ed40:	10800017 	ldw	r2,0(r2)
 100ed44:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100ed48:	e0bfff17 	ldw	r2,-4(fp)
 100ed4c:	10bfff04 	addi	r2,r2,-4
 100ed50:	e0bfff15 	stw	r2,-4(fp)
 100ed54:	e0ffff17 	ldw	r3,-4(fp)
 100ed58:	00804074 	movhi	r2,257
 100ed5c:	10bf4204 	addi	r2,r2,-760
 100ed60:	18bff62e 	bgeu	r3,r2,100ed3c <_do_ctors+0x20>
        (*ctor) (); 
}
 100ed64:	0001883a 	nop
 100ed68:	e037883a 	mov	sp,fp
 100ed6c:	dfc00117 	ldw	ra,4(sp)
 100ed70:	df000017 	ldw	fp,0(sp)
 100ed74:	dec00204 	addi	sp,sp,8
 100ed78:	f800283a 	ret

0100ed7c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100ed7c:	defffd04 	addi	sp,sp,-12
 100ed80:	dfc00215 	stw	ra,8(sp)
 100ed84:	df000115 	stw	fp,4(sp)
 100ed88:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100ed8c:	00804074 	movhi	r2,257
 100ed90:	10bf4104 	addi	r2,r2,-764
 100ed94:	e0bfff15 	stw	r2,-4(fp)
 100ed98:	00000606 	br	100edb4 <_do_dtors+0x38>
        (*dtor) (); 
 100ed9c:	e0bfff17 	ldw	r2,-4(fp)
 100eda0:	10800017 	ldw	r2,0(r2)
 100eda4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100eda8:	e0bfff17 	ldw	r2,-4(fp)
 100edac:	10bfff04 	addi	r2,r2,-4
 100edb0:	e0bfff15 	stw	r2,-4(fp)
 100edb4:	e0ffff17 	ldw	r3,-4(fp)
 100edb8:	00804074 	movhi	r2,257
 100edbc:	10bf4204 	addi	r2,r2,-760
 100edc0:	18bff62e 	bgeu	r3,r2,100ed9c <_do_dtors+0x20>
        (*dtor) (); 
}
 100edc4:	0001883a 	nop
 100edc8:	e037883a 	mov	sp,fp
 100edcc:	dfc00117 	ldw	ra,4(sp)
 100edd0:	df000017 	ldw	fp,0(sp)
 100edd4:	dec00204 	addi	sp,sp,8
 100edd8:	f800283a 	ret

0100eddc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100eddc:	defffe04 	addi	sp,sp,-8
 100ede0:	dfc00115 	stw	ra,4(sp)
 100ede4:	df000015 	stw	fp,0(sp)
 100ede8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 100edec:	01440004 	movi	r5,4096
 100edf0:	0009883a 	mov	r4,zero
 100edf4:	100f8480 	call	100f848 <alt_icache_flush>
#endif
}
 100edf8:	0001883a 	nop
 100edfc:	e037883a 	mov	sp,fp
 100ee00:	dfc00117 	ldw	ra,4(sp)
 100ee04:	df000017 	ldw	fp,0(sp)
 100ee08:	dec00204 	addi	sp,sp,8
 100ee0c:	f800283a 	ret

0100ee10 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100ee10:	defff904 	addi	sp,sp,-28
 100ee14:	dfc00615 	stw	ra,24(sp)
 100ee18:	df000515 	stw	fp,20(sp)
 100ee1c:	df000504 	addi	fp,sp,20
 100ee20:	e13ffc15 	stw	r4,-16(fp)
 100ee24:	e17ffd15 	stw	r5,-12(fp)
 100ee28:	e1bffe15 	stw	r6,-8(fp)
 100ee2c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 100ee30:	e0800217 	ldw	r2,8(fp)
 100ee34:	d8800015 	stw	r2,0(sp)
 100ee38:	e1ffff17 	ldw	r7,-4(fp)
 100ee3c:	e1bffe17 	ldw	r6,-8(fp)
 100ee40:	e17ffd17 	ldw	r5,-12(fp)
 100ee44:	e13ffc17 	ldw	r4,-16(fp)
 100ee48:	100efc00 	call	100efc0 <alt_iic_isr_register>
}  
 100ee4c:	e037883a 	mov	sp,fp
 100ee50:	dfc00117 	ldw	ra,4(sp)
 100ee54:	df000017 	ldw	fp,0(sp)
 100ee58:	dec00204 	addi	sp,sp,8
 100ee5c:	f800283a 	ret

0100ee60 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 100ee60:	defff904 	addi	sp,sp,-28
 100ee64:	df000615 	stw	fp,24(sp)
 100ee68:	df000604 	addi	fp,sp,24
 100ee6c:	e13ffe15 	stw	r4,-8(fp)
 100ee70:	e17fff15 	stw	r5,-4(fp)
 100ee74:	e0bfff17 	ldw	r2,-4(fp)
 100ee78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ee7c:	0005303a 	rdctl	r2,status
 100ee80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ee84:	e0fffb17 	ldw	r3,-20(fp)
 100ee88:	00bfff84 	movi	r2,-2
 100ee8c:	1884703a 	and	r2,r3,r2
 100ee90:	1001703a 	wrctl	status,r2
  
  return context;
 100ee94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100ee98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 100ee9c:	00c00044 	movi	r3,1
 100eea0:	e0bffa17 	ldw	r2,-24(fp)
 100eea4:	1884983a 	sll	r2,r3,r2
 100eea8:	1007883a 	mov	r3,r2
 100eeac:	d0a6d317 	ldw	r2,-25780(gp)
 100eeb0:	1884b03a 	or	r2,r3,r2
 100eeb4:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100eeb8:	d0a6d317 	ldw	r2,-25780(gp)
 100eebc:	100170fa 	wrctl	ienable,r2
 100eec0:	e0bffc17 	ldw	r2,-16(fp)
 100eec4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100eec8:	e0bffd17 	ldw	r2,-12(fp)
 100eecc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100eed0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 100eed4:	0001883a 	nop
}
 100eed8:	e037883a 	mov	sp,fp
 100eedc:	df000017 	ldw	fp,0(sp)
 100eee0:	dec00104 	addi	sp,sp,4
 100eee4:	f800283a 	ret

0100eee8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100eee8:	defff904 	addi	sp,sp,-28
 100eeec:	df000615 	stw	fp,24(sp)
 100eef0:	df000604 	addi	fp,sp,24
 100eef4:	e13ffe15 	stw	r4,-8(fp)
 100eef8:	e17fff15 	stw	r5,-4(fp)
 100eefc:	e0bfff17 	ldw	r2,-4(fp)
 100ef00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ef04:	0005303a 	rdctl	r2,status
 100ef08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ef0c:	e0fffb17 	ldw	r3,-20(fp)
 100ef10:	00bfff84 	movi	r2,-2
 100ef14:	1884703a 	and	r2,r3,r2
 100ef18:	1001703a 	wrctl	status,r2
  
  return context;
 100ef1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100ef20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 100ef24:	00c00044 	movi	r3,1
 100ef28:	e0bffa17 	ldw	r2,-24(fp)
 100ef2c:	1884983a 	sll	r2,r3,r2
 100ef30:	0084303a 	nor	r2,zero,r2
 100ef34:	1007883a 	mov	r3,r2
 100ef38:	d0a6d317 	ldw	r2,-25780(gp)
 100ef3c:	1884703a 	and	r2,r3,r2
 100ef40:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100ef44:	d0a6d317 	ldw	r2,-25780(gp)
 100ef48:	100170fa 	wrctl	ienable,r2
 100ef4c:	e0bffc17 	ldw	r2,-16(fp)
 100ef50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ef54:	e0bffd17 	ldw	r2,-12(fp)
 100ef58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100ef5c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 100ef60:	0001883a 	nop
}
 100ef64:	e037883a 	mov	sp,fp
 100ef68:	df000017 	ldw	fp,0(sp)
 100ef6c:	dec00104 	addi	sp,sp,4
 100ef70:	f800283a 	ret

0100ef74 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100ef74:	defffc04 	addi	sp,sp,-16
 100ef78:	df000315 	stw	fp,12(sp)
 100ef7c:	df000304 	addi	fp,sp,12
 100ef80:	e13ffe15 	stw	r4,-8(fp)
 100ef84:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 100ef88:	000530fa 	rdctl	r2,ienable
 100ef8c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 100ef90:	00c00044 	movi	r3,1
 100ef94:	e0bfff17 	ldw	r2,-4(fp)
 100ef98:	1884983a 	sll	r2,r3,r2
 100ef9c:	1007883a 	mov	r3,r2
 100efa0:	e0bffd17 	ldw	r2,-12(fp)
 100efa4:	1884703a 	and	r2,r3,r2
 100efa8:	1004c03a 	cmpne	r2,r2,zero
 100efac:	10803fcc 	andi	r2,r2,255
}
 100efb0:	e037883a 	mov	sp,fp
 100efb4:	df000017 	ldw	fp,0(sp)
 100efb8:	dec00104 	addi	sp,sp,4
 100efbc:	f800283a 	ret

0100efc0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100efc0:	defff504 	addi	sp,sp,-44
 100efc4:	dfc00a15 	stw	ra,40(sp)
 100efc8:	df000915 	stw	fp,36(sp)
 100efcc:	df000904 	addi	fp,sp,36
 100efd0:	e13ffc15 	stw	r4,-16(fp)
 100efd4:	e17ffd15 	stw	r5,-12(fp)
 100efd8:	e1bffe15 	stw	r6,-8(fp)
 100efdc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 100efe0:	00bffa84 	movi	r2,-22
 100efe4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100efe8:	e0bffd17 	ldw	r2,-12(fp)
 100efec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100eff0:	e0bff817 	ldw	r2,-32(fp)
 100eff4:	10800808 	cmpgei	r2,r2,32
 100eff8:	1000271e 	bne	r2,zero,100f098 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100effc:	0005303a 	rdctl	r2,status
 100f000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f004:	e0fffb17 	ldw	r3,-20(fp)
 100f008:	00bfff84 	movi	r2,-2
 100f00c:	1884703a 	and	r2,r3,r2
 100f010:	1001703a 	wrctl	status,r2
  
  return context;
 100f014:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 100f018:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 100f01c:	00804234 	movhi	r2,264
 100f020:	108fa104 	addi	r2,r2,16004
 100f024:	e0fff817 	ldw	r3,-32(fp)
 100f028:	180690fa 	slli	r3,r3,3
 100f02c:	10c5883a 	add	r2,r2,r3
 100f030:	e0fffe17 	ldw	r3,-8(fp)
 100f034:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 100f038:	00804234 	movhi	r2,264
 100f03c:	108fa104 	addi	r2,r2,16004
 100f040:	e0fff817 	ldw	r3,-32(fp)
 100f044:	180690fa 	slli	r3,r3,3
 100f048:	10c5883a 	add	r2,r2,r3
 100f04c:	10800104 	addi	r2,r2,4
 100f050:	e0ffff17 	ldw	r3,-4(fp)
 100f054:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100f058:	e0bffe17 	ldw	r2,-8(fp)
 100f05c:	10000526 	beq	r2,zero,100f074 <alt_iic_isr_register+0xb4>
 100f060:	e0bff817 	ldw	r2,-32(fp)
 100f064:	100b883a 	mov	r5,r2
 100f068:	e13ffc17 	ldw	r4,-16(fp)
 100f06c:	100ee600 	call	100ee60 <alt_ic_irq_enable>
 100f070:	00000406 	br	100f084 <alt_iic_isr_register+0xc4>
 100f074:	e0bff817 	ldw	r2,-32(fp)
 100f078:	100b883a 	mov	r5,r2
 100f07c:	e13ffc17 	ldw	r4,-16(fp)
 100f080:	100eee80 	call	100eee8 <alt_ic_irq_disable>
 100f084:	e0bff715 	stw	r2,-36(fp)
 100f088:	e0bffa17 	ldw	r2,-24(fp)
 100f08c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f090:	e0bff917 	ldw	r2,-28(fp)
 100f094:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 100f098:	e0bff717 	ldw	r2,-36(fp)
}
 100f09c:	e037883a 	mov	sp,fp
 100f0a0:	dfc00117 	ldw	ra,4(sp)
 100f0a4:	df000017 	ldw	fp,0(sp)
 100f0a8:	dec00204 	addi	sp,sp,8
 100f0ac:	f800283a 	ret

0100f0b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100f0b0:	defff904 	addi	sp,sp,-28
 100f0b4:	dfc00615 	stw	ra,24(sp)
 100f0b8:	df000515 	stw	fp,20(sp)
 100f0bc:	df000504 	addi	fp,sp,20
 100f0c0:	e13ffc15 	stw	r4,-16(fp)
 100f0c4:	e17ffd15 	stw	r5,-12(fp)
 100f0c8:	e1bffe15 	stw	r6,-8(fp)
 100f0cc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100f0d0:	e1bfff17 	ldw	r6,-4(fp)
 100f0d4:	e17ffe17 	ldw	r5,-8(fp)
 100f0d8:	e13ffd17 	ldw	r4,-12(fp)
 100f0dc:	100f2f00 	call	100f2f0 <open>
 100f0e0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100f0e4:	e0bffb17 	ldw	r2,-20(fp)
 100f0e8:	10001c16 	blt	r2,zero,100f15c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 100f0ec:	00804074 	movhi	r2,257
 100f0f0:	10824504 	addi	r2,r2,2324
 100f0f4:	e0fffb17 	ldw	r3,-20(fp)
 100f0f8:	18c00324 	muli	r3,r3,12
 100f0fc:	10c5883a 	add	r2,r2,r3
 100f100:	10c00017 	ldw	r3,0(r2)
 100f104:	e0bffc17 	ldw	r2,-16(fp)
 100f108:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100f10c:	00804074 	movhi	r2,257
 100f110:	10824504 	addi	r2,r2,2324
 100f114:	e0fffb17 	ldw	r3,-20(fp)
 100f118:	18c00324 	muli	r3,r3,12
 100f11c:	10c5883a 	add	r2,r2,r3
 100f120:	10800104 	addi	r2,r2,4
 100f124:	10c00017 	ldw	r3,0(r2)
 100f128:	e0bffc17 	ldw	r2,-16(fp)
 100f12c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100f130:	00804074 	movhi	r2,257
 100f134:	10824504 	addi	r2,r2,2324
 100f138:	e0fffb17 	ldw	r3,-20(fp)
 100f13c:	18c00324 	muli	r3,r3,12
 100f140:	10c5883a 	add	r2,r2,r3
 100f144:	10800204 	addi	r2,r2,8
 100f148:	10c00017 	ldw	r3,0(r2)
 100f14c:	e0bffc17 	ldw	r2,-16(fp)
 100f150:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100f154:	e13ffb17 	ldw	r4,-20(fp)
 100f158:	100dd600 	call	100dd60 <alt_release_fd>
  }
} 
 100f15c:	0001883a 	nop
 100f160:	e037883a 	mov	sp,fp
 100f164:	dfc00117 	ldw	ra,4(sp)
 100f168:	df000017 	ldw	fp,0(sp)
 100f16c:	dec00204 	addi	sp,sp,8
 100f170:	f800283a 	ret

0100f174 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100f174:	defffb04 	addi	sp,sp,-20
 100f178:	dfc00415 	stw	ra,16(sp)
 100f17c:	df000315 	stw	fp,12(sp)
 100f180:	df000304 	addi	fp,sp,12
 100f184:	e13ffd15 	stw	r4,-12(fp)
 100f188:	e17ffe15 	stw	r5,-8(fp)
 100f18c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100f190:	01c07fc4 	movi	r7,511
 100f194:	01800044 	movi	r6,1
 100f198:	e17ffd17 	ldw	r5,-12(fp)
 100f19c:	01004074 	movhi	r4,257
 100f1a0:	21024804 	addi	r4,r4,2336
 100f1a4:	100f0b00 	call	100f0b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100f1a8:	01c07fc4 	movi	r7,511
 100f1ac:	000d883a 	mov	r6,zero
 100f1b0:	e17ffe17 	ldw	r5,-8(fp)
 100f1b4:	01004074 	movhi	r4,257
 100f1b8:	21024504 	addi	r4,r4,2324
 100f1bc:	100f0b00 	call	100f0b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100f1c0:	01c07fc4 	movi	r7,511
 100f1c4:	01800044 	movi	r6,1
 100f1c8:	e17fff17 	ldw	r5,-4(fp)
 100f1cc:	01004074 	movhi	r4,257
 100f1d0:	21024b04 	addi	r4,r4,2348
 100f1d4:	100f0b00 	call	100f0b0 <alt_open_fd>
}  
 100f1d8:	0001883a 	nop
 100f1dc:	e037883a 	mov	sp,fp
 100f1e0:	dfc00117 	ldw	ra,4(sp)
 100f1e4:	df000017 	ldw	fp,0(sp)
 100f1e8:	dec00204 	addi	sp,sp,8
 100f1ec:	f800283a 	ret

0100f1f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f1f0:	defffe04 	addi	sp,sp,-8
 100f1f4:	dfc00115 	stw	ra,4(sp)
 100f1f8:	df000015 	stw	fp,0(sp)
 100f1fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f200:	d0a00b17 	ldw	r2,-32724(gp)
 100f204:	10000326 	beq	r2,zero,100f214 <alt_get_errno+0x24>
 100f208:	d0a00b17 	ldw	r2,-32724(gp)
 100f20c:	103ee83a 	callr	r2
 100f210:	00000106 	br	100f218 <alt_get_errno+0x28>
 100f214:	d0a6d204 	addi	r2,gp,-25784
}
 100f218:	e037883a 	mov	sp,fp
 100f21c:	dfc00117 	ldw	ra,4(sp)
 100f220:	df000017 	ldw	fp,0(sp)
 100f224:	dec00204 	addi	sp,sp,8
 100f228:	f800283a 	ret

0100f22c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100f22c:	defffd04 	addi	sp,sp,-12
 100f230:	df000215 	stw	fp,8(sp)
 100f234:	df000204 	addi	fp,sp,8
 100f238:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100f23c:	e0bfff17 	ldw	r2,-4(fp)
 100f240:	10800217 	ldw	r2,8(r2)
 100f244:	10d00034 	orhi	r3,r2,16384
 100f248:	e0bfff17 	ldw	r2,-4(fp)
 100f24c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100f250:	e03ffe15 	stw	zero,-8(fp)
 100f254:	00001d06 	br	100f2cc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100f258:	00804074 	movhi	r2,257
 100f25c:	10824504 	addi	r2,r2,2324
 100f260:	e0fffe17 	ldw	r3,-8(fp)
 100f264:	18c00324 	muli	r3,r3,12
 100f268:	10c5883a 	add	r2,r2,r3
 100f26c:	10c00017 	ldw	r3,0(r2)
 100f270:	e0bfff17 	ldw	r2,-4(fp)
 100f274:	10800017 	ldw	r2,0(r2)
 100f278:	1880111e 	bne	r3,r2,100f2c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100f27c:	00804074 	movhi	r2,257
 100f280:	10824504 	addi	r2,r2,2324
 100f284:	e0fffe17 	ldw	r3,-8(fp)
 100f288:	18c00324 	muli	r3,r3,12
 100f28c:	10c5883a 	add	r2,r2,r3
 100f290:	10800204 	addi	r2,r2,8
 100f294:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100f298:	1000090e 	bge	r2,zero,100f2c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 100f29c:	e0bffe17 	ldw	r2,-8(fp)
 100f2a0:	10c00324 	muli	r3,r2,12
 100f2a4:	00804074 	movhi	r2,257
 100f2a8:	10824504 	addi	r2,r2,2324
 100f2ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100f2b0:	e0bfff17 	ldw	r2,-4(fp)
 100f2b4:	18800226 	beq	r3,r2,100f2c0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100f2b8:	00bffcc4 	movi	r2,-13
 100f2bc:	00000806 	br	100f2e0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100f2c0:	e0bffe17 	ldw	r2,-8(fp)
 100f2c4:	10800044 	addi	r2,r2,1
 100f2c8:	e0bffe15 	stw	r2,-8(fp)
 100f2cc:	d0a00a17 	ldw	r2,-32728(gp)
 100f2d0:	1007883a 	mov	r3,r2
 100f2d4:	e0bffe17 	ldw	r2,-8(fp)
 100f2d8:	18bfdf2e 	bgeu	r3,r2,100f258 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100f2dc:	0005883a 	mov	r2,zero
}
 100f2e0:	e037883a 	mov	sp,fp
 100f2e4:	df000017 	ldw	fp,0(sp)
 100f2e8:	dec00104 	addi	sp,sp,4
 100f2ec:	f800283a 	ret

0100f2f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100f2f0:	defff604 	addi	sp,sp,-40
 100f2f4:	dfc00915 	stw	ra,36(sp)
 100f2f8:	df000815 	stw	fp,32(sp)
 100f2fc:	df000804 	addi	fp,sp,32
 100f300:	e13ffd15 	stw	r4,-12(fp)
 100f304:	e17ffe15 	stw	r5,-8(fp)
 100f308:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100f30c:	00bfffc4 	movi	r2,-1
 100f310:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 100f314:	00bffb44 	movi	r2,-19
 100f318:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 100f31c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100f320:	d1600804 	addi	r5,gp,-32736
 100f324:	e13ffd17 	ldw	r4,-12(fp)
 100f328:	100f60c0 	call	100f60c <alt_find_dev>
 100f32c:	e0bff815 	stw	r2,-32(fp)
 100f330:	e0bff817 	ldw	r2,-32(fp)
 100f334:	1000051e 	bne	r2,zero,100f34c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100f338:	e13ffd17 	ldw	r4,-12(fp)
 100f33c:	100f69c0 	call	100f69c <alt_find_file>
 100f340:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 100f344:	00800044 	movi	r2,1
 100f348:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100f34c:	e0bff817 	ldw	r2,-32(fp)
 100f350:	10002926 	beq	r2,zero,100f3f8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100f354:	e13ff817 	ldw	r4,-32(fp)
 100f358:	100f7a40 	call	100f7a4 <alt_get_fd>
 100f35c:	e0bff915 	stw	r2,-28(fp)
 100f360:	e0bff917 	ldw	r2,-28(fp)
 100f364:	1000030e 	bge	r2,zero,100f374 <open+0x84>
    {
      status = index;
 100f368:	e0bff917 	ldw	r2,-28(fp)
 100f36c:	e0bffa15 	stw	r2,-24(fp)
 100f370:	00002306 	br	100f400 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 100f374:	e0bff917 	ldw	r2,-28(fp)
 100f378:	10c00324 	muli	r3,r2,12
 100f37c:	00804074 	movhi	r2,257
 100f380:	10824504 	addi	r2,r2,2324
 100f384:	1885883a 	add	r2,r3,r2
 100f388:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100f38c:	e0fffe17 	ldw	r3,-8(fp)
 100f390:	00900034 	movhi	r2,16384
 100f394:	10bfffc4 	addi	r2,r2,-1
 100f398:	1886703a 	and	r3,r3,r2
 100f39c:	e0bffc17 	ldw	r2,-16(fp)
 100f3a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100f3a4:	e0bffb17 	ldw	r2,-20(fp)
 100f3a8:	1000051e 	bne	r2,zero,100f3c0 <open+0xd0>
 100f3ac:	e13ffc17 	ldw	r4,-16(fp)
 100f3b0:	100f22c0 	call	100f22c <alt_file_locked>
 100f3b4:	e0bffa15 	stw	r2,-24(fp)
 100f3b8:	e0bffa17 	ldw	r2,-24(fp)
 100f3bc:	10001016 	blt	r2,zero,100f400 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100f3c0:	e0bff817 	ldw	r2,-32(fp)
 100f3c4:	10800317 	ldw	r2,12(r2)
 100f3c8:	10000826 	beq	r2,zero,100f3ec <open+0xfc>
 100f3cc:	e0bff817 	ldw	r2,-32(fp)
 100f3d0:	10800317 	ldw	r2,12(r2)
 100f3d4:	e1ffff17 	ldw	r7,-4(fp)
 100f3d8:	e1bffe17 	ldw	r6,-8(fp)
 100f3dc:	e17ffd17 	ldw	r5,-12(fp)
 100f3e0:	e13ffc17 	ldw	r4,-16(fp)
 100f3e4:	103ee83a 	callr	r2
 100f3e8:	00000106 	br	100f3f0 <open+0x100>
 100f3ec:	0005883a 	mov	r2,zero
 100f3f0:	e0bffa15 	stw	r2,-24(fp)
 100f3f4:	00000206 	br	100f400 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100f3f8:	00bffb44 	movi	r2,-19
 100f3fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100f400:	e0bffa17 	ldw	r2,-24(fp)
 100f404:	1000090e 	bge	r2,zero,100f42c <open+0x13c>
  {
    alt_release_fd (index);  
 100f408:	e13ff917 	ldw	r4,-28(fp)
 100f40c:	100dd600 	call	100dd60 <alt_release_fd>
    ALT_ERRNO = -status;
 100f410:	100f1f00 	call	100f1f0 <alt_get_errno>
 100f414:	1007883a 	mov	r3,r2
 100f418:	e0bffa17 	ldw	r2,-24(fp)
 100f41c:	0085c83a 	sub	r2,zero,r2
 100f420:	18800015 	stw	r2,0(r3)
    return -1;
 100f424:	00bfffc4 	movi	r2,-1
 100f428:	00000106 	br	100f430 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 100f42c:	e0bff917 	ldw	r2,-28(fp)
}
 100f430:	e037883a 	mov	sp,fp
 100f434:	dfc00117 	ldw	ra,4(sp)
 100f438:	df000017 	ldw	fp,0(sp)
 100f43c:	dec00204 	addi	sp,sp,8
 100f440:	f800283a 	ret

0100f444 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100f444:	defffa04 	addi	sp,sp,-24
 100f448:	df000515 	stw	fp,20(sp)
 100f44c:	df000504 	addi	fp,sp,20
 100f450:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f454:	0005303a 	rdctl	r2,status
 100f458:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f45c:	e0fffc17 	ldw	r3,-16(fp)
 100f460:	00bfff84 	movi	r2,-2
 100f464:	1884703a 	and	r2,r3,r2
 100f468:	1001703a 	wrctl	status,r2
  
  return context;
 100f46c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100f470:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 100f474:	e0bfff17 	ldw	r2,-4(fp)
 100f478:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100f47c:	e0bffd17 	ldw	r2,-12(fp)
 100f480:	10800017 	ldw	r2,0(r2)
 100f484:	e0fffd17 	ldw	r3,-12(fp)
 100f488:	18c00117 	ldw	r3,4(r3)
 100f48c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 100f490:	e0bffd17 	ldw	r2,-12(fp)
 100f494:	10800117 	ldw	r2,4(r2)
 100f498:	e0fffd17 	ldw	r3,-12(fp)
 100f49c:	18c00017 	ldw	r3,0(r3)
 100f4a0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100f4a4:	e0bffd17 	ldw	r2,-12(fp)
 100f4a8:	e0fffd17 	ldw	r3,-12(fp)
 100f4ac:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 100f4b0:	e0bffd17 	ldw	r2,-12(fp)
 100f4b4:	e0fffd17 	ldw	r3,-12(fp)
 100f4b8:	10c00015 	stw	r3,0(r2)
 100f4bc:	e0bffb17 	ldw	r2,-20(fp)
 100f4c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f4c4:	e0bffe17 	ldw	r2,-8(fp)
 100f4c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100f4cc:	0001883a 	nop
 100f4d0:	e037883a 	mov	sp,fp
 100f4d4:	df000017 	ldw	fp,0(sp)
 100f4d8:	dec00104 	addi	sp,sp,4
 100f4dc:	f800283a 	ret

0100f4e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100f4e0:	defffb04 	addi	sp,sp,-20
 100f4e4:	dfc00415 	stw	ra,16(sp)
 100f4e8:	df000315 	stw	fp,12(sp)
 100f4ec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100f4f0:	d0a00e17 	ldw	r2,-32712(gp)
 100f4f4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100f4f8:	d0a6d817 	ldw	r2,-25760(gp)
 100f4fc:	10800044 	addi	r2,r2,1
 100f500:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100f504:	00002e06 	br	100f5c0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 100f508:	e0bffd17 	ldw	r2,-12(fp)
 100f50c:	10800017 	ldw	r2,0(r2)
 100f510:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100f514:	e0bffd17 	ldw	r2,-12(fp)
 100f518:	10800403 	ldbu	r2,16(r2)
 100f51c:	10803fcc 	andi	r2,r2,255
 100f520:	10000426 	beq	r2,zero,100f534 <alt_tick+0x54>
 100f524:	d0a6d817 	ldw	r2,-25760(gp)
 100f528:	1000021e 	bne	r2,zero,100f534 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 100f52c:	e0bffd17 	ldw	r2,-12(fp)
 100f530:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100f534:	e0bffd17 	ldw	r2,-12(fp)
 100f538:	10800217 	ldw	r2,8(r2)
 100f53c:	d0e6d817 	ldw	r3,-25760(gp)
 100f540:	18801d36 	bltu	r3,r2,100f5b8 <alt_tick+0xd8>
 100f544:	e0bffd17 	ldw	r2,-12(fp)
 100f548:	10800403 	ldbu	r2,16(r2)
 100f54c:	10803fcc 	andi	r2,r2,255
 100f550:	1000191e 	bne	r2,zero,100f5b8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 100f554:	e0bffd17 	ldw	r2,-12(fp)
 100f558:	10800317 	ldw	r2,12(r2)
 100f55c:	e0fffd17 	ldw	r3,-12(fp)
 100f560:	18c00517 	ldw	r3,20(r3)
 100f564:	1809883a 	mov	r4,r3
 100f568:	103ee83a 	callr	r2
 100f56c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100f570:	e0bfff17 	ldw	r2,-4(fp)
 100f574:	1000031e 	bne	r2,zero,100f584 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 100f578:	e13ffd17 	ldw	r4,-12(fp)
 100f57c:	100f4440 	call	100f444 <alt_alarm_stop>
 100f580:	00000d06 	br	100f5b8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 100f584:	e0bffd17 	ldw	r2,-12(fp)
 100f588:	10c00217 	ldw	r3,8(r2)
 100f58c:	e0bfff17 	ldw	r2,-4(fp)
 100f590:	1887883a 	add	r3,r3,r2
 100f594:	e0bffd17 	ldw	r2,-12(fp)
 100f598:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100f59c:	e0bffd17 	ldw	r2,-12(fp)
 100f5a0:	10c00217 	ldw	r3,8(r2)
 100f5a4:	d0a6d817 	ldw	r2,-25760(gp)
 100f5a8:	1880032e 	bgeu	r3,r2,100f5b8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 100f5ac:	e0bffd17 	ldw	r2,-12(fp)
 100f5b0:	00c00044 	movi	r3,1
 100f5b4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 100f5b8:	e0bffe17 	ldw	r2,-8(fp)
 100f5bc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100f5c0:	e0fffd17 	ldw	r3,-12(fp)
 100f5c4:	d0a00e04 	addi	r2,gp,-32712
 100f5c8:	18bfcf1e 	bne	r3,r2,100f508 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100f5cc:	0001883a 	nop
}
 100f5d0:	0001883a 	nop
 100f5d4:	e037883a 	mov	sp,fp
 100f5d8:	dfc00117 	ldw	ra,4(sp)
 100f5dc:	df000017 	ldw	fp,0(sp)
 100f5e0:	dec00204 	addi	sp,sp,8
 100f5e4:	f800283a 	ret

0100f5e8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 100f5e8:	deffff04 	addi	sp,sp,-4
 100f5ec:	df000015 	stw	fp,0(sp)
 100f5f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100f5f4:	000170fa 	wrctl	ienable,zero
}
 100f5f8:	0001883a 	nop
 100f5fc:	e037883a 	mov	sp,fp
 100f600:	df000017 	ldw	fp,0(sp)
 100f604:	dec00104 	addi	sp,sp,4
 100f608:	f800283a 	ret

0100f60c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100f60c:	defffa04 	addi	sp,sp,-24
 100f610:	dfc00515 	stw	ra,20(sp)
 100f614:	df000415 	stw	fp,16(sp)
 100f618:	df000404 	addi	fp,sp,16
 100f61c:	e13ffe15 	stw	r4,-8(fp)
 100f620:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100f624:	e0bfff17 	ldw	r2,-4(fp)
 100f628:	10800017 	ldw	r2,0(r2)
 100f62c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100f630:	e13ffe17 	ldw	r4,-8(fp)
 100f634:	1000d040 	call	1000d04 <strlen>
 100f638:	10800044 	addi	r2,r2,1
 100f63c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100f640:	00000d06 	br	100f678 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100f644:	e0bffc17 	ldw	r2,-16(fp)
 100f648:	10800217 	ldw	r2,8(r2)
 100f64c:	e0fffd17 	ldw	r3,-12(fp)
 100f650:	180d883a 	mov	r6,r3
 100f654:	e17ffe17 	ldw	r5,-8(fp)
 100f658:	1009883a 	mov	r4,r2
 100f65c:	100f9c00 	call	100f9c0 <memcmp>
 100f660:	1000021e 	bne	r2,zero,100f66c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100f664:	e0bffc17 	ldw	r2,-16(fp)
 100f668:	00000706 	br	100f688 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100f66c:	e0bffc17 	ldw	r2,-16(fp)
 100f670:	10800017 	ldw	r2,0(r2)
 100f674:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100f678:	e0fffc17 	ldw	r3,-16(fp)
 100f67c:	e0bfff17 	ldw	r2,-4(fp)
 100f680:	18bff01e 	bne	r3,r2,100f644 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100f684:	0005883a 	mov	r2,zero
}
 100f688:	e037883a 	mov	sp,fp
 100f68c:	dfc00117 	ldw	ra,4(sp)
 100f690:	df000017 	ldw	fp,0(sp)
 100f694:	dec00204 	addi	sp,sp,8
 100f698:	f800283a 	ret

0100f69c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100f69c:	defffb04 	addi	sp,sp,-20
 100f6a0:	dfc00415 	stw	ra,16(sp)
 100f6a4:	df000315 	stw	fp,12(sp)
 100f6a8:	df000304 	addi	fp,sp,12
 100f6ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100f6b0:	d0a00617 	ldw	r2,-32744(gp)
 100f6b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100f6b8:	00003106 	br	100f780 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 100f6bc:	e0bffd17 	ldw	r2,-12(fp)
 100f6c0:	10800217 	ldw	r2,8(r2)
 100f6c4:	1009883a 	mov	r4,r2
 100f6c8:	1000d040 	call	1000d04 <strlen>
 100f6cc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 100f6d0:	e0bffd17 	ldw	r2,-12(fp)
 100f6d4:	10c00217 	ldw	r3,8(r2)
 100f6d8:	e0bffe17 	ldw	r2,-8(fp)
 100f6dc:	10bfffc4 	addi	r2,r2,-1
 100f6e0:	1885883a 	add	r2,r3,r2
 100f6e4:	10800003 	ldbu	r2,0(r2)
 100f6e8:	10803fcc 	andi	r2,r2,255
 100f6ec:	1080201c 	xori	r2,r2,128
 100f6f0:	10bfe004 	addi	r2,r2,-128
 100f6f4:	10800bd8 	cmpnei	r2,r2,47
 100f6f8:	1000031e 	bne	r2,zero,100f708 <alt_find_file+0x6c>
    {
      len -= 1;
 100f6fc:	e0bffe17 	ldw	r2,-8(fp)
 100f700:	10bfffc4 	addi	r2,r2,-1
 100f704:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100f708:	e0bffe17 	ldw	r2,-8(fp)
 100f70c:	e0ffff17 	ldw	r3,-4(fp)
 100f710:	1885883a 	add	r2,r3,r2
 100f714:	10800003 	ldbu	r2,0(r2)
 100f718:	10803fcc 	andi	r2,r2,255
 100f71c:	1080201c 	xori	r2,r2,128
 100f720:	10bfe004 	addi	r2,r2,-128
 100f724:	10800be0 	cmpeqi	r2,r2,47
 100f728:	1000081e 	bne	r2,zero,100f74c <alt_find_file+0xb0>
 100f72c:	e0bffe17 	ldw	r2,-8(fp)
 100f730:	e0ffff17 	ldw	r3,-4(fp)
 100f734:	1885883a 	add	r2,r3,r2
 100f738:	10800003 	ldbu	r2,0(r2)
 100f73c:	10803fcc 	andi	r2,r2,255
 100f740:	1080201c 	xori	r2,r2,128
 100f744:	10bfe004 	addi	r2,r2,-128
 100f748:	10000a1e 	bne	r2,zero,100f774 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 100f74c:	e0bffd17 	ldw	r2,-12(fp)
 100f750:	10800217 	ldw	r2,8(r2)
 100f754:	e0fffe17 	ldw	r3,-8(fp)
 100f758:	180d883a 	mov	r6,r3
 100f75c:	e17fff17 	ldw	r5,-4(fp)
 100f760:	1009883a 	mov	r4,r2
 100f764:	100f9c00 	call	100f9c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100f768:	1000021e 	bne	r2,zero,100f774 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100f76c:	e0bffd17 	ldw	r2,-12(fp)
 100f770:	00000706 	br	100f790 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 100f774:	e0bffd17 	ldw	r2,-12(fp)
 100f778:	10800017 	ldw	r2,0(r2)
 100f77c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100f780:	e0fffd17 	ldw	r3,-12(fp)
 100f784:	d0a00604 	addi	r2,gp,-32744
 100f788:	18bfcc1e 	bne	r3,r2,100f6bc <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100f78c:	0005883a 	mov	r2,zero
}
 100f790:	e037883a 	mov	sp,fp
 100f794:	dfc00117 	ldw	ra,4(sp)
 100f798:	df000017 	ldw	fp,0(sp)
 100f79c:	dec00204 	addi	sp,sp,8
 100f7a0:	f800283a 	ret

0100f7a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100f7a4:	defffc04 	addi	sp,sp,-16
 100f7a8:	df000315 	stw	fp,12(sp)
 100f7ac:	df000304 	addi	fp,sp,12
 100f7b0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100f7b4:	00bffa04 	movi	r2,-24
 100f7b8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100f7bc:	e03ffd15 	stw	zero,-12(fp)
 100f7c0:	00001906 	br	100f828 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 100f7c4:	00804074 	movhi	r2,257
 100f7c8:	10824504 	addi	r2,r2,2324
 100f7cc:	e0fffd17 	ldw	r3,-12(fp)
 100f7d0:	18c00324 	muli	r3,r3,12
 100f7d4:	10c5883a 	add	r2,r2,r3
 100f7d8:	10800017 	ldw	r2,0(r2)
 100f7dc:	10000f1e 	bne	r2,zero,100f81c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 100f7e0:	00804074 	movhi	r2,257
 100f7e4:	10824504 	addi	r2,r2,2324
 100f7e8:	e0fffd17 	ldw	r3,-12(fp)
 100f7ec:	18c00324 	muli	r3,r3,12
 100f7f0:	10c5883a 	add	r2,r2,r3
 100f7f4:	e0ffff17 	ldw	r3,-4(fp)
 100f7f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 100f7fc:	d0e00a17 	ldw	r3,-32728(gp)
 100f800:	e0bffd17 	ldw	r2,-12(fp)
 100f804:	1880020e 	bge	r3,r2,100f810 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 100f808:	e0bffd17 	ldw	r2,-12(fp)
 100f80c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 100f810:	e0bffd17 	ldw	r2,-12(fp)
 100f814:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 100f818:	00000606 	br	100f834 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100f81c:	e0bffd17 	ldw	r2,-12(fp)
 100f820:	10800044 	addi	r2,r2,1
 100f824:	e0bffd15 	stw	r2,-12(fp)
 100f828:	e0bffd17 	ldw	r2,-12(fp)
 100f82c:	10800810 	cmplti	r2,r2,32
 100f830:	103fe41e 	bne	r2,zero,100f7c4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100f834:	e0bffe17 	ldw	r2,-8(fp)
}
 100f838:	e037883a 	mov	sp,fp
 100f83c:	df000017 	ldw	fp,0(sp)
 100f840:	dec00104 	addi	sp,sp,4
 100f844:	f800283a 	ret

0100f848 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 100f848:	defffb04 	addi	sp,sp,-20
 100f84c:	df000415 	stw	fp,16(sp)
 100f850:	df000404 	addi	fp,sp,16
 100f854:	e13ffe15 	stw	r4,-8(fp)
 100f858:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100f85c:	e0bfff17 	ldw	r2,-4(fp)
 100f860:	10840070 	cmpltui	r2,r2,4097
 100f864:	1000021e 	bne	r2,zero,100f870 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 100f868:	00840004 	movi	r2,4096
 100f86c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100f870:	e0fffe17 	ldw	r3,-8(fp)
 100f874:	e0bfff17 	ldw	r2,-4(fp)
 100f878:	1885883a 	add	r2,r3,r2
 100f87c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100f880:	e0bffe17 	ldw	r2,-8(fp)
 100f884:	e0bffc15 	stw	r2,-16(fp)
 100f888:	00000506 	br	100f8a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100f88c:	e0bffc17 	ldw	r2,-16(fp)
 100f890:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100f894:	e0bffc17 	ldw	r2,-16(fp)
 100f898:	10800804 	addi	r2,r2,32
 100f89c:	e0bffc15 	stw	r2,-16(fp)
 100f8a0:	e0fffc17 	ldw	r3,-16(fp)
 100f8a4:	e0bffd17 	ldw	r2,-12(fp)
 100f8a8:	18bff836 	bltu	r3,r2,100f88c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100f8ac:	e0bffe17 	ldw	r2,-8(fp)
 100f8b0:	108007cc 	andi	r2,r2,31
 100f8b4:	10000226 	beq	r2,zero,100f8c0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100f8b8:	e0bffc17 	ldw	r2,-16(fp)
 100f8bc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100f8c0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100f8c4:	0001883a 	nop
 100f8c8:	e037883a 	mov	sp,fp
 100f8cc:	df000017 	ldw	fp,0(sp)
 100f8d0:	dec00104 	addi	sp,sp,4
 100f8d4:	f800283a 	ret

0100f8d8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 100f8d8:	defffe04 	addi	sp,sp,-8
 100f8dc:	df000115 	stw	fp,4(sp)
 100f8e0:	df000104 	addi	fp,sp,4
 100f8e4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 100f8e8:	e0bfff17 	ldw	r2,-4(fp)
 100f8ec:	10bffe84 	addi	r2,r2,-6
 100f8f0:	10c00428 	cmpgeui	r3,r2,16
 100f8f4:	18001a1e 	bne	r3,zero,100f960 <alt_exception_cause_generated_bad_addr+0x88>
 100f8f8:	100690ba 	slli	r3,r2,2
 100f8fc:	00804074 	movhi	r2,257
 100f900:	10be4404 	addi	r2,r2,-1776
 100f904:	1885883a 	add	r2,r3,r2
 100f908:	10800017 	ldw	r2,0(r2)
 100f90c:	1000683a 	jmp	r2
 100f910:	0100f950 	cmplti	r4,zero,997
 100f914:	0100f950 	cmplti	r4,zero,997
 100f918:	0100f960 	cmpeqi	r4,zero,997
 100f91c:	0100f960 	cmpeqi	r4,zero,997
 100f920:	0100f960 	cmpeqi	r4,zero,997
 100f924:	0100f950 	cmplti	r4,zero,997
 100f928:	0100f958 	cmpnei	r4,zero,997
 100f92c:	0100f960 	cmpeqi	r4,zero,997
 100f930:	0100f950 	cmplti	r4,zero,997
 100f934:	0100f950 	cmplti	r4,zero,997
 100f938:	0100f960 	cmpeqi	r4,zero,997
 100f93c:	0100f950 	cmplti	r4,zero,997
 100f940:	0100f958 	cmpnei	r4,zero,997
 100f944:	0100f960 	cmpeqi	r4,zero,997
 100f948:	0100f960 	cmpeqi	r4,zero,997
 100f94c:	0100f950 	cmplti	r4,zero,997
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 100f950:	00800044 	movi	r2,1
 100f954:	00000306 	br	100f964 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 100f958:	0005883a 	mov	r2,zero
 100f95c:	00000106 	br	100f964 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 100f960:	0005883a 	mov	r2,zero
  }
}
 100f964:	e037883a 	mov	sp,fp
 100f968:	df000017 	ldw	fp,0(sp)
 100f96c:	dec00104 	addi	sp,sp,4
 100f970:	f800283a 	ret

0100f974 <atexit>:
 100f974:	200b883a 	mov	r5,r4
 100f978:	000f883a 	mov	r7,zero
 100f97c:	000d883a 	mov	r6,zero
 100f980:	0009883a 	mov	r4,zero
 100f984:	100fa3c1 	jmpi	100fa3c <__register_exitproc>

0100f988 <exit>:
 100f988:	defffe04 	addi	sp,sp,-8
 100f98c:	000b883a 	mov	r5,zero
 100f990:	dc000015 	stw	r16,0(sp)
 100f994:	dfc00115 	stw	ra,4(sp)
 100f998:	2021883a 	mov	r16,r4
 100f99c:	100fb540 	call	100fb54 <__call_exitprocs>
 100f9a0:	00804074 	movhi	r2,257
 100f9a4:	1086bd04 	addi	r2,r2,6900
 100f9a8:	11000017 	ldw	r4,0(r2)
 100f9ac:	20800f17 	ldw	r2,60(r4)
 100f9b0:	10000126 	beq	r2,zero,100f9b8 <exit+0x30>
 100f9b4:	103ee83a 	callr	r2
 100f9b8:	8009883a 	mov	r4,r16
 100f9bc:	100fcd40 	call	100fcd4 <_exit>

0100f9c0 <memcmp>:
 100f9c0:	01c000c4 	movi	r7,3
 100f9c4:	3980192e 	bgeu	r7,r6,100fa2c <memcmp+0x6c>
 100f9c8:	2144b03a 	or	r2,r4,r5
 100f9cc:	11c4703a 	and	r2,r2,r7
 100f9d0:	10000f26 	beq	r2,zero,100fa10 <memcmp+0x50>
 100f9d4:	20800003 	ldbu	r2,0(r4)
 100f9d8:	28c00003 	ldbu	r3,0(r5)
 100f9dc:	10c0151e 	bne	r2,r3,100fa34 <memcmp+0x74>
 100f9e0:	31bfff84 	addi	r6,r6,-2
 100f9e4:	01ffffc4 	movi	r7,-1
 100f9e8:	00000406 	br	100f9fc <memcmp+0x3c>
 100f9ec:	20800003 	ldbu	r2,0(r4)
 100f9f0:	28c00003 	ldbu	r3,0(r5)
 100f9f4:	31bfffc4 	addi	r6,r6,-1
 100f9f8:	10c00e1e 	bne	r2,r3,100fa34 <memcmp+0x74>
 100f9fc:	21000044 	addi	r4,r4,1
 100fa00:	29400044 	addi	r5,r5,1
 100fa04:	31fff91e 	bne	r6,r7,100f9ec <memcmp+0x2c>
 100fa08:	0005883a 	mov	r2,zero
 100fa0c:	f800283a 	ret
 100fa10:	20c00017 	ldw	r3,0(r4)
 100fa14:	28800017 	ldw	r2,0(r5)
 100fa18:	18bfee1e 	bne	r3,r2,100f9d4 <memcmp+0x14>
 100fa1c:	31bfff04 	addi	r6,r6,-4
 100fa20:	21000104 	addi	r4,r4,4
 100fa24:	29400104 	addi	r5,r5,4
 100fa28:	39bff936 	bltu	r7,r6,100fa10 <memcmp+0x50>
 100fa2c:	303fe91e 	bne	r6,zero,100f9d4 <memcmp+0x14>
 100fa30:	003ff506 	br	100fa08 <memcmp+0x48>
 100fa34:	10c5c83a 	sub	r2,r2,r3
 100fa38:	f800283a 	ret

0100fa3c <__register_exitproc>:
 100fa3c:	defffa04 	addi	sp,sp,-24
 100fa40:	dc000315 	stw	r16,12(sp)
 100fa44:	04004074 	movhi	r16,257
 100fa48:	8406bd04 	addi	r16,r16,6900
 100fa4c:	80c00017 	ldw	r3,0(r16)
 100fa50:	dc400415 	stw	r17,16(sp)
 100fa54:	dfc00515 	stw	ra,20(sp)
 100fa58:	18805217 	ldw	r2,328(r3)
 100fa5c:	2023883a 	mov	r17,r4
 100fa60:	10003726 	beq	r2,zero,100fb40 <__register_exitproc+0x104>
 100fa64:	10c00117 	ldw	r3,4(r2)
 100fa68:	010007c4 	movi	r4,31
 100fa6c:	20c00e16 	blt	r4,r3,100faa8 <__register_exitproc+0x6c>
 100fa70:	1a000044 	addi	r8,r3,1
 100fa74:	8800221e 	bne	r17,zero,100fb00 <__register_exitproc+0xc4>
 100fa78:	18c00084 	addi	r3,r3,2
 100fa7c:	18c7883a 	add	r3,r3,r3
 100fa80:	18c7883a 	add	r3,r3,r3
 100fa84:	12000115 	stw	r8,4(r2)
 100fa88:	10c7883a 	add	r3,r2,r3
 100fa8c:	19400015 	stw	r5,0(r3)
 100fa90:	0005883a 	mov	r2,zero
 100fa94:	dfc00517 	ldw	ra,20(sp)
 100fa98:	dc400417 	ldw	r17,16(sp)
 100fa9c:	dc000317 	ldw	r16,12(sp)
 100faa0:	dec00604 	addi	sp,sp,24
 100faa4:	f800283a 	ret
 100faa8:	00800034 	movhi	r2,0
 100faac:	10800004 	addi	r2,r2,0
 100fab0:	10002626 	beq	r2,zero,100fb4c <__register_exitproc+0x110>
 100fab4:	01006404 	movi	r4,400
 100fab8:	d9400015 	stw	r5,0(sp)
 100fabc:	d9800115 	stw	r6,4(sp)
 100fac0:	d9c00215 	stw	r7,8(sp)
 100fac4:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x1000000>
 100fac8:	d9400017 	ldw	r5,0(sp)
 100facc:	d9800117 	ldw	r6,4(sp)
 100fad0:	d9c00217 	ldw	r7,8(sp)
 100fad4:	10001d26 	beq	r2,zero,100fb4c <__register_exitproc+0x110>
 100fad8:	81000017 	ldw	r4,0(r16)
 100fadc:	10000115 	stw	zero,4(r2)
 100fae0:	02000044 	movi	r8,1
 100fae4:	22405217 	ldw	r9,328(r4)
 100fae8:	0007883a 	mov	r3,zero
 100faec:	12400015 	stw	r9,0(r2)
 100faf0:	20805215 	stw	r2,328(r4)
 100faf4:	10006215 	stw	zero,392(r2)
 100faf8:	10006315 	stw	zero,396(r2)
 100fafc:	883fde26 	beq	r17,zero,100fa78 <__register_exitproc+0x3c>
 100fb00:	18c9883a 	add	r4,r3,r3
 100fb04:	2109883a 	add	r4,r4,r4
 100fb08:	1109883a 	add	r4,r2,r4
 100fb0c:	21802215 	stw	r6,136(r4)
 100fb10:	01800044 	movi	r6,1
 100fb14:	12406217 	ldw	r9,392(r2)
 100fb18:	30cc983a 	sll	r6,r6,r3
 100fb1c:	4992b03a 	or	r9,r9,r6
 100fb20:	12406215 	stw	r9,392(r2)
 100fb24:	21c04215 	stw	r7,264(r4)
 100fb28:	01000084 	movi	r4,2
 100fb2c:	893fd21e 	bne	r17,r4,100fa78 <__register_exitproc+0x3c>
 100fb30:	11006317 	ldw	r4,396(r2)
 100fb34:	218cb03a 	or	r6,r4,r6
 100fb38:	11806315 	stw	r6,396(r2)
 100fb3c:	003fce06 	br	100fa78 <__register_exitproc+0x3c>
 100fb40:	18805304 	addi	r2,r3,332
 100fb44:	18805215 	stw	r2,328(r3)
 100fb48:	003fc606 	br	100fa64 <__register_exitproc+0x28>
 100fb4c:	00bfffc4 	movi	r2,-1
 100fb50:	003fd006 	br	100fa94 <__register_exitproc+0x58>

0100fb54 <__call_exitprocs>:
 100fb54:	defff504 	addi	sp,sp,-44
 100fb58:	df000915 	stw	fp,36(sp)
 100fb5c:	dd400615 	stw	r21,24(sp)
 100fb60:	dc800315 	stw	r18,12(sp)
 100fb64:	dfc00a15 	stw	ra,40(sp)
 100fb68:	ddc00815 	stw	r23,32(sp)
 100fb6c:	dd800715 	stw	r22,28(sp)
 100fb70:	dd000515 	stw	r20,20(sp)
 100fb74:	dcc00415 	stw	r19,16(sp)
 100fb78:	dc400215 	stw	r17,8(sp)
 100fb7c:	dc000115 	stw	r16,4(sp)
 100fb80:	d9000015 	stw	r4,0(sp)
 100fb84:	2839883a 	mov	fp,r5
 100fb88:	04800044 	movi	r18,1
 100fb8c:	057fffc4 	movi	r21,-1
 100fb90:	00804074 	movhi	r2,257
 100fb94:	1086bd04 	addi	r2,r2,6900
 100fb98:	12000017 	ldw	r8,0(r2)
 100fb9c:	45005217 	ldw	r20,328(r8)
 100fba0:	44c05204 	addi	r19,r8,328
 100fba4:	a0001c26 	beq	r20,zero,100fc18 <__call_exitprocs+0xc4>
 100fba8:	a0800117 	ldw	r2,4(r20)
 100fbac:	15ffffc4 	addi	r23,r2,-1
 100fbb0:	b8000d16 	blt	r23,zero,100fbe8 <__call_exitprocs+0x94>
 100fbb4:	14000044 	addi	r16,r2,1
 100fbb8:	8421883a 	add	r16,r16,r16
 100fbbc:	8421883a 	add	r16,r16,r16
 100fbc0:	84402004 	addi	r17,r16,128
 100fbc4:	a463883a 	add	r17,r20,r17
 100fbc8:	a421883a 	add	r16,r20,r16
 100fbcc:	e0001e26 	beq	fp,zero,100fc48 <__call_exitprocs+0xf4>
 100fbd0:	80804017 	ldw	r2,256(r16)
 100fbd4:	e0801c26 	beq	fp,r2,100fc48 <__call_exitprocs+0xf4>
 100fbd8:	bdffffc4 	addi	r23,r23,-1
 100fbdc:	843fff04 	addi	r16,r16,-4
 100fbe0:	8c7fff04 	addi	r17,r17,-4
 100fbe4:	bd7ff91e 	bne	r23,r21,100fbcc <__call_exitprocs+0x78>
 100fbe8:	00800034 	movhi	r2,0
 100fbec:	10800004 	addi	r2,r2,0
 100fbf0:	10000926 	beq	r2,zero,100fc18 <__call_exitprocs+0xc4>
 100fbf4:	a0800117 	ldw	r2,4(r20)
 100fbf8:	1000301e 	bne	r2,zero,100fcbc <__call_exitprocs+0x168>
 100fbfc:	a0800017 	ldw	r2,0(r20)
 100fc00:	10003226 	beq	r2,zero,100fccc <__call_exitprocs+0x178>
 100fc04:	a009883a 	mov	r4,r20
 100fc08:	98800015 	stw	r2,0(r19)
 100fc0c:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x1000000>
 100fc10:	9d000017 	ldw	r20,0(r19)
 100fc14:	a03fe41e 	bne	r20,zero,100fba8 <__call_exitprocs+0x54>
 100fc18:	dfc00a17 	ldw	ra,40(sp)
 100fc1c:	df000917 	ldw	fp,36(sp)
 100fc20:	ddc00817 	ldw	r23,32(sp)
 100fc24:	dd800717 	ldw	r22,28(sp)
 100fc28:	dd400617 	ldw	r21,24(sp)
 100fc2c:	dd000517 	ldw	r20,20(sp)
 100fc30:	dcc00417 	ldw	r19,16(sp)
 100fc34:	dc800317 	ldw	r18,12(sp)
 100fc38:	dc400217 	ldw	r17,8(sp)
 100fc3c:	dc000117 	ldw	r16,4(sp)
 100fc40:	dec00b04 	addi	sp,sp,44
 100fc44:	f800283a 	ret
 100fc48:	a0800117 	ldw	r2,4(r20)
 100fc4c:	80c00017 	ldw	r3,0(r16)
 100fc50:	10bfffc4 	addi	r2,r2,-1
 100fc54:	15c01426 	beq	r2,r23,100fca8 <__call_exitprocs+0x154>
 100fc58:	80000015 	stw	zero,0(r16)
 100fc5c:	183fde26 	beq	r3,zero,100fbd8 <__call_exitprocs+0x84>
 100fc60:	95c8983a 	sll	r4,r18,r23
 100fc64:	a0806217 	ldw	r2,392(r20)
 100fc68:	a5800117 	ldw	r22,4(r20)
 100fc6c:	2084703a 	and	r2,r4,r2
 100fc70:	10000b26 	beq	r2,zero,100fca0 <__call_exitprocs+0x14c>
 100fc74:	a0806317 	ldw	r2,396(r20)
 100fc78:	2088703a 	and	r4,r4,r2
 100fc7c:	20000c1e 	bne	r4,zero,100fcb0 <__call_exitprocs+0x15c>
 100fc80:	89400017 	ldw	r5,0(r17)
 100fc84:	d9000017 	ldw	r4,0(sp)
 100fc88:	183ee83a 	callr	r3
 100fc8c:	a0800117 	ldw	r2,4(r20)
 100fc90:	15bfbf1e 	bne	r2,r22,100fb90 <__call_exitprocs+0x3c>
 100fc94:	98800017 	ldw	r2,0(r19)
 100fc98:	153fcf26 	beq	r2,r20,100fbd8 <__call_exitprocs+0x84>
 100fc9c:	003fbc06 	br	100fb90 <__call_exitprocs+0x3c>
 100fca0:	183ee83a 	callr	r3
 100fca4:	003ff906 	br	100fc8c <__call_exitprocs+0x138>
 100fca8:	a5c00115 	stw	r23,4(r20)
 100fcac:	003feb06 	br	100fc5c <__call_exitprocs+0x108>
 100fcb0:	89000017 	ldw	r4,0(r17)
 100fcb4:	183ee83a 	callr	r3
 100fcb8:	003ff406 	br	100fc8c <__call_exitprocs+0x138>
 100fcbc:	a0800017 	ldw	r2,0(r20)
 100fcc0:	a027883a 	mov	r19,r20
 100fcc4:	1029883a 	mov	r20,r2
 100fcc8:	003fb606 	br	100fba4 <__call_exitprocs+0x50>
 100fccc:	0005883a 	mov	r2,zero
 100fcd0:	003ffb06 	br	100fcc0 <__call_exitprocs+0x16c>

0100fcd4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100fcd4:	defffd04 	addi	sp,sp,-12
 100fcd8:	df000215 	stw	fp,8(sp)
 100fcdc:	df000204 	addi	fp,sp,8
 100fce0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 100fce4:	0001883a 	nop
 100fce8:	e0bfff17 	ldw	r2,-4(fp)
 100fcec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 100fcf0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100fcf4:	10000226 	beq	r2,zero,100fd00 <_exit+0x2c>
    ALT_SIM_FAIL();
 100fcf8:	002af070 	cmpltui	zero,zero,43969
 100fcfc:	00000106 	br	100fd04 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 100fd00:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100fd04:	003fff06 	br	100fd04 <_exit+0x30>
